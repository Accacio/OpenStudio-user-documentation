{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to OpenStudio\n User Documentation\n\n\n\nThis is OpenStudio's user documentation. A brief summary of the content of the site is below. Use the buttons or the horizontal navigation above to learn more about the OpenStudio suite of applications.\n\n\n\n\n  \n\n    \n\n      \n \n\n        \n\n          \nGetting Started\n\n          \nThis section provides installation instructions, introductory tutorials, and information to get you up and running.\n\n          \nInstallation \n Tutorial\n\n          \nReview the list of features and building elements that can be modeled.\n\n          \nCurrent Features\n\n          \nPlanned Features\n\n        \n\n      \n\n    \n\n    \n\n      \n \n\n        \n\n          \nReferences \n Tutorials\n\n          \nInterface guides give detailed overviews of the OpenStudio applications.\n\n          \nSketchUp Plug-in\n\n          \nOpenStudio Application\n\n          \nTutorials cover essential workflows as well as advanced topics.\n\n          \nCreating Your Model\n\n          \nRunning Your Simulation\n\n          \nRadiance \n OpenStudio\n\n        \n\n      \n\n    \n\n    \n\n      \n \n\n        \n\n          \nSpeed Up Your Workflow With Measures\n\n          \nLearn what measures are, how to use them for various use cases, and where to find them.\n\n          \nAbout Measures\n\n          \nCan't find the measures you want, or need to customize an existing measure? The Measure Writing Guide will help you get started.\n\n          \nMeasure Writing Guide\n\n          \nWant to script your entire workflow?  The OpenStudio Command Line Interface can run your measure based workflow quickly and easily.\n\n          \nCommand Line Interface\n\n        \n\n      \n\n    \n\n  \n\n\n\n\n\n\n  \n\n    \n\n      \n \n\n        \n\n          \nComparative Analysis\n\n          \nLearn how to create design alternatives as part of a parametric study using the OpenStudio Parametric Analysis Tool (PAT). Run simulations locally and on the cloud.\n\n          \nParametric Analysis Tool\n\n          \nMove beyond PAT by running large scale analyses on the cloud.\n\n          \nLarge Scale Analysis\n\n        \n\n      \n\n    \n\n    \n\n      \n \n        \n\n          \nUsing Third Party Tools\n\n          \n Set materials and constructions so they can be properly imported into CBECC-Com.\n \n          \nCBECC-Com Tutorial\n\n          \nImport an IFC file into OpenStudio using BIMserver. \n\n          \nImport IFC Tutorial\n\n          \nSize a vertical ground heat exchanger with OpenStudio and GLHEPro.\n\n          \nGLHEPro Tutorial\n\n          \nCreate OpenStudio models using the web based VirtualPULSE tool.\n\n          \nVirtualPULSE Tutorial\n\n        \n\n      \n\n    \n\n    \n\n      \n\n        \n\n          \nHelp \n Additional Resources\n\n          \nFind professional training for OpenStudio.\n\n          \nTraining, Support, \n Consulting\n\n           \nCheck out Unmet Hours, to post a question or search for answers to your energy modeling questions.\n\n          \nOpenStudio on Unmet Hours\n\n          \nCheck out this advanced application of OpenStudio for fault detection:\n\n          \nFault Detection Measures \n\n          \nAdditional help topics.\n\n          \nFinding Model Data\n\n          \nBest Practices\n\n          \nTroubleshooting\n\n          \nFAQ\n\n          \nMore training videos are available on our YouTube page.\n\n          \nYouTube Videos\n\n          \nThe OpenStudio Repository on GitHub\n\n          \nOpenStudio on GitHub", 
            "title": "Home"
        }, 
        {
            "location": "/getting_started/features/", 
            "text": "Current Features\n\n\n\nOpenStudio is constantly being improved, with a less stable developer release available every 2 weeks and a stable major release quarterly (4 per year). The features that are available in the current major release are described below. To learn what is coming in the future, see the \nPlanned Features\n page.\n\n\nAs of OpenStudio Version 2.1.0\n\n\nBuilding Geometry/3D CAD\n\n\n\n\nQuickly draw 3D building geometry using free plug-in for SketchUp\n\n\nBuilding envelope, shading on windows, shading from other buildings, etc.\n\n\nDraw detailed shapes, trace floor plans, or a combination\n\n\nUse wizard to create standard shapes (H, L, E, Courtyard, Rectangle)\n\n\nImport geometry from gbXML files (from Revit, GreenBuildingStudio, Trace700, etc.)\n\n\nImport geometry from EnergyPlus files (IDF)\n\n\nImport model from SDD files (California Energy Commission)\n\n\nImport geometry from Industry Foundation Class files (IFC)\n\n\nAssign and visually inspect space types assignments\n\n\nDefine thermal zones and add/remove spaces\n\n\nAssign and see building envelope constructions\n\n\nAdd daylighting sensors\n\n\n\n\nBuilding Constructions and Materials\n\n\n\n\nSpecify default materials for each type of surface and subsurface (ext walls, windows, floors, etc.) in building\n\n\nSpecify detailed or simple window properties\n\n\nBuilt-in library of building constructions (walls, windows, doors, floors, etc.) for all DOE reference building types and vintages (pre-1980, 1980-2004, and 2004) plus ASHRAE 189.1-2009, ASHRAE 90.1-2007, and ASHRAE 90.1-2010\n\n\nOnline library of building materials and their modeling properties from ASHRAE Handbook\n\n\n\n\nBuilding Loads\n\n\n\n\nSpecify people, lights, plug loads, gas loads (cooking, etc.), steam loads, internal mass, water using equipment, ventilation requirements, and infiltration\n\n\nCan input loads per-area or add actual quantities to accommodate schematic and detailed design\n\n\nBuilt in library of space types (loads and associated schedules) for DOE reference buildings for all vintages (pre-1980, 1980-2004, and 2004) plus ASHRAE 189.1-2009, ASHRAE 90.1-2007, and ASHRAE 90.1-2010\n\n\nCan apply loads in one place (space type) and apply throughout the building\n\n\n\n\nGrid View for Thermal Zones, Space Types, Spaces, Design Days, and Refrigeration Cases\n\n\n\n\nViewing and editing your model in a grid view allows to see many objects at once and compare settings.\n\n\n\n\n\n\nHVAC\n\n\n\n\nGraphical representation of HVAC systems, zones, and their connections\n\n\nDrag-and-drop components onto diagram and click to edit\n\n\nHVAC system templates for ASHRAE Appendix G system types\n\n\n\n\nHot, Chilled, and Condenser Water Systems\n\n\n\n\nBoilers (all fuels)\n\n\nDistrict heating and cooling\n\n\nSet-temperature heating/cooling source\n\n\nSingle, two-speed, and variable-speed cooling towers\n\n\nSingle and two-speed fluid coolers and evaporative fluid coolers\n\n\nChillers (electric, absorption, indirect absorption)\n\n\nVertical and horizontal ground heat exchanger (bore fields \n trenches for ground-source heat pumps)\n\n\nBypass pipes\n\n\nConstant and variable speed pumps, both individual and headered\n\n\nFluid-to-fluid heat exchangers (for primary/secondary pumping and waterside economizers, etc.)\n\n\nHot, Chilled, and Condenser Water System Controls\n\n\nScheduled, OA reset, high and low with deadband, and follow OA setpoint controls\n\n\nStaging of equipment (based on load range, part-load, sequential, etc.)\n\n\nSolar hot water (with and without storage and integrated PV)\n\n\nPipes (indoor heat loss, outdoor heat loss, or adiabatic)\n\n\nLoad profile (model plant behavior with loads from a schedule)\n\n\nIce and chilled water storage\n\n\nWater-to-water heat pumps\n\n\n\n\nAir System Components\n\n\n\n\nSupply and return plenums\n\n\nUnitary equipment\n\n\nDual-duct systems\n\n\nChangeover bypass (VVT) systems\n\n\nMulti-stage unitary equipment (used with staged thermostats)\n\n\nOutdoor air intake with economizers (all types) and damper control\n\n\nChilled water cooling coils\n\n\nOne-speed, two-speed, multi-speed, and variable-speed DX cooling coils\n\n\nOne-speed, multi-speed, and variable-speed DX heating coils (heat pumps)\n\n\nWater-to-air heat pumps\n\n\nGas, electric, hot water, and DX (heat pump) heating and/or preheat coils\n\n\nVariable and Constant Speed Fans\n\n\nSteam humidifiers (electrically powered) used with zone humidistats\n\n\nDirect and indirect evaporative coolers\n\n\nSensible and latent heat recovery\n\n\nVAV-Reheat and CAV-Reheat terminals (gas, electric, and hot water reheat coils)\n\n\nVAV terminals without reheat\n\n\nSeries and parallel fan powered boxes with reheat (all fuel types)\n\n\nDiffusers\n\n\nChilled beams (active and passive)\n\n\nFour-pipe induction terminals\n\n\n\n\nAir System Controls\n\n\n\n\nDemand-controlled ventilation\n\n\nNight-cycle controls (whole system and/or terminal fans)\n\n\nScheduled, OA reset, SAT reset, and follow OA setpoint controls\n\n\nSingle-zone VAV system control (one control zone, many slaves)\n\n\nOptimum start control\n\n\n\n\nZone-level Heating and Cooling Systems\n\n\n\n\nUnit heaters (all fuels)\n\n\nUnit ventilators\n\n\nEnergy recovery ventilators\n\n\nDehumidifiers\n\n\nLow temp radiant heating (electric, variable and constant flow water)\n\n\nLow temp radiant cooling (variable and constant flow water)\n\n\nPTAC (DX cooling + fan + all heating fuels)\n\n\nWater-source heat pump\n\n\nAir-source heat pump\n\n\nExhaust fans\n\n\nFour pipe fan coils (may be supplied via DOAS system)\n\n\nElectric and hot-water baseboards\n\n\nHigh temperature radiant heaters (gas and electric)\n\n\nZone-to-zone transfer air (zone air mixing)\n\n\n\n\nVariable Refrigerant Flow Systems\n\n\n\n\nCondenser plus zone-level terminals\n\n\n\n\nCommercial Refrigeration\n\n\n\n\nDX Refrigeration Systems\n\n\nCascading DX Refrigeration Systems\n\n\nFluid-filled DX Secondary Refrigeration Systems\n\n\nCases\n\n\nWalk-in freezers\n\n\nCompressors\n\n\nAir, water, and evaporatively-cooled condensers\n\n\nLiquid-suction heat exchangers and mechanical subcoolers\n\n\nHeat-recovery to domestic hot water systems (desuperheater)\n\n\nHeat-recovery to unitary air systems (desuperheater)\n\n\n\n\nDomestic Water Systems\n\n\n\n\nHot Water Heaters (all fuels, including heat pump)\n\n\nEquipment that uses warm water (showers, faucets, etc.), can specify mixed water temp\n\n\nEquipment that uses cold water only\n\n\nRecirculation, no pump, or instantaneous water heaters\n\n\n\n\nDaylighting\n\n\n\n\nAdd daylighting control points via the SketchUp plugin\n\n\nRun daylighting analysis using Radiance, state-of-the-art ray-tracing daylight simulation engine without making a separate model\n\n\nLights in the EnergyPlus model controlled based on daylight available per Radiance\n\n\n\n\nCustom Controls\n\n\nWithin EnergyPlus, advanced controls that are not built-in can implemented utilizing the EnergyManagementSystem (EMS) suite of objects. This involves defining Sensors and Actuators that interact with building parameters through Programs which are written in the EnergyPlus Runtime Language (ERL), which is based on a common building-controls language. OpenStudio supports the creation of EMS programs.\n\n\nLocation-Specific Information\n\n\n\n\nFind typical \nweather data and ASHRAE design conditions\n for most locations in the world\n\n\nUse actual weather data (AMY) from a variety of vendors/sources\n\n\n\n\nEconomics\n\n\n\n\nFull lifecycle costing (NIST Handbook 135 compliant) including built-in EIA fuel escalation rates and inflation\n\n\nAdjustable analysis period length\n\n\nCapital, recurring O\nM, salvage, and replacement costs\n\n\nLifecycle is adjustable per-cost (IE windows can last longer than lamps)\n\n\nUtility rates can include time-of-use, demand charges, ratchets, seasonal values, etc.\n\n\nUtility rates for Xcel Energy CO pre-made; users pick from list\n\n\n\n\nImport and Export Options\n\n\n\n\nIDF import (geometry, constructions, loads, thermal zones, and schedules only)\n\n\nIDF export (full model including HVAC)\n\n\ngbXML import (geometry, constructions, thermal zones, and schedules only)\n\n\ngbXML export (geometry, constructions, and thermal zones only)\n\n\nSDD import (simulation format - full model including HVAC)\n\n\nSDD export (input format - geometry, constructions, and thermal zones only)\n\n\nIFC import (geometry only)\n\n\n\n\nAnalysis of Existing Buildings\n\n\n\n\nEnter utility bills for all fuel types in building\n\n\nRun model using actual weather data (AMY)\n\n\nAutomatically compare model results to bills and shows goodness-of-fit by fuel type\n\n\nAutomatically show whether goodness of fit meets common calibration standards (FEMP, ASHRAE)\n\n\n\n\nLibraries\n\n\n\n\nSpace types (people, lights, equipment, ventilation, infiltration, schedules) for DOE reference buildings for all vintages (pre-1980, 1980-2004, and 2004), ASHRAE 189.1-2009, ASHRAE 90.1-2007, and ASHRAE 90.1-2010\n\n\nBuilding constructions (walls, windows, doors, floors, etc.) for DOE reference buildings for all vintages (pre-1980, 1980-2004, and 2004), ASHRAE 189.1-2009, ASHRAE 90.1-2007, and ASHRAE 90.1-2010\n\n\nExtensive online library of building materials from ASHRAE Handbook of Fundamentals\n\n\nExtensive online library of weather files and design day conditions\n\n\n\n\nParametric Analysis\n\n\n\n\nOpenStudio Measures provide reliable and repeatable mechanism to apply ECMs to models\n\n\nEliminates ambiguity and user error; all rules encapsulated in Measure itself\n\n\nMore than 130 Measures available online and always growing\n\n\nWrite Measure once and apply to many projects\n\n\nPerform complex ECMs, like full HVAC replacement, easily\n\n\nQuickly access online and local libraries of measures from drag-and-drop interface\n\n\nEdit user inputs to control how Measure modifies the model\n\n\nCreates meaningful results, ready for inclusion in reports to design team, building owners, etc.\n\n\n\n\nQAQC\n\n\n\n\nMeasures can be used to check for common modeling errors\n\n\nUsers don't have to understand to use; gives expert review to junior modelers more cheaply\n\n\nAutomate key checks for Utility Regulators to keep up quality\n\n\nLower time spent by reviewers on mundane checks; frees time to focus on real issues\n\n\n\n\nReporting\n\n\n\n\nMeasures can be used to create custom reports in HTML format (view in any web browser)\n\n\nAllows users to quickly visualize and summarize data for different audiences\n\n\nReports are shareable via email\n\n\nReports can be simple or highly interactive\n\n\n\n\nCloud Computing\n\n\n\n\nAny user with an Amazon account can run simulations on cloud with 1 click\n\n\nVery cheap vs. engineer's time (16 simulations in parallel for ~$2.00/hr)\n\n\nCan run up to 300 simulation in parallel (costs scale in 16-processor increments)\n\n\nEnables small firms to access cloud computing without upfront hardware costs\n\n\n\n\nShare Modeling Best-Practices\n\n\n\n\nOnline database called BCL (Building Component Library) can be used to share Measures\n\n\nBCL can be used to share building components\n\n\nInstantaneous world-wide distribution and updating of content\n\n\nAllows Utilities to ensure uniformity and best-practices across many EC firms\n\n\n\n\nDocumentation\n\n\n\n\nMore than 100 YouTube video tutorials\n\n\nInteractive PDFs describing each Application\n\n\nMeasure writing guide\n\n\nLifecycle costing guide\n\n\nDocumentation of all modeling commands (SDK) online, updated bi-weekly\n\n\n\n\nApplications\n\n\nThe following applications are included in the OpenStudio installation:\n\n\nSketchUp Plug-in\n\n\n\n\nSelect a template containing building space types and constructions as a starting point\n\n\nTrace a 2D footprint and extrude into 3D geometry\n\n\nDraw new or edit existing building geometry in 3D\n\n\nUse Measures to quickly build up the model\n\n\nAdd site shading\n\n\nAssign building activity and thermal zones\n\n\nAdd daylighting objects\n\n\n\n\nOpenStudio Application\n\n\n\n\nAdd loads, schedules, space types, thermal zones, mechanical systems and more\n\n\nCreate HVAC systems using a visual drag-and-drop interface\n\n\nAdd refrigeration systems using a layout visual view and a grid view\n\n\nAdd variable refrigerant flow systems using a layout visual view and a grid view\n\n\nChange the model programmatically using the \nApply Measure Now\n feature\n\n\nRun a simulation\n\n\nView high level simulation results and detailed simulation output\n\n\nUse reporting measures to create new/custom summary reports\n\n\n\n\nResultsViewer\n\n\n\n\nView the detailed timeseries simulation results\n\n\nCreate interactive line graphs and heat maps\n\n\n\n\nParametric Analysis Tool (PAT)\n\n\n\n\nSelect a baseline model to serve as the starting point for a parametric analysis\n\n\nDrag in Measures and set their input values\n\n\nSelect combinations of Measures to run\n\n\nRun the simulations locally or on the cloud\n\n\nView a high-level comparison of the simulation results or dig into the detailed reports", 
            "title": "Current Features"
        }, 
        {
            "location": "/getting_started/features/#as-of-openstudio-version-210", 
            "text": "", 
            "title": "As of OpenStudio Version 2.1.0"
        }, 
        {
            "location": "/getting_started/features/#building-geometry3d-cad", 
            "text": "Quickly draw 3D building geometry using free plug-in for SketchUp  Building envelope, shading on windows, shading from other buildings, etc.  Draw detailed shapes, trace floor plans, or a combination  Use wizard to create standard shapes (H, L, E, Courtyard, Rectangle)  Import geometry from gbXML files (from Revit, GreenBuildingStudio, Trace700, etc.)  Import geometry from EnergyPlus files (IDF)  Import model from SDD files (California Energy Commission)  Import geometry from Industry Foundation Class files (IFC)  Assign and visually inspect space types assignments  Define thermal zones and add/remove spaces  Assign and see building envelope constructions  Add daylighting sensors", 
            "title": "Building Geometry/3D CAD"
        }, 
        {
            "location": "/getting_started/features/#building-constructions-and-materials", 
            "text": "Specify default materials for each type of surface and subsurface (ext walls, windows, floors, etc.) in building  Specify detailed or simple window properties  Built-in library of building constructions (walls, windows, doors, floors, etc.) for all DOE reference building types and vintages (pre-1980, 1980-2004, and 2004) plus ASHRAE 189.1-2009, ASHRAE 90.1-2007, and ASHRAE 90.1-2010  Online library of building materials and their modeling properties from ASHRAE Handbook", 
            "title": "Building Constructions and Materials"
        }, 
        {
            "location": "/getting_started/features/#building-loads", 
            "text": "Specify people, lights, plug loads, gas loads (cooking, etc.), steam loads, internal mass, water using equipment, ventilation requirements, and infiltration  Can input loads per-area or add actual quantities to accommodate schematic and detailed design  Built in library of space types (loads and associated schedules) for DOE reference buildings for all vintages (pre-1980, 1980-2004, and 2004) plus ASHRAE 189.1-2009, ASHRAE 90.1-2007, and ASHRAE 90.1-2010  Can apply loads in one place (space type) and apply throughout the building", 
            "title": "Building Loads"
        }, 
        {
            "location": "/getting_started/features/#grid-view-for-thermal-zones-space-types-spaces-design-days-and-refrigeration-cases", 
            "text": "Viewing and editing your model in a grid view allows to see many objects at once and compare settings.", 
            "title": "Grid View for Thermal Zones, Space Types, Spaces, Design Days, and Refrigeration Cases"
        }, 
        {
            "location": "/getting_started/features/#hvac", 
            "text": "Graphical representation of HVAC systems, zones, and their connections  Drag-and-drop components onto diagram and click to edit  HVAC system templates for ASHRAE Appendix G system types", 
            "title": "HVAC"
        }, 
        {
            "location": "/getting_started/features/#hot-chilled-and-condenser-water-systems", 
            "text": "Boilers (all fuels)  District heating and cooling  Set-temperature heating/cooling source  Single, two-speed, and variable-speed cooling towers  Single and two-speed fluid coolers and evaporative fluid coolers  Chillers (electric, absorption, indirect absorption)  Vertical and horizontal ground heat exchanger (bore fields   trenches for ground-source heat pumps)  Bypass pipes  Constant and variable speed pumps, both individual and headered  Fluid-to-fluid heat exchangers (for primary/secondary pumping and waterside economizers, etc.)  Hot, Chilled, and Condenser Water System Controls  Scheduled, OA reset, high and low with deadband, and follow OA setpoint controls  Staging of equipment (based on load range, part-load, sequential, etc.)  Solar hot water (with and without storage and integrated PV)  Pipes (indoor heat loss, outdoor heat loss, or adiabatic)  Load profile (model plant behavior with loads from a schedule)  Ice and chilled water storage  Water-to-water heat pumps", 
            "title": "Hot, Chilled, and Condenser Water Systems"
        }, 
        {
            "location": "/getting_started/features/#air-system-components", 
            "text": "Supply and return plenums  Unitary equipment  Dual-duct systems  Changeover bypass (VVT) systems  Multi-stage unitary equipment (used with staged thermostats)  Outdoor air intake with economizers (all types) and damper control  Chilled water cooling coils  One-speed, two-speed, multi-speed, and variable-speed DX cooling coils  One-speed, multi-speed, and variable-speed DX heating coils (heat pumps)  Water-to-air heat pumps  Gas, electric, hot water, and DX (heat pump) heating and/or preheat coils  Variable and Constant Speed Fans  Steam humidifiers (electrically powered) used with zone humidistats  Direct and indirect evaporative coolers  Sensible and latent heat recovery  VAV-Reheat and CAV-Reheat terminals (gas, electric, and hot water reheat coils)  VAV terminals without reheat  Series and parallel fan powered boxes with reheat (all fuel types)  Diffusers  Chilled beams (active and passive)  Four-pipe induction terminals", 
            "title": "Air System Components"
        }, 
        {
            "location": "/getting_started/features/#air-system-controls", 
            "text": "Demand-controlled ventilation  Night-cycle controls (whole system and/or terminal fans)  Scheduled, OA reset, SAT reset, and follow OA setpoint controls  Single-zone VAV system control (one control zone, many slaves)  Optimum start control", 
            "title": "Air System Controls"
        }, 
        {
            "location": "/getting_started/features/#zone-level-heating-and-cooling-systems", 
            "text": "Unit heaters (all fuels)  Unit ventilators  Energy recovery ventilators  Dehumidifiers  Low temp radiant heating (electric, variable and constant flow water)  Low temp radiant cooling (variable and constant flow water)  PTAC (DX cooling + fan + all heating fuels)  Water-source heat pump  Air-source heat pump  Exhaust fans  Four pipe fan coils (may be supplied via DOAS system)  Electric and hot-water baseboards  High temperature radiant heaters (gas and electric)  Zone-to-zone transfer air (zone air mixing)", 
            "title": "Zone-level Heating and Cooling Systems"
        }, 
        {
            "location": "/getting_started/features/#variable-refrigerant-flow-systems", 
            "text": "Condenser plus zone-level terminals", 
            "title": "Variable Refrigerant Flow Systems"
        }, 
        {
            "location": "/getting_started/features/#commercial-refrigeration", 
            "text": "DX Refrigeration Systems  Cascading DX Refrigeration Systems  Fluid-filled DX Secondary Refrigeration Systems  Cases  Walk-in freezers  Compressors  Air, water, and evaporatively-cooled condensers  Liquid-suction heat exchangers and mechanical subcoolers  Heat-recovery to domestic hot water systems (desuperheater)  Heat-recovery to unitary air systems (desuperheater)", 
            "title": "Commercial Refrigeration"
        }, 
        {
            "location": "/getting_started/features/#domestic-water-systems", 
            "text": "Hot Water Heaters (all fuels, including heat pump)  Equipment that uses warm water (showers, faucets, etc.), can specify mixed water temp  Equipment that uses cold water only  Recirculation, no pump, or instantaneous water heaters", 
            "title": "Domestic Water Systems"
        }, 
        {
            "location": "/getting_started/features/#daylighting", 
            "text": "Add daylighting control points via the SketchUp plugin  Run daylighting analysis using Radiance, state-of-the-art ray-tracing daylight simulation engine without making a separate model  Lights in the EnergyPlus model controlled based on daylight available per Radiance", 
            "title": "Daylighting"
        }, 
        {
            "location": "/getting_started/features/#custom-controls", 
            "text": "Within EnergyPlus, advanced controls that are not built-in can implemented utilizing the EnergyManagementSystem (EMS) suite of objects. This involves defining Sensors and Actuators that interact with building parameters through Programs which are written in the EnergyPlus Runtime Language (ERL), which is based on a common building-controls language. OpenStudio supports the creation of EMS programs.", 
            "title": "Custom Controls"
        }, 
        {
            "location": "/getting_started/features/#location-specific-information", 
            "text": "Find typical  weather data and ASHRAE design conditions  for most locations in the world  Use actual weather data (AMY) from a variety of vendors/sources", 
            "title": "Location-Specific Information"
        }, 
        {
            "location": "/getting_started/features/#economics", 
            "text": "Full lifecycle costing (NIST Handbook 135 compliant) including built-in EIA fuel escalation rates and inflation  Adjustable analysis period length  Capital, recurring O M, salvage, and replacement costs  Lifecycle is adjustable per-cost (IE windows can last longer than lamps)  Utility rates can include time-of-use, demand charges, ratchets, seasonal values, etc.  Utility rates for Xcel Energy CO pre-made; users pick from list", 
            "title": "Economics"
        }, 
        {
            "location": "/getting_started/features/#import-and-export-options", 
            "text": "IDF import (geometry, constructions, loads, thermal zones, and schedules only)  IDF export (full model including HVAC)  gbXML import (geometry, constructions, thermal zones, and schedules only)  gbXML export (geometry, constructions, and thermal zones only)  SDD import (simulation format - full model including HVAC)  SDD export (input format - geometry, constructions, and thermal zones only)  IFC import (geometry only)", 
            "title": "Import and Export Options"
        }, 
        {
            "location": "/getting_started/features/#analysis-of-existing-buildings", 
            "text": "Enter utility bills for all fuel types in building  Run model using actual weather data (AMY)  Automatically compare model results to bills and shows goodness-of-fit by fuel type  Automatically show whether goodness of fit meets common calibration standards (FEMP, ASHRAE)", 
            "title": "Analysis of Existing Buildings"
        }, 
        {
            "location": "/getting_started/features/#libraries", 
            "text": "Space types (people, lights, equipment, ventilation, infiltration, schedules) for DOE reference buildings for all vintages (pre-1980, 1980-2004, and 2004), ASHRAE 189.1-2009, ASHRAE 90.1-2007, and ASHRAE 90.1-2010  Building constructions (walls, windows, doors, floors, etc.) for DOE reference buildings for all vintages (pre-1980, 1980-2004, and 2004), ASHRAE 189.1-2009, ASHRAE 90.1-2007, and ASHRAE 90.1-2010  Extensive online library of building materials from ASHRAE Handbook of Fundamentals  Extensive online library of weather files and design day conditions", 
            "title": "Libraries"
        }, 
        {
            "location": "/getting_started/features/#parametric-analysis", 
            "text": "OpenStudio Measures provide reliable and repeatable mechanism to apply ECMs to models  Eliminates ambiguity and user error; all rules encapsulated in Measure itself  More than 130 Measures available online and always growing  Write Measure once and apply to many projects  Perform complex ECMs, like full HVAC replacement, easily  Quickly access online and local libraries of measures from drag-and-drop interface  Edit user inputs to control how Measure modifies the model  Creates meaningful results, ready for inclusion in reports to design team, building owners, etc.", 
            "title": "Parametric Analysis"
        }, 
        {
            "location": "/getting_started/features/#qaqc", 
            "text": "Measures can be used to check for common modeling errors  Users don't have to understand to use; gives expert review to junior modelers more cheaply  Automate key checks for Utility Regulators to keep up quality  Lower time spent by reviewers on mundane checks; frees time to focus on real issues", 
            "title": "QAQC"
        }, 
        {
            "location": "/getting_started/features/#reporting", 
            "text": "Measures can be used to create custom reports in HTML format (view in any web browser)  Allows users to quickly visualize and summarize data for different audiences  Reports are shareable via email  Reports can be simple or highly interactive", 
            "title": "Reporting"
        }, 
        {
            "location": "/getting_started/features/#cloud-computing", 
            "text": "Any user with an Amazon account can run simulations on cloud with 1 click  Very cheap vs. engineer's time (16 simulations in parallel for ~$2.00/hr)  Can run up to 300 simulation in parallel (costs scale in 16-processor increments)  Enables small firms to access cloud computing without upfront hardware costs", 
            "title": "Cloud Computing"
        }, 
        {
            "location": "/getting_started/features/#share-modeling-best-practices", 
            "text": "Online database called BCL (Building Component Library) can be used to share Measures  BCL can be used to share building components  Instantaneous world-wide distribution and updating of content  Allows Utilities to ensure uniformity and best-practices across many EC firms", 
            "title": "Share Modeling Best-Practices"
        }, 
        {
            "location": "/getting_started/features/#documentation", 
            "text": "More than 100 YouTube video tutorials  Interactive PDFs describing each Application  Measure writing guide  Lifecycle costing guide  Documentation of all modeling commands (SDK) online, updated bi-weekly", 
            "title": "Documentation"
        }, 
        {
            "location": "/getting_started/features/#applications", 
            "text": "The following applications are included in the OpenStudio installation:", 
            "title": "Applications"
        }, 
        {
            "location": "/getting_started/features/#sketchup-plug-in", 
            "text": "Select a template containing building space types and constructions as a starting point  Trace a 2D footprint and extrude into 3D geometry  Draw new or edit existing building geometry in 3D  Use Measures to quickly build up the model  Add site shading  Assign building activity and thermal zones  Add daylighting objects", 
            "title": "SketchUp Plug-in"
        }, 
        {
            "location": "/getting_started/features/#openstudio-application", 
            "text": "Add loads, schedules, space types, thermal zones, mechanical systems and more  Create HVAC systems using a visual drag-and-drop interface  Add refrigeration systems using a layout visual view and a grid view  Add variable refrigerant flow systems using a layout visual view and a grid view  Change the model programmatically using the  Apply Measure Now  feature  Run a simulation  View high level simulation results and detailed simulation output  Use reporting measures to create new/custom summary reports", 
            "title": "OpenStudio Application"
        }, 
        {
            "location": "/getting_started/features/#resultsviewer", 
            "text": "View the detailed timeseries simulation results  Create interactive line graphs and heat maps", 
            "title": "ResultsViewer"
        }, 
        {
            "location": "/getting_started/features/#parametric-analysis-tool-pat", 
            "text": "Select a baseline model to serve as the starting point for a parametric analysis  Drag in Measures and set their input values  Select combinations of Measures to run  Run the simulations locally or on the cloud  View a high-level comparison of the simulation results or dig into the detailed reports", 
            "title": "Parametric Analysis Tool (PAT)"
        }, 
        {
            "location": "/getting_started/roadmap/", 
            "text": "Planned Features\n\n\n\nThe high level plans for the next few versions are outlined below. These are not set in stone, and change based on feedback from users, DOE, and other clients. If there is a feature that you'd like to see added to this list or moved higher up on the priority list, please contact us. We try hard to act quickly on user feedback.\n\n\nOverarching Goals for FY17\n\n\nThe team\u2019s focus for FY17 (October 2016 \u2013 September 2017) is on robustness and performance improvements, and alignment of how PAT and OS Server work \u201cunder the hood.\u201d  The team will also be demonstrating new development patterns with the SDK using Node.js, Electron, and Angular software technologies.\n\n\nOpenStudio 2.1.0 (March 2017)\n\n\n\n\nEnergyPlus 8.7 Support\n\n\nNew Parametric Analysis Tool Features\n\n\nRun sampling and optimization problems\n\n\nSet up and run simulations on the cloud\n\n\n\n\n\n\n\n\nOpenStudio 2.2.0 (June 2017)\n\n\n\n\nAlpha version of simple geometry editor (stand alone)\n\n\n\n\nOpenStudio 2.3.0 (September 2017)\n\n\n\n\nEnergyPlus 8.8 Support\n\n\nBeta version of simple geometry editor\n\n\nMeasures for calibration of models to actual data\n\n\n\n\nMeasure Priorities\n\n\nView the public Google Document spreadsheet for the \nMeasure Roadmap.", 
            "title": "Planned Features"
        }, 
        {
            "location": "/getting_started/roadmap/#overarching-goals-for-fy17", 
            "text": "The team\u2019s focus for FY17 (October 2016 \u2013 September 2017) is on robustness and performance improvements, and alignment of how PAT and OS Server work \u201cunder the hood.\u201d  The team will also be demonstrating new development patterns with the SDK using Node.js, Electron, and Angular software technologies.", 
            "title": "Overarching Goals for FY17"
        }, 
        {
            "location": "/getting_started/roadmap/#openstudio-210-march-2017", 
            "text": "EnergyPlus 8.7 Support  New Parametric Analysis Tool Features  Run sampling and optimization problems  Set up and run simulations on the cloud", 
            "title": "OpenStudio 2.1.0 (March 2017)"
        }, 
        {
            "location": "/getting_started/roadmap/#openstudio-220-june-2017", 
            "text": "Alpha version of simple geometry editor (stand alone)", 
            "title": "OpenStudio 2.2.0 (June 2017)"
        }, 
        {
            "location": "/getting_started/roadmap/#openstudio-230-september-2017", 
            "text": "EnergyPlus 8.8 Support  Beta version of simple geometry editor  Measures for calibration of models to actual data", 
            "title": "OpenStudio 2.3.0 (September 2017)"
        }, 
        {
            "location": "/getting_started/roadmap/#measure-priorities", 
            "text": "View the public Google Document spreadsheet for the  Measure Roadmap.", 
            "title": "Measure Priorities"
        }, 
        {
            "location": "/getting_started/getting_started/", 
            "text": "Installation and Introductory Tutorial\n\n\n\nThis page walks you through installing OpenStudio, the basics of the applications, and the basic workflow.\n\n\nInstallation Instructions\n\n\nOpenStudio is supported on Windows 7 \u2013 Windows 10, OS X 10.9 \u2013 10.10, and 64-bit Ubuntu 14.04.\n\n\nOpenStudio 1.10.0 supports EnergyPlus Release 8.4.0, which is bundled with the OpenStudio installer. It is no longer necessary to download and install EnergyPlus separately. However, an installer is available at \nhttps://github.com/NREL/EnergyPlus/releases/tag/v8.4.0.\n Other builds of EnergyPlus 8.4 are not supported by OpenStudio 1.10.0.\n\n\nOpenStudio 1.10.0 supports Radiance 5.0.a.5, which is bundled with the OpenStudio installer. It is no longer necessary to download and install Radiance separately. However, an installer is available at \nhttps://github.com/NREL/Radiance/releases/tag/5.0.a.5.\n Other builds of Radiance are not supported by OpenStudio 1.10.0.\n\n\nInstallation Steps\n\n\nDownload and install SketchUp\n\n\n\n\nThe OpenStudio SketchUp Plug-in requires SketchUp 2016 (not available for Linux). The OpenStudio SketchUp Plug-in does not support older versions of SketchUp. SketchUp 2016 is available in 32 and 64-bit versions; the 32-bit version of OpenStudio on Windows will only work with the 32-bit version of SketchUp 2016, and the 64-bit version of OpenStudio will only work with the 64-bit version of \nSketchUp 2016\n.\n\n\n\n\nDownload and install OpenStudio\n\n\n\n\nLogin to the \nOpenStudio website\n. Create an account if you don't have one. EnergyPlus and OpenStudio now share a password.\n\n\nClick \"Downloads\" at the top of the page.\n\n\nChoose the installer that matches your operating system. The OpenStudio package contains the following tools:\n\n\nSketchUp Plug-in\n\n\nOpenStudio Application\n\n\nParametric Analysis Tool(PAT)\n\n\nResultsViewer\n\n\n\n\n\n\n\n\nOptional - Setup a Building Component Library (BCL) Account\n\nBCL content can now be accessed from within the OpenStudio SketchUp Plug-in and from the standalone OpenStudio application. To take advantage of this integration, you will need to follow the steps outlined here to request a BCL key.\n\n\n\n\nLogin to \nBuilding Component Library (BCL)\n. Create an account if you don't have one. Follow the instructions from the email sent to you upon registration and then login.\n\n\nClick on the \nMy Dashboard\n near the top right of the website.\n\n\nCopy the text after \nAPI v1.1 key\n: then paste the key into the SketchUp Plug-in, the OpenStudio application, or the Parametric Analysis Tool (PAT). \nYou only need to configure the key in one place and it will be used globally throughout the OpenStudio tools.\n Additionally, this key will be maintained when you install updates to OpenStudio.\n\n\n\n\nEnter the key through the OpenStudio SketchUp Plug-in under the menu \nPlugins-\nOpenStudio User Scripts-\nBuilding Component Library-\nSetup BCL Key\n and click \nOK\n. \nOr\n register the key through the OpenStudio Application under the menu \nComponents \n Measures-\nFind Components\n. If a key is not already registered, it will prompt you for one.\n\n\n\n\nOptional - Install Ruby\n\nIf you plan to use the OpenStudio SDK Ruby bindings via command prompt on Windows, you must install Ruby. OS X already has Ruby installed.\n\n\n\n\nDownload the \nRuby 2.0.0\n installer.  If you have the Windows (x64) version of OpenStudio (Help\nAbout\nCompiler shows Visual Studio 12 2013 Win64), you'll need the x64 Ruby installer.  If you have the Windows (x32) version of OpenStudio, you'll need the non-x64 Ruby installer.\n\n\nAdd \nC:\\Ruby200\\bin\n (or wherever you installed Ruby) to the PATH environment variable. \nDetailed instructions\n.\n\n\n\n\nCreate a text file with the following text inside:\n\n\nrequire 'C:\\Program Files (x86)\\OpenStudio 1.7.0\\Ruby\\openstudio.rb'\n\n\n\n\n\n\nSave the file as \nopenstudio.rb\n here: \nC:\\Ruby200\\lib\\ruby\\site_ruby\\openstudio.rb\n (next to the \n2.0.0\n folder).\n\n\n\n\nTest your installation by opening a command prompt and typing: \nirb\n ENTER.  Then, type \nrequire 'openstudio\n ENTER.  If you see some QSslSocket messages and =\n true, it's working.\n\n\n\n\nWorkflow Overview\n\n\nAfter installing OpenStudio you will have the SketchUp Plug-in, OpenStudio Application, Parametric Analysis Tool (PAT) and ResultsViewer. The typical OpenStudio workflow is shown in the diagram below.\n\n\n\n\nAbout: Click on the diagram above to view a larger version.\n\n\nResultsViewer is used to view simulation results. The section on Running Simulation \n Viewing Results has information on using \nResultsViewer\n.\n\n\nQuick Start Guide to OpenStudio Modeling Tools\n\n\nThe \nOpenStudio Quick Start Guide (PDF)\n provides an introduction to the interface for the Plug-in and the OpenStudio application. It also provides guidance on the basic workflow. Read the \nIntroductory Tutorial\n below to get started.\n\n\nQuick Start Guide to the Parametric Analysis Tool (PAT)\n\n\nThe \nParametric Analysis Tool Quick Start Guide (PDF)\n and the \nParametric Analysis Tool Interface Guide\n provide an introduction to the interface and workflow for creating multiple design alternatives from a seed model.\n\n\nIntroductory Tutorial\n\n\nThe tutorial below was created before the grid view was added to the Space Types and Thermal Zones tabs. Grid view allows you to view and edit more than one space type or thermal zone at a time. Go to the \nOpenStudio Application Interface Guide\n to learn more about grid view.\n\n\nSelecting a Template for Constructions in SketchUp using the OpenStudio Plug-in\n\n\nTemplates contain data for constructions, loads, and schedules for 6 vintages across all U.S. climate zones. Templates do not contain any geometry. Load templates by using the menu under \nExtentions/OpenStudio User Scripts/On-Demand Template Generators/Space Type and Construction Set Wizard\n. Then select your type of building, vintage, and climate zone from the dialog. You can also get standard space types for that template by choosing \"true\" on the dialog. Space types can define internal loads, schedule sets, and construction sets. It can take a few minutes to load.\n\n\n\n\nAbove: Load a new template using the menu.\n\n\n\n\nVintages:\n\n\n\n\nDOE Ref Pre-1980\n\n\nDOE Ref 1980-2004\n\n\nDOE Ref 2004\n\n\n90.1-2010\n\n\n189.1-2009\n\n\n90.1-2007\n\n\n\n\nClimate Zones: 1 - 8\n\n\n\n\nSketchUp Plug-in - Building Envelope\n\n\nFor additional information on the SketchUp Plug-in interface, go to the \nOpenStudio SketchUp Plug-in Interface Guide\n section.\n\n\n\n\n\nAbove: This video shows you how to create your building envelope. It uses the OpenStudio SketchUp Plug-in.\n\n\nSketchUp Plug-in - Space Types and Thermal Zones\n\n\n\n\nAbove: This video shows you how to assign space types, thermal zones, and thermostats to the spaces in your model. It uses the OpenStudio SketchUp Plug-in.\n\n\nSite, Facility, and Basic Run\n\n\n\n\nAbove: This video goes into the OpenStudio application, adds weather data, shows the outline view in the facility tab, and runs a simulation with ideal air loads.\n\n\n\n\n\nAbove: Version 1.9.0: This video demonstrates the new Spaces tab and the redesigned Facilities and Site tab.\n\n\nSpace Types, Internal Loads, and Schedules\n\n\n\n\nAbove: This video demonstrates how you can inspect, alter, and apply resource objects in OpenStudio.\n\n\nConstructions, Materials, and the Building Component Library (BCL)\n\n\n\n\nAbove: This video shows you how to obtain construction and material objects from the Building Component Library and load them into your current model.\n\n\nHVAC - Zone Equipment, Air Loops, and Plant Loops\n\n\n\n\nAbove: This video shows you how to add HVAC systems. It introduces the variable and scripts tabs and runs a simulation with the resulting model.\n\n\nService Hot Water\n\n\n\n\nAbove: This video shows you how create models using service hot water. This includes water heaters, water use connections, water use equipment, and other associated objects.", 
            "title": "Installation and Introductory Tutorial"
        }, 
        {
            "location": "/getting_started/getting_started/#installation-instructions", 
            "text": "OpenStudio is supported on Windows 7 \u2013 Windows 10, OS X 10.9 \u2013 10.10, and 64-bit Ubuntu 14.04.  OpenStudio 1.10.0 supports EnergyPlus Release 8.4.0, which is bundled with the OpenStudio installer. It is no longer necessary to download and install EnergyPlus separately. However, an installer is available at  https://github.com/NREL/EnergyPlus/releases/tag/v8.4.0.  Other builds of EnergyPlus 8.4 are not supported by OpenStudio 1.10.0.  OpenStudio 1.10.0 supports Radiance 5.0.a.5, which is bundled with the OpenStudio installer. It is no longer necessary to download and install Radiance separately. However, an installer is available at  https://github.com/NREL/Radiance/releases/tag/5.0.a.5.  Other builds of Radiance are not supported by OpenStudio 1.10.0.", 
            "title": "Installation Instructions"
        }, 
        {
            "location": "/getting_started/getting_started/#installation-steps", 
            "text": "Download and install SketchUp   The OpenStudio SketchUp Plug-in requires SketchUp 2016 (not available for Linux). The OpenStudio SketchUp Plug-in does not support older versions of SketchUp. SketchUp 2016 is available in 32 and 64-bit versions; the 32-bit version of OpenStudio on Windows will only work with the 32-bit version of SketchUp 2016, and the 64-bit version of OpenStudio will only work with the 64-bit version of  SketchUp 2016 .   Download and install OpenStudio   Login to the  OpenStudio website . Create an account if you don't have one. EnergyPlus and OpenStudio now share a password.  Click \"Downloads\" at the top of the page.  Choose the installer that matches your operating system. The OpenStudio package contains the following tools:  SketchUp Plug-in  OpenStudio Application  Parametric Analysis Tool(PAT)  ResultsViewer     Optional - Setup a Building Component Library (BCL) Account \nBCL content can now be accessed from within the OpenStudio SketchUp Plug-in and from the standalone OpenStudio application. To take advantage of this integration, you will need to follow the steps outlined here to request a BCL key.   Login to  Building Component Library (BCL) . Create an account if you don't have one. Follow the instructions from the email sent to you upon registration and then login.  Click on the  My Dashboard  near the top right of the website.  Copy the text after  API v1.1 key : then paste the key into the SketchUp Plug-in, the OpenStudio application, or the Parametric Analysis Tool (PAT).  You only need to configure the key in one place and it will be used globally throughout the OpenStudio tools.  Additionally, this key will be maintained when you install updates to OpenStudio.   Enter the key through the OpenStudio SketchUp Plug-in under the menu  Plugins- OpenStudio User Scripts- Building Component Library- Setup BCL Key  and click  OK .  Or  register the key through the OpenStudio Application under the menu  Components   Measures- Find Components . If a key is not already registered, it will prompt you for one.   Optional - Install Ruby \nIf you plan to use the OpenStudio SDK Ruby bindings via command prompt on Windows, you must install Ruby. OS X already has Ruby installed.   Download the  Ruby 2.0.0  installer.  If you have the Windows (x64) version of OpenStudio (Help About Compiler shows Visual Studio 12 2013 Win64), you'll need the x64 Ruby installer.  If you have the Windows (x32) version of OpenStudio, you'll need the non-x64 Ruby installer.  Add  C:\\Ruby200\\bin  (or wherever you installed Ruby) to the PATH environment variable.  Detailed instructions .   Create a text file with the following text inside:  require 'C:\\Program Files (x86)\\OpenStudio 1.7.0\\Ruby\\openstudio.rb'    Save the file as  openstudio.rb  here:  C:\\Ruby200\\lib\\ruby\\site_ruby\\openstudio.rb  (next to the  2.0.0  folder).   Test your installation by opening a command prompt and typing:  irb  ENTER.  Then, type  require 'openstudio  ENTER.  If you see some QSslSocket messages and =  true, it's working.", 
            "title": "Installation Steps"
        }, 
        {
            "location": "/getting_started/getting_started/#workflow-overview", 
            "text": "After installing OpenStudio you will have the SketchUp Plug-in, OpenStudio Application, Parametric Analysis Tool (PAT) and ResultsViewer. The typical OpenStudio workflow is shown in the diagram below.   About: Click on the diagram above to view a larger version.  ResultsViewer is used to view simulation results. The section on Running Simulation   Viewing Results has information on using  ResultsViewer .", 
            "title": "Workflow Overview"
        }, 
        {
            "location": "/getting_started/getting_started/#quick-start-guide-to-openstudio-modeling-tools", 
            "text": "The  OpenStudio Quick Start Guide (PDF)  provides an introduction to the interface for the Plug-in and the OpenStudio application. It also provides guidance on the basic workflow. Read the  Introductory Tutorial  below to get started.", 
            "title": "Quick Start Guide to OpenStudio Modeling Tools"
        }, 
        {
            "location": "/getting_started/getting_started/#quick-start-guide-to-the-parametric-analysis-tool-pat", 
            "text": "The  Parametric Analysis Tool Quick Start Guide (PDF)  and the  Parametric Analysis Tool Interface Guide  provide an introduction to the interface and workflow for creating multiple design alternatives from a seed model.", 
            "title": "Quick Start Guide to the Parametric Analysis Tool (PAT)"
        }, 
        {
            "location": "/getting_started/getting_started/#introductory-tutorial", 
            "text": "The tutorial below was created before the grid view was added to the Space Types and Thermal Zones tabs. Grid view allows you to view and edit more than one space type or thermal zone at a time. Go to the  OpenStudio Application Interface Guide  to learn more about grid view.", 
            "title": "Introductory Tutorial"
        }, 
        {
            "location": "/getting_started/getting_started/#selecting-a-template-for-constructions-in-sketchup-using-the-openstudio-plug-in", 
            "text": "Templates contain data for constructions, loads, and schedules for 6 vintages across all U.S. climate zones. Templates do not contain any geometry. Load templates by using the menu under  Extentions/OpenStudio User Scripts/On-Demand Template Generators/Space Type and Construction Set Wizard . Then select your type of building, vintage, and climate zone from the dialog. You can also get standard space types for that template by choosing \"true\" on the dialog. Space types can define internal loads, schedule sets, and construction sets. It can take a few minutes to load.   Above: Load a new template using the menu.   Vintages:   DOE Ref Pre-1980  DOE Ref 1980-2004  DOE Ref 2004  90.1-2010  189.1-2009  90.1-2007   Climate Zones: 1 - 8", 
            "title": "Selecting a Template for Constructions in SketchUp using the OpenStudio Plug-in"
        }, 
        {
            "location": "/getting_started/getting_started/#sketchup-plug-in-building-envelope", 
            "text": "For additional information on the SketchUp Plug-in interface, go to the  OpenStudio SketchUp Plug-in Interface Guide  section.   Above: This video shows you how to create your building envelope. It uses the OpenStudio SketchUp Plug-in.", 
            "title": "SketchUp Plug-in - Building Envelope"
        }, 
        {
            "location": "/getting_started/getting_started/#sketchup-plug-in-space-types-and-thermal-zones", 
            "text": "Above: This video shows you how to assign space types, thermal zones, and thermostats to the spaces in your model. It uses the OpenStudio SketchUp Plug-in.", 
            "title": "SketchUp Plug-in - Space Types and Thermal Zones"
        }, 
        {
            "location": "/getting_started/getting_started/#site-facility-and-basic-run", 
            "text": "Above: This video goes into the OpenStudio application, adds weather data, shows the outline view in the facility tab, and runs a simulation with ideal air loads.   Above: Version 1.9.0: This video demonstrates the new Spaces tab and the redesigned Facilities and Site tab.", 
            "title": "Site, Facility, and Basic Run"
        }, 
        {
            "location": "/getting_started/getting_started/#space-types-internal-loads-and-schedules", 
            "text": "Above: This video demonstrates how you can inspect, alter, and apply resource objects in OpenStudio.", 
            "title": "Space Types, Internal Loads, and Schedules"
        }, 
        {
            "location": "/getting_started/getting_started/#constructions-materials-and-the-building-component-library-bcl", 
            "text": "Above: This video shows you how to obtain construction and material objects from the Building Component Library and load them into your current model.", 
            "title": "Constructions, Materials, and the Building Component Library (BCL)"
        }, 
        {
            "location": "/getting_started/getting_started/#hvac-zone-equipment-air-loops-and-plant-loops", 
            "text": "Above: This video shows you how to add HVAC systems. It introduces the variable and scripts tabs and runs a simulation with the resulting model.", 
            "title": "HVAC - Zone Equipment, Air Loops, and Plant Loops"
        }, 
        {
            "location": "/getting_started/getting_started/#service-hot-water", 
            "text": "Above: This video shows you how create models using service hot water. This includes water heaters, water use connections, water use equipment, and other associated objects.", 
            "title": "Service Hot Water"
        }, 
        {
            "location": "/getting_started/quick_start_guides/", 
            "text": "Quick Start Guides\n\n\n\nThese guides provide a handy reference to the features of the applications that are installed with OpenStudio.\n\n\nQuick Start Guide to OpenStudio Modeling Tools (PDF)\n\n\nQuick Start Guide to the Parametric Analysis Tool (PDF)\n\n\nIn addition, the Reference section of the site has guides for the \nOpenStudio Application Interface\n and \nthe PAT interface.", 
            "title": "Quick Start Guides"
        }, 
        {
            "location": "/getting_started/quick_start_guides/#quick-start-guide-to-openstudio-modeling-tools-pdf", 
            "text": "", 
            "title": "Quick Start Guide to OpenStudio Modeling Tools (PDF)"
        }, 
        {
            "location": "/getting_started/quick_start_guides/#quick-start-guide-to-the-parametric-analysis-tool-pdf", 
            "text": "In addition, the Reference section of the site has guides for the  OpenStudio Application Interface  and  the PAT interface.", 
            "title": "Quick Start Guide to the Parametric Analysis Tool (PDF)"
        }, 
        {
            "location": "/getting_started/about_measures/", 
            "text": "About Measures\n\n\n\nIn building design and retrofits, the terms energy efficiency measure (EEM) and energy conservation measure (ECM) refer to a specific change that can be made to a building to reduce its energy use. As an example, if you are retrofitting an existing building and one of the ECMs suggested by the design team is \"Add insulation to the roof\", then you can run that measure to quickly alter your model.\n\n\nIn OpenStudio, a measure is a set of programmatic instructions (such as an Excel macro) that makes changes to an energy model to reflect its application. In our example, the measure might find the default construction used by roof surfaces in the model, copy this construction and add insulation material to the outside, then set the new construction with added insulation as the default construction to be used by roof surfaces. Measures can be written specifically for an individual model, or they may be more generic to work on a wide range of possible models.\n\n\n\n\nExamples:\n\n\n\n\n\nAbove: Examples of EE alterations to the model using measures.\n\n\n\n\nBenefits of Measures\n\n\nMeasures can help energy modelers by:\n\n\n\n\nReducing modeling time and cost\n\n\nFinding deeper savings\n\n\nLowering administrative and training costs\n\n\nMaintain quality and consistency\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow Do You Use Measures?\n\n\nApply Measure Now\n\n\nThe \"Apply Measure Now\" dialog, which can be found under the \"Components \n Measures\" menu in the OpenStudio application, applies a measure to your current model. It is similar to using the user scripts in the OpenStudio SketchUp Plugin, in that it alters the currently open model. Apply Measures Now is only applicable for OpenStudio measures, vs. EnergyPlus or Reporting. You need to save your model before using this tool, you have two levels of inspection available to you. First you can cancel out of the measure after inspecting the logs reported by it. If you accept the measure, then your model is updated but not yet saved. After inspecting the model if you don't like the changes that were made you can revert to the previously saved model.\n\n\n\n\nAbove: Apply Measure Now Dialog.\n\n\nOpenStudio Application Measures Tab\n\n\nThe Measures tab allows you to browse measures and add them to the workflow for your current model. Unlike the \"Apply Measure Now\" tool, this tab doesn't alter your current model. Instead it sets up one or more measures to be applied at run-time. It will affect the results of your simulation but won't alter what the current OSM looks like when you inspect it with the application. This tab support OpenStudio, EnergyPlus, and Reporting measures.\n\n\n\n\nAbove: Measures Tab in OpenStudio Application.\n\n\nParametric Analysis Tool\n\n\nIn the Parametric Analysis Tool (PAT), you first drag all the measures you will use into your project and edit them to have the desired inputs. On the second tab, you create the design alternatives using the measures you set up on the first tab.\n\n\n\n\nAbove: Measures can be added by dragging and dropping them into your project in both the OpenStudio Application and in PAT.\n\n\n\n\nAbove: Edit the measure inputs by selecting the measure and going to the right panel \"Edit\" tab.\n\n\nCommand Line\n\n\nMeasures can be run from a command line using a custom user script. The .rb file in the test directory of a measure is an example of this use case.\n\n\n\n\nWhere Do You Find Measures?\n\n\nBuilding Component Library (BCL)\n\n\nYou can find measures by going directly to the \nBCL site\n and searching or browsing for measures.\n\n\nMeasures can be downloaded directly from BCL through the OpenStudio Application and the ParametricAnalysisTool.\n\n\nLocally Shared Measures\n\n\nUnder the \"Preferences\" menu you can set a local measure path using the \"Change My Measures Directory\" menu option. This allows you to set a local or network directory for measures to show in the OpenStudio Application and Parametric Analysis Tool. This is in addition to any BCL measures you already have downloaded. They local measures will have say \"My\" in front of them vs. \"BCL\".\n\n\nCreate Your Own\n\n\nWant to write your own custom measure? Start with the \nMeasure Writing Guide\n.\n\n\nScripted Workflows\n\n\nWant to script your entire workflow?  The OpenStudio \nCommand Line Interface\n can run your measure based workflow quickly and easily.", 
            "title": "About Measures"
        }, 
        {
            "location": "/getting_started/about_measures/#benefits-of-measures", 
            "text": "Measures can help energy modelers by:   Reducing modeling time and cost  Finding deeper savings  Lowering administrative and training costs  Maintain quality and consistency", 
            "title": "Benefits of Measures"
        }, 
        {
            "location": "/getting_started/about_measures/#how-do-you-use-measures", 
            "text": "", 
            "title": "How Do You Use Measures?"
        }, 
        {
            "location": "/getting_started/about_measures/#apply-measure-now", 
            "text": "The \"Apply Measure Now\" dialog, which can be found under the \"Components   Measures\" menu in the OpenStudio application, applies a measure to your current model. It is similar to using the user scripts in the OpenStudio SketchUp Plugin, in that it alters the currently open model. Apply Measures Now is only applicable for OpenStudio measures, vs. EnergyPlus or Reporting. You need to save your model before using this tool, you have two levels of inspection available to you. First you can cancel out of the measure after inspecting the logs reported by it. If you accept the measure, then your model is updated but not yet saved. After inspecting the model if you don't like the changes that were made you can revert to the previously saved model.   Above: Apply Measure Now Dialog.", 
            "title": "Apply Measure Now"
        }, 
        {
            "location": "/getting_started/about_measures/#openstudio-application-measures-tab", 
            "text": "The Measures tab allows you to browse measures and add them to the workflow for your current model. Unlike the \"Apply Measure Now\" tool, this tab doesn't alter your current model. Instead it sets up one or more measures to be applied at run-time. It will affect the results of your simulation but won't alter what the current OSM looks like when you inspect it with the application. This tab support OpenStudio, EnergyPlus, and Reporting measures.   Above: Measures Tab in OpenStudio Application.", 
            "title": "OpenStudio Application Measures Tab"
        }, 
        {
            "location": "/getting_started/about_measures/#parametric-analysis-tool", 
            "text": "In the Parametric Analysis Tool (PAT), you first drag all the measures you will use into your project and edit them to have the desired inputs. On the second tab, you create the design alternatives using the measures you set up on the first tab.   Above: Measures can be added by dragging and dropping them into your project in both the OpenStudio Application and in PAT.   Above: Edit the measure inputs by selecting the measure and going to the right panel \"Edit\" tab.", 
            "title": "Parametric Analysis Tool"
        }, 
        {
            "location": "/getting_started/about_measures/#command-line", 
            "text": "Measures can be run from a command line using a custom user script. The .rb file in the test directory of a measure is an example of this use case.", 
            "title": "Command Line"
        }, 
        {
            "location": "/getting_started/about_measures/#where-do-you-find-measures", 
            "text": "", 
            "title": "Where Do You Find Measures?"
        }, 
        {
            "location": "/getting_started/about_measures/#building-component-library-bcl", 
            "text": "You can find measures by going directly to the  BCL site  and searching or browsing for measures.  Measures can be downloaded directly from BCL through the OpenStudio Application and the ParametricAnalysisTool.", 
            "title": "Building Component Library (BCL)"
        }, 
        {
            "location": "/getting_started/about_measures/#locally-shared-measures", 
            "text": "Under the \"Preferences\" menu you can set a local measure path using the \"Change My Measures Directory\" menu option. This allows you to set a local or network directory for measures to show in the OpenStudio Application and Parametric Analysis Tool. This is in addition to any BCL measures you already have downloaded. They local measures will have say \"My\" in front of them vs. \"BCL\".", 
            "title": "Locally Shared Measures"
        }, 
        {
            "location": "/getting_started/about_measures/#create-your-own", 
            "text": "Want to write your own custom measure? Start with the  Measure Writing Guide .", 
            "title": "Create Your Own"
        }, 
        {
            "location": "/getting_started/about_measures/#scripted-workflows", 
            "text": "Want to script your entire workflow?  The OpenStudio  Command Line Interface  can run your measure based workflow quickly and easily.", 
            "title": "Scripted Workflows"
        }, 
        {
            "location": "/tutorials/creating_your_model/", 
            "text": "Creating Your Model\n\n\n\nAfter completing the \nIntroductory Tutorial\n, you can find additional information on using OpenStudio by topic below.\n\n\nEnvelope\n\n\nThe building envelope is created using the SketchUp OpenStudio Plug-in. Refer to the \nOpenStudio SketchUp Plug-in Interface Guide\n to learn more about the interface and toolbars for the plug-in.\n\n\n\n\nChoosing a template\n\n\nTemplates contain data for constructions, loads, and schedules for 6 vintages across all U.S. climate zones. Templates do not contain any geometry. Load templates by using the menu under \nExtentions/OpenStudio User Scripts/On-Demand Template Generators/Space Type and Construction Set Wizard\n. Then select your type of building, vintage, and climate zone from the dialog. You can also get standard space types for that template by choosing \"true\" on the dialog. Space types can define internal loads, schedule sets, and construction sets.\n\n\n\n\nAbove: Load a new template using the menu.\n\n\n\n\nVintages:\n\n\n\n\nDOE Ref Pre-1980\n\n\nDOE Ref 1980-2004\n\n\nDOE Ref 2004\n\n\n90.1-2010\n\n\n189.1-2009\n\n\n90.1-2007\n\n\n\n\nClimate Zones: 1 - 8\n\n\n\n\n\n\nCreating and Customizing the Envelope\n\n\nDrawing a floor plan in SketchUp and extruding up from floor plan using the \"The Space Diagram\" tool(\n) is one way to create your envelope. The video below demonstrates this workflow.\n\n\nCreating geometry from photographs is another option. To learn more about it watch the \nphoto matching tutorial playlist on YouTube\n.\n\n\n\n\n\nAbove: This video shows you how to create your building envelope. It uses the OpenStudio SketchUp Plug-in.\n\n\nAfter defining the building envelope, you use the Surface Matching tool to set the boundary conditions. These will allow thermal connections between spaces and will inform OpenStudio about what construction to apply.\n\n\n\n\nFenestration\n\n\nThere are many ways to add windows to the building envelope.\n\n\n\n\nUse the \"Project Loose Geometry\" tool for adding window.\n\n\n\n\n\n\n\nAbove: This video shows how to create windows using the \"Project Loose Geometry\" tool.\n\n\n\n\nSet a window to wall ratio, for the whole building or for space type, by selecting all or just a space and going to \nPlugins-\nOpenStudio User Scripts-\nAdd or Alter Model Elements-\nSet Window to Wall Ratio\n and edit or use defaults. This script will remove all existing windows.\n\n\n\n\n\n\nAbove: Menu for setting the window to wall ratio using an OpenStudio script.\n\n\n\n\nAbove: Dialog for setting the window to wall ratio.\n\n\n\n\nDefining Conditions for Heat Transfer Through Surfaces\n\n\n\n\nChoose the \"Render by Boundary Condition\" (\n) setting.\n\n\nCheck your model to make sure the boundary settings are correct. \nBlue\n indicates exterior surfaces, \ngreen\n indicates interior walls, and \nbrown\n indicates floors. You can use the SketchUp \"Section Plane\" tool to view a cross section of the model and see interior surfaces.\n\n\nIf you have \ngreen\n surfaces on the outside of the model, use the Surface Matching (\n) tool to open up the dialog and hit \"Intersect the\nEntire Model.\" This will not work if you are inside a single space when you run it.\n\n\nThen select \"Match the Entire Model\" to correct the model.\n\n\n\n\n\n\nAbove: Surface Matching window shown.\n\n\n\n\n\n\n\nSite Shading\n\n\nTo create a shading group use the \"New Shading Group\" (\n). The new group looks like a transparent purple box. Double click on box to enter the group and draw the shading surface.\n\n\n\n\nAbove: Surface Matching dialog shown.\n\n\nAdd overhangs by:\n\n\n\n\nDrawing the shading surface using the SketchUp drawing tools or use a script to add.\n\n\n\n\n\n\nAbove: Shading can be drawn on using photo matching.\n\n\n\n\nUsing a script to automatically add overhangs.\n\n\n\n\n\n\n\nAbove: This video shows you how search for specific surfaces and use a script to add overhangs to those surfaces.\n\n\n\n\n\nOpenStudio Application\n\n\nTo assign schedules, add loads, add HVAC systems, and more, open your model in the OpenStudio application. Open your model directly from the SketchUp Plug-in by hitting the OpenStudio icon on the toolbar or by opening a file from the OpenStudio application.\n\n\n\n\nAbove: Select the OpenStudio icon to open the file and edit it in the OpenStudio application.\n\n\n\n\nSite\n\n\nUnder site you can add the weather file, import design days, and set the year. \n\n\nYou can set the day of the week the simulation should start or select a calendar year. Use a calendar year if you are going to calibrate the model with utility bills.\n\n\nThe tab can also be used to configure and turn daylight savings time on and off.\n\n\n\n\nAbove: Add weather file, select year, and import design days.\n\n\n\n\nSchedules\n\n\nTo create and edit schedules in the OpenStudio application go to the schedules tab. Check out the \nOpenStudio Application Interface Guide\n for an overview of the interface.\n\n\n\n\nInspecting and Adjusting Schedule Sets\n\n\nA Schedule Set is a collection of schedules for building activities or elements.\n\n\nA schedule set can be applied to an entire building, a story, a space type, or an individual space.\n\n\nThis sub-tab has two kinds of drop zones. You can drop schedule sets from My Model or Library into the bottom of the left pane, or you can drop individual schedules into the drop zones in the main body.\n\n\n\n\nAbove: Create and edit schedule sets.\n\n\n\n\nInspecting and Editing Ruleset Schedules\n\n\nThis tab is a visual editor for Ruleset Schedules. As the name implies, a schedule consists of a series of rules. Each rule or profile can be applied for a specific date range and for specific days of the week.\n\n\nIf two rules appear on the same day, the one with a higher priority is used. You can use the rule colors to visually scan the entire year in the calendar on the right of the body to see what rule is applied for a specific day.\n\n\nA new profile starts as a flat line. Double click to split the profile and then drag one segment up or down. Vertical sections can also be dragged left or right. Click Set Limits to change the vertical limits of your profile. To type precise values for a profile, mouse over the profile and enter a value with your keyboard.\n\n\nAlthough you can use Compact and other schedule types in your model, you can visualize and edit only Ruleset Schedules in the OpenStudio application.\n\n\nThe lower profile view is a navigation for when you are zoomed to 15-minute or 1-minute time steps.\n\n\n\n\nAbove: An annotated screenshot of the schedules editing interface. Click image for a large view of the image.\n\n\n\n\n\nAbove: This video demonstrates how you can inspect, alter, and apply resource objects in an older version of the  OpenStudio Application.\n\n\n\n\n\n\n\nConstructions\n\n\nIn an energy model, each surface must have a construction assigned. The construction determines the heat transfer through that surface. A construction set can be applied to an entire building, a story, a space type, or an individual space. Usually a majority of the exterior walls in a building will share the same construction. You can assign the exterior wall construction on the building level and that construction will be applied to all exterior walls. This will be the default construction, but you can still edit surfaces and subsurfaces that differ from the defaults.\n\n\nConstruction Sets\n\n\nA Construction Set object is structured very much like the Schedule Set. It can contain constructions for different surface types and boundary conditions.\n\n\nConstruction sets do not have to be complete sets. For example, you can have a construction set assigned to a story that has only an exterior wall. For the rest of the surface types, constructions will be inherited from the building object.\n\n\n\n\nAbove: This screenshot shows an example of a construction set added from the library.\n\n\n\n\n\nAbove: This video shows you how to obtain construction and material objects from the Building Component Library and load them into your current model.\n\n\n\n\nConstructions\n\n\nThe Constructions sub-tab lists construction objects that are in your model. You can drag additional constructions here from the library. Constructions download using the Online BCL window will appear in the library with a \"BCL\" flag.\n\n\nA construction consists of one or more material layers. You can add materials by dragging them from My Model or the Library to the drop zone. You can only add new materials to the bottom which represents the inside of the wall. You can delete any material by clicking the \nx\n next to the name.\n\n\n\n\nAbove: Edit and create constructions on this tab.\n\n\n\n\nMaterials\n\n\nConstructions are made of one or more layers of materials. The Materials sub-tab lets you inspect and edit those materials.\n\n\nThere are various classes of material objects. When you add a new material, first select the heading for the type of material you want to add and then click the \"+\" icon at the bottom of the left pane.\n\n\nDifferent types of material will have different data fields available.\n\n\nMaterials also have \"Measure Tags\" as optional inputs. These tags can be used by measures or they can be used for \nexporting a file for a Title 24 Compliance tool.\n \n\n\n\n\nAbove: Edit and create materials on this tab.\n\n\n\n\n\n\n\nInternal Loads\n\n\nThe Loads tab allows you to create and edit load definitions for the internal load objects you will use in your model. Types of loads are listed in the right panels. Select the type of load you want to create and hit the plus button or drag a load definition from the library onto the drop zone in the lower right.\n\n\nOnce you add a loads definition, it will be available to use from the \"My Model\" tab on the right panel. On the Space Type tab you can assign loads to a space type or directly to a space in the Facility tab, except for Water Use Equipment.\n\n\n\n\nThe types of loads that can be added in this tab follow:\n\n\n\n\nPeople\n\n\nLights\n\n\nLuminaires\n\n\nElectric Equipment\n\n\nGas Equipment\n\n\nSteam Equipment\n\n\nOther Equipment\n\n\nInternal Mass\n\n\nWater Use Equipment\n\n\n\n\nInternal mass is different from the other loads in that it does not use fuel; rather, it stores heat and then dissipates the heat over time. The inputs require a surface area\nassigned to a construction object.\n\n\nWater Use Equipment is also unique in that it takes schedules, and is not part of a space type. Water Use Equipment is applied in the HVAC Systems Tab.\n\n\n\n\n\nAbove: This video demonstrates how you can inspect, alter, and apply resource objects in the OpenStudio Application.\n\n\n\n\n\n\n\nSpace Types\n\n\nSpace types can define internal loads, schedule sets, and construction sets.cSpace types define specific spaces or groups of specific spaces in your model. The spaces inherit all objects of the space type. If you redefine a space type, or an underlying object, it will affect all spaces using that space type.\n\n\nThe space types tab in the OpenStudio application is organized into a grid view. You can look through all your space types and edit the settings.\n\n\n\n\n\n\n\nAbove: The grid view provides a spreadsheet style layout.\n\n\nEditing Multiple Items\n\n\nYou are now able to check rows and then select an item you want to apply to those rows. When you hit the \"Apply to Selected\" the yellow selected item will be copied to the checked rows.\n\n\n\n\nAbove: You can apply settings from one space to other using the \"Apply to Selected\" button at the top of the columns.\n\n\nGeneral\n\n\nRendering Color\n\n\nThis feature can be adjusted in the SketchUp Plug-in as well and the color selected will be used in the other application as well.\n\n\n\n\nDefault Construction and Schedule\n\n\nYou can assign constructions and schedules to each space type that will be used whenever that space type is used in the model.\n\n\nDesign Specification Outdoor Air\n\n\nThis drop zone is located under the \"General\" button.\n\n\nSpace Infiltration Design Flow Rates and Space Infiltration Effective Leakage Areas\n\n\nThese can be added and edited under the \"General\" button by scrolling to the right. Drag-and-drop from library.\n\n\nLoads\n\n\nIf you select the \"Loads\" button in the Space Type tab, you will see a drop zone to create new loads. You can have multiple loads of the same type.\n\n\n\n\nAbove: Hit the \"Loads\" button to edit and view loads by space type. Click on the name of a component and select the \"Edit\" panel on the right to inspect, edit, or delete that item. You can edit the load definition in the example shown above.\n\n\nThe space types define loads such as lighting or electric equipment as simple area weighted power densities (e.g., W/ft2). However, you can add loads in several possible ways. For example, a space type could contain multiple types of lighting. You might define one lighting load for general lighting using a W/ft2 and then add another lighting load for decorative lighting using another watts per square foot.\n\n\nMeasure Tags\n\n\nMeasure tags are used by scripts we call measures. Measure tags identify intended use of space types and constructions for School and office AEDG measures. If you are not using measures you will not need to complete these.\n\n\n\n\n\nAbove: This video shows how to use measure tags.\n\n\nCustom\n\n\nUse the checkbox at the top of each column to select items that you want to have be part of the custom view in the grid. This allows you to compare important settings side-by-side.\n\n\nWorking with Space Types in the SketchUp Plug-in\n\n\nThe video below shows how to work with space types in the Plug-in.\n\n\n\n\n\nAbove: This video shows you how to assign space types and download space types from the Building Component Library (BCL). It uses the OpenStudio SketchUp Plug-in.\n\n\n\n\nDownloading Components and Measures from the Building Component Library (BCL)\n\n\nIn the OpenStudio Application you can download items directly from the BCL by going to the \"Components \n Measures\" menu and choosing \"Find Measures\" or \"Find Components.\" Your API key is available by registering on the \nBCL site\n and copying it from your account page.\n\n\n\n\nThe components are designed to provide data to the energy modeler and simplify the process of gathering inputs.\n\n\nMeasures are scripts that can quickly alter your model or create different reports for viewing and checking your results. Learn more about measures in the \nAbout Measures\n section. Learn how to \nwrite your own custom measures\n.\n\n\n\n\nUsing the Facility Tab\n\n\nThe Facility tab includes settings for your building, stories, shading, and exterior equipment. It used to be a tree view, but this did not allow the user to view more than one item at a time. You can view the Building object. This contains top level construction, schedule, or space type assignments, and sets the rotation for the building.\n\n\nTo view and edit the spaces in your model, use the Spaces tab below the Facility tab on the left.\n\n\n\n\n\nAbove: This video demonstrates the new Spaces tab and the redesigned Facilities and Site tab.\n\n\n\n\nAbove: A screenshot of the facilities tab with the building sub-tab selected.\n\n\n\n\nAbove: this screenshot shows the contents of the stories tab. You can add and edit story settings here.\n\n\n\n\nSpaces\n\n\nThe new spaces view lets you edit the spaces and view the surfaces and sub-surfaces in those spaces. The Story, Thermal Zone, and Space Type filters can help you find a particular space to edit.\n\n\nSome items are not editable in the OpenStudio application and have to be edited in the SketchUp Plug-in. Use the horizontal tabs to inspect and edit space attributes. \n\n\n\n\nProperties\n\n\nLoads\n\n\nSurfaces\n\n\nSubsurfaces\n\n\nInterior Partitions\n\n\nShading\n\n\n\n\nEach horizontal tab may have sub-buttons that hold additional settings.\n\n\n\n\nAbove: The sub-buttons under the Properties tab are General, Airflow, and Custom.\n\n\n\n\nAbove: The spaces in your model are listed with all their surfaces under the Surfaces tab.\n\n\n\n\nAbove: The subsurfaces are organized under the space they belong to and the surface they are connected to is displayed as well.\n\n\n\n\nThermal Zones\n\n\nOpenStudio's thermal zones parallels the EnergyPlus zone. A thermal zone represents an isothermal volume of air that may have only one thermostat. The OpenStudio thermal zone forms the connection point between the air conditioned space and the  HVAC equipment. Thermal zones can contain one or more spaces. An OpenStudio space contains 3 dimensional geometry and thermal loads. When OpenStudio performs an EnergyPlus simulation, the space objects associated with each thermal zone are geometrically combined, the space loads are averaged, and the ventilation rates from each space are added together.\n\n\nSetting up thermal zones in the SketchUp Plug-in is shown below.\n\n\n\n\n\nAbove: This video shows you how to assign space types and download space types from the Building Component Library (BCL). It uses the OpenStudio SketchUp Plug-in.\n\n\nA thermostat must be defined before running an EnergyPlus simulations with connected HVAC systems. Zone equipment, thermostat, and humidistat settings can be viewed and edited on this tab. Click on the name of and item and you can inspect it in the \"Edit\" panel on the right.\n\n\n\n\nAbove: Screenshot of the OpenStudio application thermal view with \"HVAC\" selected.\n\n\nSelect the \"Cooling Sizing Parameters\" or \"Heating Sizing Parameters\" to edit those by thermal zone.\n\n\n\n\nAbove: Screenshot of the OpenStudio application thermal view with \"Heating Sizing Parameters\" selected.\n\n\n\n\nAir, Plant and Zone HVAC Systems\n\n\nThe HVAC Systems tab is used to create, inspect, and edit air and plant loops. The green \n+\n at the top left is used to add template or empty loops, and the \nx\n next to it will delete them. The pull-down at the top right of the body is to select which loop to displayed.\n\n\nHit the green plus button to add a loop.\n\n\n\n\nAbove: Add an HVAC system to your model.\n\n\nWhen adding a template loop, there are four images within the icon. From left to right they represent the type of cooling, heating, fan, and terminal unit, in the template. The example below has cold and hot water, a variable speed fan, and a hot water reheat terminal unit.\n\n\n\n\nThe top half of the loop is for supply-side objects, the bottom half is for demand. Thermal Zones and other objects can be dragged onto drop zones or nodes. Optionally you can select the splitter or mixer to bring up a list of Thermal Zones, checking the ones you want included in the loop.\n\n\nOpenStudio names HVAC systems and components to match EnergyPlus. So if you are familiar with EnergyPlus you will be able to recognize components names, like FanConstantVolumeModel.\n\n\n\n\nAbove: Annotated view of the HVAC interface.\n\n\n\n\nAbove: Another way to add thermal zones, besides dragging them from the \"My Model, is to select the splitter or mixer and check the boxes on the right panel.\n\n\n\n\nAbove: Select a component and edit it on the \"Edit\" tab on the right panel. Some components like the one above will have icons under the \"Edit\" panel. The gear icons will let you edit the component's settings.\n\n\n\n\nAbove: Select a component and adjust the connections, by hitting the link icon on the \"Edit\" tab on the right panel.\n\n\n\n\nAbove: Select a component and adjust the controller, by hitting the dial icon on the \"Edit\" tab on the right panel.\n\n\nThe \ncontrol view\n is only available for the air loops. With an air loop selected in \"Layout\" view you can switched to \"Control\" view. In this view you can edit the time of operation, night cycle, supply air temperature, and mechanical ventilation.\n\n\n\n\nAbove: Control view only available for air loops.\n\n\n\n\nCold Water Loop\n\n\nIn the cold water loop the cooling coil that had been a supply side object on the air loop is now a demand object.\n\n\nThe supply side has a pump and a water cooled chiller. The adiabatic pipes are a necessary part of the loop. There are no attributes to set for the pipes.\n\n\nYou can click on the chiller to drill down further to the condenser loop. Or you can click on the cooling coil to go back to the air loop.\n\n\n\n\nAbove: Click image to view a larger version.\n\n\n\n\nCondenser Loop\n\n\nIn the condenser loop the chiller that had been a supply side object on the cold water loop is now a demand object.\n\n\nThe supply side has a pump and a cooling tower. As with the cold water loop the adiabatic pipes are a necessary part of the loop.\n\n\nYou can click on the chiller to drill to go back to the cold water loop.\n\n\n\n\nAbove: Click image to view a larger version.\n\n\nHot Water Loop\n\n\nIn the hot water loop the heating coil that had been a supply side object on the air loop is now a demand object.\n\n\nThe supply side has a pump and a boiler. The boiler can use a variety of fuels. The adiabatic pipes are a necessary part of the loop. There are no attributes to set for the pipes.\n\n\nYou can click on the heating coil to go back to the air loop.\n\n\nThe heating coils without links represent the reheat terminals for each connected thermal zone.\n\n\n\n\nAbove: Click image to view a larger version.\n\n\n\n\nReturn and Supply Plenums\n\n\nTo add supply and return plenum zones:\n\n\n\n\nAccess the plenum editor by selecting the zone on the layout view.\n\n\nSelect the \"Edit\" tab on the right panel and click on the  plenum icon on the blue bar.\n\n\nChoose a plenum from the drop down list or create a new plenum zone but selecting the green add button. The zones available to be plenums will be selectable in a dialog. Create new zones for plenums in the Thermal Zones tab on the left.\n\n\n\n\nShared plenums will be colored the same and will match the color selected for the plenum zone on the Thermal Zones tab.\n\n\n\n\nAbove: Click image to view a larger version.\n\n\n\n\n\nAbove: This video demonstrates how to create the geometry for and then hook up supply and return air plenums.\n\n\n\n\n\n\n\nService Water Heating\n\n\nThe first view into the HVAC tab will be the water mains editor, which shows as \"Service Water\" on loops dropdown list.\n\n\nWater enters the system at the right and leave at the Sewer on the left. One or more water use connections can be added in the middle.\n\n\n\n\nAbove: Service hot water interface. Click the image to view larger version.\n\n\nClicking a water use connection will take you to a model window where you can add water use equipment.\n\n\n\n\nAbove: Service hot water interface. Click the image to view larger version.\n\n\nDragging a water use equipment object into the water use connection will create an instance of that definition. Much like lights, people and other loads, there is a fractional schedule to define usage patterns.\n\n\nOptionally you can associate the equipment with a space. There is no direct energy use to the space, but heat from the equipment will be added to the space.\n\n\nThe equipment can be anything that uses water, hot or cold. The definition contains a peak flow rate and a target temperature schedule. Hot and cold water will mix to reach the target temperature at the fixture.\n\n\nClick the water main, sewer, or makeup water to go back to the water mains editor. If you have a plant loop associated with the water use connection the \"Loop\" button will take you to the loop.\n\n\n\n\n\nAbove: This video shows you how create models using service hot water. This includes water heaters, water use connections, water use equipment, and other associated objects.\n\n\n\n\nRefrigeration\n\n\nThe refrigeration system interface can be accessed by selecting refrigeration from the drop down menu.\n\n\nTo add a refrigeration system select one from the library and add drag it to the drop zone.\n\n\nClick on the zoom button by the name of the refrigeration system to go to a view of that system, add components from the library.\n\n\n\n\nAbove: Add refrigeration systems to your model under the HVAC tab. Click image to view a larger version.\n\n\nThis zoomed in view provides the layout view of one refrigeration rack. You may add cases by dragging them on to the \"Drag and Drop Cases\" drop zone.\n\n\nDrop zones are provided to accommodate systems with a mechanical sub-cooler and a Suction Line Heat Exchanger (SLHX).\n\n\nThe small arrow at the bottom of the refrigeration case summary will open and expanded view of cases. Each case can be selected and edited in the Edit panel on the right.\n\n\nCascade systems can be added by dragging the from \"My Model\" or the \"Library.\"\n\n\n\n\nAbove: Single refrigeration system view. Click image to view a larger version.\n\n\nAn alternate view of the refrigeration systems is provided by the grid view. The refrigeration grid view provides a method for entering case settings in a spreadsheet style. Cases can be added, assigned to racks, and edited in this view.\n\n\nThere are two major divisions, one for Display Cases and another for Walk-ins. Under each division a drop box is available to add new cases. There are also buttons to move through the case settings and enter the data on each case.\n\n\nCreate your own custom view of this information by checking the box on the right of the column header. Checked columns will show up under the Custom button.\n\n\n\n\nAbove: Click image to view a larger version.\n\n\n\n\n\nAbove: This video demonstrates the new refrigeration features added to OpenStudio 1.2.0. These feature will be expanded in future releases.\n\n\n\n\n\nAbove: The video above provides an introduction to the grid view provide for refrigeration.\n\n\nIn the initial release of the grid view, no provision was made to delete a case or walk in; they must be must be assigned to a rack, and deleted from the layout view. This functionality omission will be corrected in the next OpenStudio release.\n\n\n\n\nVRF Systems\n\n\nVariable refrigerant flow (VRF) systems can be added by dragging them onto the large drop zone from the library.\n\n\nThe layout view provides a view of all the VRF systems in the model. The zoom icon by the name of the system will open a detailed view of that system.\n\n\n\n\nAbove: VRF system layout view. Click image to view a larger version.\n\n\nTo create your VRF system, start by dropping a terminal from the \"Library\" onto the drop zone. Then add thermal zones from \"My Model.\" When a thermal zone is added a new VRF terminal will automatically be created.\n\n\n\n\nAbove: VRF system single system layout view. Click image to view a larger version.\n\n\nSet the terminal settings by selecting the terminal and editing in the \"Edit\" tab on the right.\n\n\nMore than one terminal can connect with the same zone. Just drag the zone to the drop area again to add another connection.\n\n\n\n\n\nAbove: This video provides a brief overview of the VRF interface.\n\n\n\n\nApply Measure Now\n\n\nNow in addition to manually creating and editing your model, you can apply measures to your model live in the application. This allows you to customize your experience to your desired workflow. Measures can manipulate any part of the model and can also be used as a diagnostic tool.\n\n\n\n\nAbove: Select the \"Apply Measure Now\" from the menu.\n\n\n\n\nAbove: Select measure.\n\n\n\n\nAbove: Accept or cancel.\n\n\nThe video below demonstrates the use of this feature.\n\n\n\n\n\nAbove: Use the Apply Measure Now function.\n\n\n\n\nUsing the Measures Tab\n\n\nThe measures selected on this tab will not run until you run your model, unlike the \"Apply Measure Now\" option.\n\n\nDownload additional measures from \nThe Building Component Library (BCL)\n. Drag measures from the library to the central panel.\n\n\nThere are three types of measures:\n\n\n\n\nOpenStudio Measures\n are run on the OSM model before it is converted to an IDF.\n\n\nEnergyPlus Measures\n can be run on the IDF file before it is handed to EnergyPlus.\n\n\nReporting Measures\n produce reports to chart results, provide quality assurance, and quality control on models.\n\n\n\n\n\n\nAbove: Select measures from the library and drag them into the correct drop zone.\n\n\nBy selecting the measure and selecting the right \"Edit\" tab, inputs for the measure can be entered and adjusted.\n\n\n\n\nAbove: Select a measure and edit the fields in the right panel.\n\n\n\n\nLifecycle Costs\n\n\nThe most basic parameters needed for a life cycle cost analysis are the analysis period length and the discount rate. A longer analysis period accumulates more energy cost savings than a shorter period; giving energy conservation measures a better pay back relative to their initial costs. A higher discount rate devalues future energy cost savings relative to money spent on capital improvements in the present; giving energy conservation measures a lower pay back relative to their initial costs. This tab allows users to set these parameters on their baseline model.\n\n\nWith measures, downloaded from BCL,  life cycle costs for different design alternatives can be calculated\n\n\n\n\nAbove: Add costs to measures to calculate and compare different options. This can also be done in the Parametric Analysis Tool.\n\n\n\n\nCalibration with Utility Bills\n\n\nAdd utility bills for calibration on the Utility Bills Tab under Site.\n\n\nFirst, you must \nselect a weather file\n and \na year\n before you can enter the bills.\n\n\n\n\nSelect the type of utility on the left.\n\n\nHit the plus button to add bills.\n\n\nName the Bill and complete the units fields.\n\n\nSelect the billing period inputs and hit the plus sign to add a bill.\n\n\n\n\nTo calibrate to the ASHRAE 14-2002 or FEMP standard the file must contain all utility data for one year and real weather data. Check the guidelines for additional requirements.\n\n\n\n\nAbove: A screenshot of the Site Utility Bills sub-tab.", 
            "title": "Creating Your Model"
        }, 
        {
            "location": "/tutorials/creating_your_model/#envelope", 
            "text": "The building envelope is created using the SketchUp OpenStudio Plug-in. Refer to the  OpenStudio SketchUp Plug-in Interface Guide  to learn more about the interface and toolbars for the plug-in.", 
            "title": "Envelope"
        }, 
        {
            "location": "/tutorials/creating_your_model/#choosing-a-template", 
            "text": "Templates contain data for constructions, loads, and schedules for 6 vintages across all U.S. climate zones. Templates do not contain any geometry. Load templates by using the menu under  Extentions/OpenStudio User Scripts/On-Demand Template Generators/Space Type and Construction Set Wizard . Then select your type of building, vintage, and climate zone from the dialog. You can also get standard space types for that template by choosing \"true\" on the dialog. Space types can define internal loads, schedule sets, and construction sets.   Above: Load a new template using the menu.   Vintages:   DOE Ref Pre-1980  DOE Ref 1980-2004  DOE Ref 2004  90.1-2010  189.1-2009  90.1-2007   Climate Zones: 1 - 8", 
            "title": "Choosing a template"
        }, 
        {
            "location": "/tutorials/creating_your_model/#creating-and-customizing-the-envelope", 
            "text": "Drawing a floor plan in SketchUp and extruding up from floor plan using the \"The Space Diagram\" tool( ) is one way to create your envelope. The video below demonstrates this workflow.  Creating geometry from photographs is another option. To learn more about it watch the  photo matching tutorial playlist on YouTube .   Above: This video shows you how to create your building envelope. It uses the OpenStudio SketchUp Plug-in.  After defining the building envelope, you use the Surface Matching tool to set the boundary conditions. These will allow thermal connections between spaces and will inform OpenStudio about what construction to apply.", 
            "title": "Creating and Customizing the Envelope"
        }, 
        {
            "location": "/tutorials/creating_your_model/#fenestration", 
            "text": "There are many ways to add windows to the building envelope.   Use the \"Project Loose Geometry\" tool for adding window.    Above: This video shows how to create windows using the \"Project Loose Geometry\" tool.   Set a window to wall ratio, for the whole building or for space type, by selecting all or just a space and going to  Plugins- OpenStudio User Scripts- Add or Alter Model Elements- Set Window to Wall Ratio  and edit or use defaults. This script will remove all existing windows.    Above: Menu for setting the window to wall ratio using an OpenStudio script.   Above: Dialog for setting the window to wall ratio.", 
            "title": "Fenestration"
        }, 
        {
            "location": "/tutorials/creating_your_model/#defining-conditions-for-heat-transfer-through-surfaces", 
            "text": "Choose the \"Render by Boundary Condition\" ( ) setting.  Check your model to make sure the boundary settings are correct.  Blue  indicates exterior surfaces,  green  indicates interior walls, and  brown  indicates floors. You can use the SketchUp \"Section Plane\" tool to view a cross section of the model and see interior surfaces.  If you have  green  surfaces on the outside of the model, use the Surface Matching ( ) tool to open up the dialog and hit \"Intersect the\nEntire Model.\" This will not work if you are inside a single space when you run it.  Then select \"Match the Entire Model\" to correct the model.    Above: Surface Matching window shown.", 
            "title": "Defining Conditions for Heat Transfer Through Surfaces"
        }, 
        {
            "location": "/tutorials/creating_your_model/#site-shading", 
            "text": "To create a shading group use the \"New Shading Group\" ( ). The new group looks like a transparent purple box. Double click on box to enter the group and draw the shading surface.   Above: Surface Matching dialog shown.  Add overhangs by:   Drawing the shading surface using the SketchUp drawing tools or use a script to add.    Above: Shading can be drawn on using photo matching.   Using a script to automatically add overhangs.    Above: This video shows you how search for specific surfaces and use a script to add overhangs to those surfaces.", 
            "title": "Site Shading"
        }, 
        {
            "location": "/tutorials/creating_your_model/#openstudio-application", 
            "text": "To assign schedules, add loads, add HVAC systems, and more, open your model in the OpenStudio application. Open your model directly from the SketchUp Plug-in by hitting the OpenStudio icon on the toolbar or by opening a file from the OpenStudio application.   Above: Select the OpenStudio icon to open the file and edit it in the OpenStudio application.", 
            "title": "OpenStudio Application"
        }, 
        {
            "location": "/tutorials/creating_your_model/#site", 
            "text": "Under site you can add the weather file, import design days, and set the year.   You can set the day of the week the simulation should start or select a calendar year. Use a calendar year if you are going to calibrate the model with utility bills.  The tab can also be used to configure and turn daylight savings time on and off.   Above: Add weather file, select year, and import design days.", 
            "title": "Site"
        }, 
        {
            "location": "/tutorials/creating_your_model/#schedules", 
            "text": "To create and edit schedules in the OpenStudio application go to the schedules tab. Check out the  OpenStudio Application Interface Guide  for an overview of the interface.", 
            "title": "Schedules"
        }, 
        {
            "location": "/tutorials/creating_your_model/#inspecting-and-adjusting-schedule-sets", 
            "text": "A Schedule Set is a collection of schedules for building activities or elements.  A schedule set can be applied to an entire building, a story, a space type, or an individual space.  This sub-tab has two kinds of drop zones. You can drop schedule sets from My Model or Library into the bottom of the left pane, or you can drop individual schedules into the drop zones in the main body.   Above: Create and edit schedule sets.", 
            "title": "Inspecting and Adjusting Schedule Sets"
        }, 
        {
            "location": "/tutorials/creating_your_model/#inspecting-and-editing-ruleset-schedules", 
            "text": "This tab is a visual editor for Ruleset Schedules. As the name implies, a schedule consists of a series of rules. Each rule or profile can be applied for a specific date range and for specific days of the week.  If two rules appear on the same day, the one with a higher priority is used. You can use the rule colors to visually scan the entire year in the calendar on the right of the body to see what rule is applied for a specific day.  A new profile starts as a flat line. Double click to split the profile and then drag one segment up or down. Vertical sections can also be dragged left or right. Click Set Limits to change the vertical limits of your profile. To type precise values for a profile, mouse over the profile and enter a value with your keyboard.  Although you can use Compact and other schedule types in your model, you can visualize and edit only Ruleset Schedules in the OpenStudio application.  The lower profile view is a navigation for when you are zoomed to 15-minute or 1-minute time steps.   Above: An annotated screenshot of the schedules editing interface. Click image for a large view of the image.   Above: This video demonstrates how you can inspect, alter, and apply resource objects in an older version of the  OpenStudio Application.", 
            "title": "Inspecting and Editing Ruleset Schedules"
        }, 
        {
            "location": "/tutorials/creating_your_model/#constructions", 
            "text": "In an energy model, each surface must have a construction assigned. The construction determines the heat transfer through that surface. A construction set can be applied to an entire building, a story, a space type, or an individual space. Usually a majority of the exterior walls in a building will share the same construction. You can assign the exterior wall construction on the building level and that construction will be applied to all exterior walls. This will be the default construction, but you can still edit surfaces and subsurfaces that differ from the defaults.", 
            "title": "Constructions"
        }, 
        {
            "location": "/tutorials/creating_your_model/#construction-sets", 
            "text": "A Construction Set object is structured very much like the Schedule Set. It can contain constructions for different surface types and boundary conditions.  Construction sets do not have to be complete sets. For example, you can have a construction set assigned to a story that has only an exterior wall. For the rest of the surface types, constructions will be inherited from the building object.   Above: This screenshot shows an example of a construction set added from the library.   Above: This video shows you how to obtain construction and material objects from the Building Component Library and load them into your current model.", 
            "title": "Construction Sets"
        }, 
        {
            "location": "/tutorials/creating_your_model/#constructions_1", 
            "text": "The Constructions sub-tab lists construction objects that are in your model. You can drag additional constructions here from the library. Constructions download using the Online BCL window will appear in the library with a \"BCL\" flag.  A construction consists of one or more material layers. You can add materials by dragging them from My Model or the Library to the drop zone. You can only add new materials to the bottom which represents the inside of the wall. You can delete any material by clicking the  x  next to the name.   Above: Edit and create constructions on this tab.", 
            "title": "Constructions"
        }, 
        {
            "location": "/tutorials/creating_your_model/#materials", 
            "text": "Constructions are made of one or more layers of materials. The Materials sub-tab lets you inspect and edit those materials.  There are various classes of material objects. When you add a new material, first select the heading for the type of material you want to add and then click the \"+\" icon at the bottom of the left pane.  Different types of material will have different data fields available.  Materials also have \"Measure Tags\" as optional inputs. These tags can be used by measures or they can be used for  exporting a file for a Title 24 Compliance tool.     Above: Edit and create materials on this tab.", 
            "title": "Materials"
        }, 
        {
            "location": "/tutorials/creating_your_model/#internal-loads", 
            "text": "The Loads tab allows you to create and edit load definitions for the internal load objects you will use in your model. Types of loads are listed in the right panels. Select the type of load you want to create and hit the plus button or drag a load definition from the library onto the drop zone in the lower right.  Once you add a loads definition, it will be available to use from the \"My Model\" tab on the right panel. On the Space Type tab you can assign loads to a space type or directly to a space in the Facility tab, except for Water Use Equipment.   The types of loads that can be added in this tab follow:   People  Lights  Luminaires  Electric Equipment  Gas Equipment  Steam Equipment  Other Equipment  Internal Mass  Water Use Equipment   Internal mass is different from the other loads in that it does not use fuel; rather, it stores heat and then dissipates the heat over time. The inputs require a surface area\nassigned to a construction object.  Water Use Equipment is also unique in that it takes schedules, and is not part of a space type. Water Use Equipment is applied in the HVAC Systems Tab.   Above: This video demonstrates how you can inspect, alter, and apply resource objects in the OpenStudio Application.", 
            "title": "Internal Loads"
        }, 
        {
            "location": "/tutorials/creating_your_model/#space-types", 
            "text": "Space types can define internal loads, schedule sets, and construction sets.cSpace types define specific spaces or groups of specific spaces in your model. The spaces inherit all objects of the space type. If you redefine a space type, or an underlying object, it will affect all spaces using that space type.  The space types tab in the OpenStudio application is organized into a grid view. You can look through all your space types and edit the settings.    Above: The grid view provides a spreadsheet style layout.", 
            "title": "Space Types"
        }, 
        {
            "location": "/tutorials/creating_your_model/#editing-multiple-items", 
            "text": "You are now able to check rows and then select an item you want to apply to those rows. When you hit the \"Apply to Selected\" the yellow selected item will be copied to the checked rows.   Above: You can apply settings from one space to other using the \"Apply to Selected\" button at the top of the columns.", 
            "title": "Editing Multiple Items"
        }, 
        {
            "location": "/tutorials/creating_your_model/#general", 
            "text": "", 
            "title": "General"
        }, 
        {
            "location": "/tutorials/creating_your_model/#rendering-color", 
            "text": "This feature can be adjusted in the SketchUp Plug-in as well and the color selected will be used in the other application as well.", 
            "title": "Rendering Color"
        }, 
        {
            "location": "/tutorials/creating_your_model/#default-construction-and-schedule", 
            "text": "You can assign constructions and schedules to each space type that will be used whenever that space type is used in the model.", 
            "title": "Default Construction and Schedule"
        }, 
        {
            "location": "/tutorials/creating_your_model/#design-specification-outdoor-air", 
            "text": "This drop zone is located under the \"General\" button.", 
            "title": "Design Specification Outdoor Air"
        }, 
        {
            "location": "/tutorials/creating_your_model/#space-infiltration-design-flow-rates-and-space-infiltration-effective-leakage-areas", 
            "text": "These can be added and edited under the \"General\" button by scrolling to the right. Drag-and-drop from library.", 
            "title": "Space Infiltration Design Flow Rates and Space Infiltration Effective Leakage Areas"
        }, 
        {
            "location": "/tutorials/creating_your_model/#loads", 
            "text": "If you select the \"Loads\" button in the Space Type tab, you will see a drop zone to create new loads. You can have multiple loads of the same type.   Above: Hit the \"Loads\" button to edit and view loads by space type. Click on the name of a component and select the \"Edit\" panel on the right to inspect, edit, or delete that item. You can edit the load definition in the example shown above.  The space types define loads such as lighting or electric equipment as simple area weighted power densities (e.g., W/ft2). However, you can add loads in several possible ways. For example, a space type could contain multiple types of lighting. You might define one lighting load for general lighting using a W/ft2 and then add another lighting load for decorative lighting using another watts per square foot.", 
            "title": "Loads"
        }, 
        {
            "location": "/tutorials/creating_your_model/#measure-tags", 
            "text": "Measure tags are used by scripts we call measures. Measure tags identify intended use of space types and constructions for School and office AEDG measures. If you are not using measures you will not need to complete these.   Above: This video shows how to use measure tags.", 
            "title": "Measure Tags"
        }, 
        {
            "location": "/tutorials/creating_your_model/#custom", 
            "text": "Use the checkbox at the top of each column to select items that you want to have be part of the custom view in the grid. This allows you to compare important settings side-by-side.", 
            "title": "Custom"
        }, 
        {
            "location": "/tutorials/creating_your_model/#working-with-space-types-in-the-sketchup-plug-in", 
            "text": "The video below shows how to work with space types in the Plug-in.   Above: This video shows you how to assign space types and download space types from the Building Component Library (BCL). It uses the OpenStudio SketchUp Plug-in.", 
            "title": "Working with Space Types in the SketchUp Plug-in"
        }, 
        {
            "location": "/tutorials/creating_your_model/#downloading-components-and-measures-from-the-building-component-library-bcl", 
            "text": "In the OpenStudio Application you can download items directly from the BCL by going to the \"Components   Measures\" menu and choosing \"Find Measures\" or \"Find Components.\" Your API key is available by registering on the  BCL site  and copying it from your account page.   The components are designed to provide data to the energy modeler and simplify the process of gathering inputs.  Measures are scripts that can quickly alter your model or create different reports for viewing and checking your results. Learn more about measures in the  About Measures  section. Learn how to  write your own custom measures .", 
            "title": "Downloading Components and Measures from the Building Component Library (BCL)"
        }, 
        {
            "location": "/tutorials/creating_your_model/#using-the-facility-tab", 
            "text": "The Facility tab includes settings for your building, stories, shading, and exterior equipment. It used to be a tree view, but this did not allow the user to view more than one item at a time. You can view the Building object. This contains top level construction, schedule, or space type assignments, and sets the rotation for the building.  To view and edit the spaces in your model, use the Spaces tab below the Facility tab on the left.   Above: This video demonstrates the new Spaces tab and the redesigned Facilities and Site tab.   Above: A screenshot of the facilities tab with the building sub-tab selected.   Above: this screenshot shows the contents of the stories tab. You can add and edit story settings here.", 
            "title": "Using the Facility Tab"
        }, 
        {
            "location": "/tutorials/creating_your_model/#spaces", 
            "text": "The new spaces view lets you edit the spaces and view the surfaces and sub-surfaces in those spaces. The Story, Thermal Zone, and Space Type filters can help you find a particular space to edit.  Some items are not editable in the OpenStudio application and have to be edited in the SketchUp Plug-in. Use the horizontal tabs to inspect and edit space attributes.    Properties  Loads  Surfaces  Subsurfaces  Interior Partitions  Shading   Each horizontal tab may have sub-buttons that hold additional settings.   Above: The sub-buttons under the Properties tab are General, Airflow, and Custom.   Above: The spaces in your model are listed with all their surfaces under the Surfaces tab.   Above: The subsurfaces are organized under the space they belong to and the surface they are connected to is displayed as well.", 
            "title": "Spaces"
        }, 
        {
            "location": "/tutorials/creating_your_model/#thermal-zones", 
            "text": "OpenStudio's thermal zones parallels the EnergyPlus zone. A thermal zone represents an isothermal volume of air that may have only one thermostat. The OpenStudio thermal zone forms the connection point between the air conditioned space and the  HVAC equipment. Thermal zones can contain one or more spaces. An OpenStudio space contains 3 dimensional geometry and thermal loads. When OpenStudio performs an EnergyPlus simulation, the space objects associated with each thermal zone are geometrically combined, the space loads are averaged, and the ventilation rates from each space are added together.  Setting up thermal zones in the SketchUp Plug-in is shown below.   Above: This video shows you how to assign space types and download space types from the Building Component Library (BCL). It uses the OpenStudio SketchUp Plug-in.  A thermostat must be defined before running an EnergyPlus simulations with connected HVAC systems. Zone equipment, thermostat, and humidistat settings can be viewed and edited on this tab. Click on the name of and item and you can inspect it in the \"Edit\" panel on the right.   Above: Screenshot of the OpenStudio application thermal view with \"HVAC\" selected.  Select the \"Cooling Sizing Parameters\" or \"Heating Sizing Parameters\" to edit those by thermal zone.   Above: Screenshot of the OpenStudio application thermal view with \"Heating Sizing Parameters\" selected.", 
            "title": "Thermal Zones"
        }, 
        {
            "location": "/tutorials/creating_your_model/#air-plant-and-zone-hvac-systems", 
            "text": "The HVAC Systems tab is used to create, inspect, and edit air and plant loops. The green  +  at the top left is used to add template or empty loops, and the  x  next to it will delete them. The pull-down at the top right of the body is to select which loop to displayed.  Hit the green plus button to add a loop.   Above: Add an HVAC system to your model.  When adding a template loop, there are four images within the icon. From left to right they represent the type of cooling, heating, fan, and terminal unit, in the template. The example below has cold and hot water, a variable speed fan, and a hot water reheat terminal unit.   The top half of the loop is for supply-side objects, the bottom half is for demand. Thermal Zones and other objects can be dragged onto drop zones or nodes. Optionally you can select the splitter or mixer to bring up a list of Thermal Zones, checking the ones you want included in the loop.  OpenStudio names HVAC systems and components to match EnergyPlus. So if you are familiar with EnergyPlus you will be able to recognize components names, like FanConstantVolumeModel.   Above: Annotated view of the HVAC interface.   Above: Another way to add thermal zones, besides dragging them from the \"My Model, is to select the splitter or mixer and check the boxes on the right panel.   Above: Select a component and edit it on the \"Edit\" tab on the right panel. Some components like the one above will have icons under the \"Edit\" panel. The gear icons will let you edit the component's settings.   Above: Select a component and adjust the connections, by hitting the link icon on the \"Edit\" tab on the right panel.   Above: Select a component and adjust the controller, by hitting the dial icon on the \"Edit\" tab on the right panel.  The  control view  is only available for the air loops. With an air loop selected in \"Layout\" view you can switched to \"Control\" view. In this view you can edit the time of operation, night cycle, supply air temperature, and mechanical ventilation.   Above: Control view only available for air loops.", 
            "title": "Air, Plant and Zone HVAC Systems"
        }, 
        {
            "location": "/tutorials/creating_your_model/#cold-water-loop", 
            "text": "In the cold water loop the cooling coil that had been a supply side object on the air loop is now a demand object.  The supply side has a pump and a water cooled chiller. The adiabatic pipes are a necessary part of the loop. There are no attributes to set for the pipes.  You can click on the chiller to drill down further to the condenser loop. Or you can click on the cooling coil to go back to the air loop.   Above: Click image to view a larger version.", 
            "title": "Cold Water Loop"
        }, 
        {
            "location": "/tutorials/creating_your_model/#condenser-loop", 
            "text": "In the condenser loop the chiller that had been a supply side object on the cold water loop is now a demand object.  The supply side has a pump and a cooling tower. As with the cold water loop the adiabatic pipes are a necessary part of the loop.  You can click on the chiller to drill to go back to the cold water loop.   Above: Click image to view a larger version.", 
            "title": "Condenser Loop"
        }, 
        {
            "location": "/tutorials/creating_your_model/#hot-water-loop", 
            "text": "In the hot water loop the heating coil that had been a supply side object on the air loop is now a demand object.  The supply side has a pump and a boiler. The boiler can use a variety of fuels. The adiabatic pipes are a necessary part of the loop. There are no attributes to set for the pipes.  You can click on the heating coil to go back to the air loop.  The heating coils without links represent the reheat terminals for each connected thermal zone.   Above: Click image to view a larger version.", 
            "title": "Hot Water Loop"
        }, 
        {
            "location": "/tutorials/creating_your_model/#return-and-supply-plenums", 
            "text": "To add supply and return plenum zones:   Access the plenum editor by selecting the zone on the layout view.  Select the \"Edit\" tab on the right panel and click on the  plenum icon on the blue bar.  Choose a plenum from the drop down list or create a new plenum zone but selecting the green add button. The zones available to be plenums will be selectable in a dialog. Create new zones for plenums in the Thermal Zones tab on the left.   Shared plenums will be colored the same and will match the color selected for the plenum zone on the Thermal Zones tab.   Above: Click image to view a larger version.   Above: This video demonstrates how to create the geometry for and then hook up supply and return air plenums.", 
            "title": "Return and Supply Plenums"
        }, 
        {
            "location": "/tutorials/creating_your_model/#service-water-heating", 
            "text": "The first view into the HVAC tab will be the water mains editor, which shows as \"Service Water\" on loops dropdown list.  Water enters the system at the right and leave at the Sewer on the left. One or more water use connections can be added in the middle.   Above: Service hot water interface. Click the image to view larger version.  Clicking a water use connection will take you to a model window where you can add water use equipment.   Above: Service hot water interface. Click the image to view larger version.  Dragging a water use equipment object into the water use connection will create an instance of that definition. Much like lights, people and other loads, there is a fractional schedule to define usage patterns.  Optionally you can associate the equipment with a space. There is no direct energy use to the space, but heat from the equipment will be added to the space.  The equipment can be anything that uses water, hot or cold. The definition contains a peak flow rate and a target temperature schedule. Hot and cold water will mix to reach the target temperature at the fixture.  Click the water main, sewer, or makeup water to go back to the water mains editor. If you have a plant loop associated with the water use connection the \"Loop\" button will take you to the loop.   Above: This video shows you how create models using service hot water. This includes water heaters, water use connections, water use equipment, and other associated objects.", 
            "title": "Service Water Heating"
        }, 
        {
            "location": "/tutorials/creating_your_model/#refrigeration", 
            "text": "The refrigeration system interface can be accessed by selecting refrigeration from the drop down menu.  To add a refrigeration system select one from the library and add drag it to the drop zone.  Click on the zoom button by the name of the refrigeration system to go to a view of that system, add components from the library.   Above: Add refrigeration systems to your model under the HVAC tab. Click image to view a larger version.  This zoomed in view provides the layout view of one refrigeration rack. You may add cases by dragging them on to the \"Drag and Drop Cases\" drop zone.  Drop zones are provided to accommodate systems with a mechanical sub-cooler and a Suction Line Heat Exchanger (SLHX).  The small arrow at the bottom of the refrigeration case summary will open and expanded view of cases. Each case can be selected and edited in the Edit panel on the right.  Cascade systems can be added by dragging the from \"My Model\" or the \"Library.\"   Above: Single refrigeration system view. Click image to view a larger version.  An alternate view of the refrigeration systems is provided by the grid view. The refrigeration grid view provides a method for entering case settings in a spreadsheet style. Cases can be added, assigned to racks, and edited in this view.  There are two major divisions, one for Display Cases and another for Walk-ins. Under each division a drop box is available to add new cases. There are also buttons to move through the case settings and enter the data on each case.  Create your own custom view of this information by checking the box on the right of the column header. Checked columns will show up under the Custom button.   Above: Click image to view a larger version.   Above: This video demonstrates the new refrigeration features added to OpenStudio 1.2.0. These feature will be expanded in future releases.   Above: The video above provides an introduction to the grid view provide for refrigeration.  In the initial release of the grid view, no provision was made to delete a case or walk in; they must be must be assigned to a rack, and deleted from the layout view. This functionality omission will be corrected in the next OpenStudio release.", 
            "title": "Refrigeration"
        }, 
        {
            "location": "/tutorials/creating_your_model/#vrf-systems", 
            "text": "Variable refrigerant flow (VRF) systems can be added by dragging them onto the large drop zone from the library.  The layout view provides a view of all the VRF systems in the model. The zoom icon by the name of the system will open a detailed view of that system.   Above: VRF system layout view. Click image to view a larger version.  To create your VRF system, start by dropping a terminal from the \"Library\" onto the drop zone. Then add thermal zones from \"My Model.\" When a thermal zone is added a new VRF terminal will automatically be created.   Above: VRF system single system layout view. Click image to view a larger version.  Set the terminal settings by selecting the terminal and editing in the \"Edit\" tab on the right.  More than one terminal can connect with the same zone. Just drag the zone to the drop area again to add another connection.   Above: This video provides a brief overview of the VRF interface.", 
            "title": "VRF Systems"
        }, 
        {
            "location": "/tutorials/creating_your_model/#apply-measure-now", 
            "text": "Now in addition to manually creating and editing your model, you can apply measures to your model live in the application. This allows you to customize your experience to your desired workflow. Measures can manipulate any part of the model and can also be used as a diagnostic tool.   Above: Select the \"Apply Measure Now\" from the menu.   Above: Select measure.   Above: Accept or cancel.  The video below demonstrates the use of this feature.   Above: Use the Apply Measure Now function.", 
            "title": "Apply Measure Now"
        }, 
        {
            "location": "/tutorials/creating_your_model/#using-the-measures-tab", 
            "text": "The measures selected on this tab will not run until you run your model, unlike the \"Apply Measure Now\" option.  Download additional measures from  The Building Component Library (BCL) . Drag measures from the library to the central panel.  There are three types of measures:   OpenStudio Measures  are run on the OSM model before it is converted to an IDF.  EnergyPlus Measures  can be run on the IDF file before it is handed to EnergyPlus.  Reporting Measures  produce reports to chart results, provide quality assurance, and quality control on models.    Above: Select measures from the library and drag them into the correct drop zone.  By selecting the measure and selecting the right \"Edit\" tab, inputs for the measure can be entered and adjusted.   Above: Select a measure and edit the fields in the right panel.", 
            "title": "Using the Measures Tab"
        }, 
        {
            "location": "/tutorials/creating_your_model/#lifecycle-costs", 
            "text": "The most basic parameters needed for a life cycle cost analysis are the analysis period length and the discount rate. A longer analysis period accumulates more energy cost savings than a shorter period; giving energy conservation measures a better pay back relative to their initial costs. A higher discount rate devalues future energy cost savings relative to money spent on capital improvements in the present; giving energy conservation measures a lower pay back relative to their initial costs. This tab allows users to set these parameters on their baseline model.  With measures, downloaded from BCL,  life cycle costs for different design alternatives can be calculated   Above: Add costs to measures to calculate and compare different options. This can also be done in the Parametric Analysis Tool.", 
            "title": "Lifecycle Costs"
        }, 
        {
            "location": "/tutorials/creating_your_model/#calibration-with-utility-bills", 
            "text": "Add utility bills for calibration on the Utility Bills Tab under Site.  First, you must  select a weather file  and  a year  before you can enter the bills.   Select the type of utility on the left.  Hit the plus button to add bills.  Name the Bill and complete the units fields.  Select the billing period inputs and hit the plus sign to add a bill.   To calibrate to the ASHRAE 14-2002 or FEMP standard the file must contain all utility data for one year and real weather data. Check the guidelines for additional requirements.   Above: A screenshot of the Site Utility Bills sub-tab.", 
            "title": "Calibration with Utility Bills"
        }, 
        {
            "location": "/tutorials/running_your_simulation/", 
            "text": "Running Simulations \n&\n Viewing Results\n\n\n\nThese guides provide a handy reference to the features of the applications that are installed with OpenStudio.\n\n\nWeather File and Design Days\n\n\nAdd weather files in the OpenStudio application under the Site tab (first vertical tab) on the left and the \"Weather File \n Design Days\" sub-tab across the top. You can \ndownload weather files\n on the EnergyPlus site.\n\n\n\n\nAbove: Screenshot of browsing for design day file.\n\n\nRequesting Output Variables\n\n\nTo select an output variable turn the toggle button to show a blue on. Then set the detail level you want from the drop down menu.\n\n\n\n\nAbove: Screenshot of selecting output variables.\n\n\nYou can also choose variables to collect data on by using the \"Add Output Variable\" measure under the reporting measure category.\n\n\n\n\nAbove: Screenshot of the variable measure being added to a project. Just type in the variable you want to collect in the edit panel.\n\n\nRunning a Simulation\n\n\nTo run your simulation hit the green run button. Select the daylighting engine you want to use, EnergyPlus or Radiance. To use Radiance your file must be set up correctly. You will get a warning dialog if your file is not able to use Radiance.\n\n\n\n\nAbove: Hit the run button to start running your simulation. The output area displays the status of the run.\n\n\n\n\nAbove: Right click on items to open directories and files.\n\n\nLooking at Results\n\n\nStandard OpenStudio results are provided with your run. If you add in utility bills you can also view a calibration report. The links on the left side of the report will take you through the sections.\n\n\n\n\n\nAbove: This video demonstrates the 1.9.0 Release with the Reporting Measure.\n\n\nLearn more about the OpenStudio Standard Results Measure in our References Section.\n\n\nYou can also use measures to add additional reports. You can also write your own measures to create custom reports. Add reporting measures on the OpenStudio Measures or Scripts tab.\n\n\n\n\nAbove: This screenshot shows and example of the standard OpenStudio results.\n\n\n\n\nAbove: This is another chart available in the standard OpenStudio results.\n\n\n\n\nAbove: The calibration report compares utility bills with the model.\n\n\nUsing ResultsViewer\n\n\nResultsViewer displays EnergyPlus output in formats that are more useful than those available directly from the EnergyPlus engine. This application was originally developed to support the needs of researchers at the National Renewable Energy Laboratory, who frequently use detailed EnergyPlus outputs to understand the intricacies of building systems.\n\n\nResultsViewer displays time series results, which are produced from EnergyPlus report variable requests. ResultsViewer reads the SQLite database output of the EnergyPlus engine and presents the time series data in line and two-dimensional flood plots. It also displays the html output of EnergyPlus in an internal browser window. ResultsViewer is still an immature product; it will be refined further and results viewing capabilities will be added.\n\n\nQuick Start\n\n\n\n\n\n\nRequest SQLite database output from EnergyPlus (EnergyPlus version 5.0.0 or newer must be used). Include one of the following lines in the IDF file:\n\n\nOutput:SQLite, Simple;  or  Output:SQLite, SimpleAndTabular;\n\n\n\n\n\n\nChoose either Simple or SimpleAndTabular. (ResultsViewer does not use tabular data.) Once the database output is requested, all report variable and meter requests will be output to the database. These can be viewed in ResultsViewer.\n\n\n\n\nClick \nFile-\nOpen\n and browse to an eplusout.sql file in the EnergyPlus output folder. ResultsViewer is packaged with an example file that can be used to explore the software's capabilities; running EnergyPlus is not necessary.\n\n\nExamine output variables on either of two main views, table view or tree view, on the left.\n\n\nTo plot an item, right click for a context menu or double click for a line plot.\n\n\nDrag items from each view onto a plot. In a line plot, the data will be added as an additional curve. In a flood plot, the data will be replaced with the dragged item.\n\n\n\n\nOpening an EnergyPlus Output File\n\n\n\n\n\n\nRun ResultsViewer on Windows by clicking on \nStart-\nPrograms-\nOpenStudio-\nResultsViewer\n and on the Mac by going to \nApplications/OpenStudio/ResultsViewer\n.\n\n\n\n\n\n\n\n\nClick \nFile-\nOpen\n and browse to your project folder\n\n\n\n\n\n\nSelect the \"eplusout.sql\" file and click \"Open\"\n\n\n\n\n\n\n\n\nResultsViewer provides two views, \"Table View\" and \"Tree View\", on the left hand side for navigating through the output file. A report summary for the output file is provided on the right side \"eplustbl.htm\"\n\n\n\n\nGenerate a Line Plot\n\n\nTo generate a line plot from the table view, simply double-click on a row. In the tree view, open the categories and click on the name of the item you want to plot.\n\n\nFor example, double-clicking the first row in the table view generates the Electricity:Facility line plot.\n\n\nThe tree view is used to view the EnergyPlus results in a hierarchical format. The hierarchy is based on the environmental period, the timestep, the variable name and the key name (when available). The tree view supports multiple selections using the \"Ctrl\" or \"Command\" and \"Shift\" keys with the mouse. The context menu provides the same functionality as the table view.\n\n\n\n\nUsing the Plot Toolbar\n\n\n\n\n\n\nThe \"Select mode\" tool (\n) is used to select the legend and move it. Sometimes the legend is behind plot lines and with this tool you can place the legend in a better place.\n\n\nThe \"Pan mode\" tool (\n) is used to drag the plot within the plot window. To pan a plot, click the pan mode tool and then click and drag the plot to the desired location. Clicking the \"Zoom Out\" tool (\n) repeatedly resets the plot to the original position.\n\n\n\n\nThe \"Value Info mode\" tool (\n) is used to show a value on a line in the plot. To display the value of a point on a curve, click on the value info mode tool and then locate the cursor near the point of interest and then click the mouse. The information in the box can be copied to other applications by selecting the desired text and \nctrl+c\n or right mouse click in the box.\n\n\n\n\n\n\n\n\nThe \"Rubber-band zoom mode\" tool (\n) is used to zoom in on the plot. To zoom in on a particular area of interest, click on the zoom mode tool and then click within the plot near the place of interest and hold the mouse button down and drag the green rectangle to enclose the desired area and then release the mouse button.\n\n\n\n\n\n\n\n\n\n\nThe \"Zoom In\" tool (\n) and the \"Zoom Out\" tool (\n) are used to zoom in or out of the plot view.\n\n\n\n\n\n\nThe \"Save Image\" tool (\n) is used to save the plot to disk as an image file. Currently supported formats are JPEG, PNG and BMP. Currently supported resolutions are the current image size, 800x600, 400x300. To save a plot to an image file, click the save image tool and then select the desired resolution and then select the desired file locations and format.\n\n\n\n\n\n\n\n\nThe \"Print\" tool (\n) is used to print the plot. Selecting the print tool brings up a print dialog which is used to select the desired system printer.\n\n\n\n\n\n\nThe \"Properties\" tool (\n) is used to change characteristics of the plot. Selecting the properties tool brings up a dialog which is used to change plot title, axes titles, legend display, curve styles and to remove curves from the plot.\n\n\n\n\n\n\n\n\nUsing the Plot Center and Span Controls\n\n\nThe plot window contains \"Center\" and \"Span\" controls near the bottom of the window. These controls are used to move along the horizontal axis of the plot. The \"Center\" control specifies the horizontal center that is displayed in the plot window. The \"Span\" control specifies the interval on each side of the \"Center\" that is displayed in the plot window. The values displayed are in fractional simulation days.\n\n\nFor example, to display simulation days 3 through 5 in the example line plot:\n\n\n\n\nSet the \"Center\" to simulation day 4 using either the slider or spin box arrows or entering 4 into the spin box.\n\n\nSet the \"Span\" to one simulation day using either the slider or spin box arrows or entering 1 into the spin box.\n\n\n\n\nThe data is displayed from simulation day 3 through simulation day 5:\n\n\n\n\nThe data can now be viewed two simulation days at a time by sliding the \"Center\" slider with the mouse:\n\n\n\n\nGenerate Multiple Lines on a Single Plot\n\n\nTo generate a line plot with multiple curves, use the mouse with the \"Shift\" and \"Ctrl\" keys to select the desired rows in the table view. Holding the \"Ctrl\" key down on Windows and \"Command\" on the Mac and clicking a selected row will deselect the item. Select the \"Line Plot\" from the context menu. In the tree view, find the names of the items you want to plot on the tree and select then holding down the \"Command\" or \"Ctrl\" key.\n\n\n\n\nAbove: Screenshot showing selected multiple lines in table view.\n\n\n\n\nAbove: Screenshot showing selected multiple lines in tree view.\n\n\nGenerate a Difference Plot\n\n\nDifference plots are obtained by selecting two rows in the table view. The context menu is then used to plot the difference of the two selections.\n\n\nSelect the two items you want to plot and then right click one of the rows to view a context menu. Choose from the list to get the desired difference line plot.\n\n\n\n\n\n\nUsing the Table View to Generate a Flood Plot\n\n\nFlood plots are used to present data as a color map or contour map. The bottom axis displays days and the left axis displays hours within the day. Flood plots are most interesting for Hourly, Zone Timestep and HVAC System Timestep data.\n\n\nFor example, a flood plot of the hourly Electricity:Facility data is generated as follows:\n\n\nRight mouse click on the Electricity:Facility row in the table view, and select \"Flood Plot\" from the context menu.\n\n\n\n\nTo create a flood plot from the tree view, select the item you want to plot and hit the \"Flood Plot\" button on the toolbar.\n\n\n\n\nFiltering the Views\n\n\nFiltering is limiting the items that appear in the views by specifying criteria that the displayed fields must match. Filtering applies to both the table view and the tree view. Any data that matches the value entered in the \"Filter Criteria\" is displayed. If data in any column matches the \"Filter Criteria\", then the row is displayed in the table view. If data in any node along a branch matches the \"Filter Criteria\", then the entire branch is displayed in the tree view. The \"Filter Criteria\" is evaluated as a regular expression. Currently, no phrases and no boolean operators (AND, OR, etc.) are supported.\n\n\n\n\nRegular expressions are supported in the \"Filter Criteria\". For example, to display all data that has a field beginning with \"N\":\n\n\n\n\nEnter \"^N.*\" in the \"Filter Criteria\" box above the tree view.\n\n\nClick the \"Apply\" button.\n\n\n\n\nUsing the Tree View to Generate an Illuminance Map\n\n\nIlluminance maps are used to show daylight intensity in a given region.\n\n\nTo generate an illuminance map using the tree view:\n\n\n\n\nOpen a SQLite file that contains daylighting analysis\n\n\nSwitch to the tree view tab and scroll down to the \"Illuminance Map\" section under the \"Hourly\" time step and right mouse click\n\n\nClick on the \"Illuminance Map\" menu item on the context menu to generate a plot like the one below.\n\n\n\n\nNote that double clicking on the \"PERIMETER_ZN_1\" under the \"Illuminance Map\" node is the same as clicking on the \"Illuminance Map\" menu item in the context menu.\n\n\nIf time series and illuminance map items are selected, no plotting occurs and the following warning message is shown:\n\n\n\n\nUsing the Table View to Generate an Illuminance Map Difference Plot\n\n\nIlluminance maps differences can be used to look at intensity differences between zones.\n\n\nTo generate an illuminance map difference using the table view:\n\n\n\n\nEnter \"Illuminance Map\" in the \"Filter Criteria\" section and click the \"Apply\" button to get the list of Illuminance Maps for the file.\n\n\nHold down the Ctrl and click on the items in table and then right mouse click on one of the selections for the following context menu.\n\n\nThen select your desired difference plot.", 
            "title": "Running Simulations & Viewing Results"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#weather-file-and-design-days", 
            "text": "Add weather files in the OpenStudio application under the Site tab (first vertical tab) on the left and the \"Weather File   Design Days\" sub-tab across the top. You can  download weather files  on the EnergyPlus site.   Above: Screenshot of browsing for design day file.", 
            "title": "Weather File and Design Days"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#requesting-output-variables", 
            "text": "To select an output variable turn the toggle button to show a blue on. Then set the detail level you want from the drop down menu.   Above: Screenshot of selecting output variables.  You can also choose variables to collect data on by using the \"Add Output Variable\" measure under the reporting measure category.   Above: Screenshot of the variable measure being added to a project. Just type in the variable you want to collect in the edit panel.", 
            "title": "Requesting Output Variables"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#running-a-simulation", 
            "text": "To run your simulation hit the green run button. Select the daylighting engine you want to use, EnergyPlus or Radiance. To use Radiance your file must be set up correctly. You will get a warning dialog if your file is not able to use Radiance.   Above: Hit the run button to start running your simulation. The output area displays the status of the run.   Above: Right click on items to open directories and files.", 
            "title": "Running a Simulation"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#looking-at-results", 
            "text": "Standard OpenStudio results are provided with your run. If you add in utility bills you can also view a calibration report. The links on the left side of the report will take you through the sections.   Above: This video demonstrates the 1.9.0 Release with the Reporting Measure.  Learn more about the OpenStudio Standard Results Measure in our References Section.  You can also use measures to add additional reports. You can also write your own measures to create custom reports. Add reporting measures on the OpenStudio Measures or Scripts tab.   Above: This screenshot shows and example of the standard OpenStudio results.   Above: This is another chart available in the standard OpenStudio results.   Above: The calibration report compares utility bills with the model.", 
            "title": "Looking at Results"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#using-resultsviewer", 
            "text": "ResultsViewer displays EnergyPlus output in formats that are more useful than those available directly from the EnergyPlus engine. This application was originally developed to support the needs of researchers at the National Renewable Energy Laboratory, who frequently use detailed EnergyPlus outputs to understand the intricacies of building systems.  ResultsViewer displays time series results, which are produced from EnergyPlus report variable requests. ResultsViewer reads the SQLite database output of the EnergyPlus engine and presents the time series data in line and two-dimensional flood plots. It also displays the html output of EnergyPlus in an internal browser window. ResultsViewer is still an immature product; it will be refined further and results viewing capabilities will be added.", 
            "title": "Using ResultsViewer"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#quick-start", 
            "text": "Request SQLite database output from EnergyPlus (EnergyPlus version 5.0.0 or newer must be used). Include one of the following lines in the IDF file:  Output:SQLite, Simple;  or  Output:SQLite, SimpleAndTabular;    Choose either Simple or SimpleAndTabular. (ResultsViewer does not use tabular data.) Once the database output is requested, all report variable and meter requests will be output to the database. These can be viewed in ResultsViewer.   Click  File- Open  and browse to an eplusout.sql file in the EnergyPlus output folder. ResultsViewer is packaged with an example file that can be used to explore the software's capabilities; running EnergyPlus is not necessary.  Examine output variables on either of two main views, table view or tree view, on the left.  To plot an item, right click for a context menu or double click for a line plot.  Drag items from each view onto a plot. In a line plot, the data will be added as an additional curve. In a flood plot, the data will be replaced with the dragged item.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#opening-an-energyplus-output-file", 
            "text": "Run ResultsViewer on Windows by clicking on  Start- Programs- OpenStudio- ResultsViewer  and on the Mac by going to  Applications/OpenStudio/ResultsViewer .     Click  File- Open  and browse to your project folder    Select the \"eplusout.sql\" file and click \"Open\"     ResultsViewer provides two views, \"Table View\" and \"Tree View\", on the left hand side for navigating through the output file. A report summary for the output file is provided on the right side \"eplustbl.htm\"", 
            "title": "Opening an EnergyPlus Output File"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#generate-a-line-plot", 
            "text": "To generate a line plot from the table view, simply double-click on a row. In the tree view, open the categories and click on the name of the item you want to plot.  For example, double-clicking the first row in the table view generates the Electricity:Facility line plot.  The tree view is used to view the EnergyPlus results in a hierarchical format. The hierarchy is based on the environmental period, the timestep, the variable name and the key name (when available). The tree view supports multiple selections using the \"Ctrl\" or \"Command\" and \"Shift\" keys with the mouse. The context menu provides the same functionality as the table view.", 
            "title": "Generate a Line Plot"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#using-the-plot-toolbar", 
            "text": "The \"Select mode\" tool ( ) is used to select the legend and move it. Sometimes the legend is behind plot lines and with this tool you can place the legend in a better place.  The \"Pan mode\" tool ( ) is used to drag the plot within the plot window. To pan a plot, click the pan mode tool and then click and drag the plot to the desired location. Clicking the \"Zoom Out\" tool ( ) repeatedly resets the plot to the original position.   The \"Value Info mode\" tool ( ) is used to show a value on a line in the plot. To display the value of a point on a curve, click on the value info mode tool and then locate the cursor near the point of interest and then click the mouse. The information in the box can be copied to other applications by selecting the desired text and  ctrl+c  or right mouse click in the box.     The \"Rubber-band zoom mode\" tool ( ) is used to zoom in on the plot. To zoom in on a particular area of interest, click on the zoom mode tool and then click within the plot near the place of interest and hold the mouse button down and drag the green rectangle to enclose the desired area and then release the mouse button.      The \"Zoom In\" tool ( ) and the \"Zoom Out\" tool ( ) are used to zoom in or out of the plot view.    The \"Save Image\" tool ( ) is used to save the plot to disk as an image file. Currently supported formats are JPEG, PNG and BMP. Currently supported resolutions are the current image size, 800x600, 400x300. To save a plot to an image file, click the save image tool and then select the desired resolution and then select the desired file locations and format.     The \"Print\" tool ( ) is used to print the plot. Selecting the print tool brings up a print dialog which is used to select the desired system printer.    The \"Properties\" tool ( ) is used to change characteristics of the plot. Selecting the properties tool brings up a dialog which is used to change plot title, axes titles, legend display, curve styles and to remove curves from the plot.", 
            "title": "Using the Plot Toolbar"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#using-the-plot-center-and-span-controls", 
            "text": "The plot window contains \"Center\" and \"Span\" controls near the bottom of the window. These controls are used to move along the horizontal axis of the plot. The \"Center\" control specifies the horizontal center that is displayed in the plot window. The \"Span\" control specifies the interval on each side of the \"Center\" that is displayed in the plot window. The values displayed are in fractional simulation days.  For example, to display simulation days 3 through 5 in the example line plot:   Set the \"Center\" to simulation day 4 using either the slider or spin box arrows or entering 4 into the spin box.  Set the \"Span\" to one simulation day using either the slider or spin box arrows or entering 1 into the spin box.   The data is displayed from simulation day 3 through simulation day 5:   The data can now be viewed two simulation days at a time by sliding the \"Center\" slider with the mouse:", 
            "title": "Using the Plot Center and Span Controls"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#generate-multiple-lines-on-a-single-plot", 
            "text": "To generate a line plot with multiple curves, use the mouse with the \"Shift\" and \"Ctrl\" keys to select the desired rows in the table view. Holding the \"Ctrl\" key down on Windows and \"Command\" on the Mac and clicking a selected row will deselect the item. Select the \"Line Plot\" from the context menu. In the tree view, find the names of the items you want to plot on the tree and select then holding down the \"Command\" or \"Ctrl\" key.   Above: Screenshot showing selected multiple lines in table view.   Above: Screenshot showing selected multiple lines in tree view.", 
            "title": "Generate Multiple Lines on a Single Plot"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#generate-a-difference-plot", 
            "text": "Difference plots are obtained by selecting two rows in the table view. The context menu is then used to plot the difference of the two selections.  Select the two items you want to plot and then right click one of the rows to view a context menu. Choose from the list to get the desired difference line plot.", 
            "title": "Generate a Difference Plot"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#using-the-table-view-to-generate-a-flood-plot", 
            "text": "Flood plots are used to present data as a color map or contour map. The bottom axis displays days and the left axis displays hours within the day. Flood plots are most interesting for Hourly, Zone Timestep and HVAC System Timestep data.  For example, a flood plot of the hourly Electricity:Facility data is generated as follows:  Right mouse click on the Electricity:Facility row in the table view, and select \"Flood Plot\" from the context menu.   To create a flood plot from the tree view, select the item you want to plot and hit the \"Flood Plot\" button on the toolbar.", 
            "title": "Using the Table View to Generate a Flood Plot"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#filtering-the-views", 
            "text": "Filtering is limiting the items that appear in the views by specifying criteria that the displayed fields must match. Filtering applies to both the table view and the tree view. Any data that matches the value entered in the \"Filter Criteria\" is displayed. If data in any column matches the \"Filter Criteria\", then the row is displayed in the table view. If data in any node along a branch matches the \"Filter Criteria\", then the entire branch is displayed in the tree view. The \"Filter Criteria\" is evaluated as a regular expression. Currently, no phrases and no boolean operators (AND, OR, etc.) are supported.   Regular expressions are supported in the \"Filter Criteria\". For example, to display all data that has a field beginning with \"N\":   Enter \"^N.*\" in the \"Filter Criteria\" box above the tree view.  Click the \"Apply\" button.", 
            "title": "Filtering the Views"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#using-the-tree-view-to-generate-an-illuminance-map", 
            "text": "Illuminance maps are used to show daylight intensity in a given region.  To generate an illuminance map using the tree view:   Open a SQLite file that contains daylighting analysis  Switch to the tree view tab and scroll down to the \"Illuminance Map\" section under the \"Hourly\" time step and right mouse click  Click on the \"Illuminance Map\" menu item on the context menu to generate a plot like the one below.   Note that double clicking on the \"PERIMETER_ZN_1\" under the \"Illuminance Map\" node is the same as clicking on the \"Illuminance Map\" menu item in the context menu.  If time series and illuminance map items are selected, no plotting occurs and the following warning message is shown:", 
            "title": "Using the Tree View to Generate an Illuminance Map"
        }, 
        {
            "location": "/tutorials/running_your_simulation/#using-the-table-view-to-generate-an-illuminance-map-difference-plot", 
            "text": "Illuminance maps differences can be used to look at intensity differences between zones.  To generate an illuminance map difference using the table view:   Enter \"Illuminance Map\" in the \"Filter Criteria\" section and click the \"Apply\" button to get the list of Illuminance Maps for the file.  Hold down the Ctrl and click on the items in table and then right mouse click on one of the selections for the following context menu.  Then select your desired difference plot.", 
            "title": "Using the Table View to Generate an Illuminance Map Difference Plot"
        }, 
        {
            "location": "/tutorials/large_scale_analysis/", 
            "text": "Large Scale Analysis\n\n\n\nAlthough building energy modeling has been common for many years, large-scale analyses have more recently become achievable for more users with access to affordable and vast computing power in the cloud. Recently, the OpenStudio Parametric Analysis Tool was enhanced, allowing users to launch their own cloud resources to run a large number of simulations.\n\n\nThe Parametric Analysis Tool (PAT) now exports a spreadsheet format compatible with the OpenStudio-analysis-spreadsheet project for running large parametric analyses using cloud resources.\n\n\nGo to the \nGitHub repository\n for information and code for the analysis spreadsheet. There are instructions and examples on the GitHub site.\n\n\nThe Workflow\n\n\n\n\nBuild your baseline model with the OpenStudio Application\n\n\nManipulate the Model with measures\n\n\nRun basic parametrics via PAT\n\n\nExport a spreadsheet view from PAT\n\n\nFill in ranges, distributions, defaults, algorithms, objective functions\n\n\nLarge Analyses via OpenStudio-Server\n\n\nStart Cluster\n\n\nUpload Data:\n\n\nMeasures\n\n\nVariables\n\n\nSeed Model\n\n\nWeather Data\n\n\n\n\n\n\nSimulation Executive Runs Analysis\n\n\nBrowse Results and Download Files\n\n\nEverything has a JSON-based API to access data programmatically\n\n\nDownload results in CSV or R dataframe\n\n\n\n\n\n\n\n\n\n\nStarting OpenStudio's Cloud\n\n\ngem install bundler\ngit clone https://github.com/NREL/OpenStudio-analysis-spreadsheet.git\nbundle install\n\n\n\n\nExport Spreadsheet\n\n\nSelect the measures you want to use in the analysis and export a spreadsheet by selecting that option under the File menu.\n\n\n\nEdit the Template Spreadsheet\n\n\nAfter exporting the spreadsheet from PAT, open the spreadsheet in Excel to edit fields.\n\n\n\n\nAbove: Click to see a larger screenshot of the spreadsheet.\n\n\nRunning OpenStudio's Cloud\n\n\nrake run\n\n\n\n\n\n\nBuildings Specific Chef Cookbooks\n\n\nProvisioning ensures that the appropriate tools are ready on the server, that there are consistent images across platforms, and makes it easier to test and deploy.\n\n\nThe OpenStudio Server uses Chef to help automate the workflow. \nChef Documentation\n\n\nOpenStudio - \nhttps://github.com/NREL-cookbooks/openstudio\n\n\nEnergyPlus - \nhttps://github.com/NREL-cookbooks/energyplus\n\n\nRadiance - \nhttps://github.com/NREL-cookbooks/radiance\n\n\nR - \nhttps://github.com/NREL-cookbooks/cookbook-r\n\n\n\n\nServer Architecture\n\n\n\n\n\n\nPublications\n\n\nA GRAPHICAL TOOL FOR CLOUD-BASED BUILDING ENERGY SIMULATION (PDF)\n\n\nSCALING BUILDING ENERGY MODELING HORIZONTALLY IN THE CLOUD WITH OPENSTUDIO (PDF).", 
            "title": "Large Scale Analysis"
        }, 
        {
            "location": "/tutorials/large_scale_analysis/#the-workflow", 
            "text": "Build your baseline model with the OpenStudio Application  Manipulate the Model with measures  Run basic parametrics via PAT  Export a spreadsheet view from PAT  Fill in ranges, distributions, defaults, algorithms, objective functions  Large Analyses via OpenStudio-Server  Start Cluster  Upload Data:  Measures  Variables  Seed Model  Weather Data    Simulation Executive Runs Analysis  Browse Results and Download Files  Everything has a JSON-based API to access data programmatically  Download results in CSV or R dataframe", 
            "title": "The Workflow"
        }, 
        {
            "location": "/tutorials/large_scale_analysis/#starting-openstudios-cloud", 
            "text": "gem install bundler\ngit clone https://github.com/NREL/OpenStudio-analysis-spreadsheet.git\nbundle install", 
            "title": "Starting OpenStudio's Cloud"
        }, 
        {
            "location": "/tutorials/large_scale_analysis/#export-spreadsheet", 
            "text": "Select the measures you want to use in the analysis and export a spreadsheet by selecting that option under the File menu.", 
            "title": "Export Spreadsheet"
        }, 
        {
            "location": "/tutorials/large_scale_analysis/#edit-the-template-spreadsheet", 
            "text": "After exporting the spreadsheet from PAT, open the spreadsheet in Excel to edit fields.   Above: Click to see a larger screenshot of the spreadsheet.", 
            "title": "Edit the Template Spreadsheet"
        }, 
        {
            "location": "/tutorials/large_scale_analysis/#running-openstudios-cloud", 
            "text": "rake run", 
            "title": "Running OpenStudio's Cloud"
        }, 
        {
            "location": "/tutorials/large_scale_analysis/#buildings-specific-chef-cookbooks", 
            "text": "Provisioning ensures that the appropriate tools are ready on the server, that there are consistent images across platforms, and makes it easier to test and deploy.  The OpenStudio Server uses Chef to help automate the workflow.  Chef Documentation  OpenStudio -  https://github.com/NREL-cookbooks/openstudio  EnergyPlus -  https://github.com/NREL-cookbooks/energyplus  Radiance -  https://github.com/NREL-cookbooks/radiance  R -  https://github.com/NREL-cookbooks/cookbook-r", 
            "title": "Buildings Specific Chef Cookbooks"
        }, 
        {
            "location": "/tutorials/large_scale_analysis/#server-architecture", 
            "text": "", 
            "title": "Server Architecture"
        }, 
        {
            "location": "/tutorials/large_scale_analysis/#publications", 
            "text": "A GRAPHICAL TOOL FOR CLOUD-BASED BUILDING ENERGY SIMULATION (PDF)  SCALING BUILDING ENERGY MODELING HORIZONTALLY IN THE CLOUD WITH OPENSTUDIO (PDF).", 
            "title": "Publications"
        }, 
        {
            "location": "/tutorials/radiance_tutorial/", 
            "text": "Radiance and OpenStudio\n\n\n\nThis tutorial explains how to use \nRadiance\n to simulate the daylight ingress in your OpenStudio model, allowing for higher fidelity simulations of daylighting-related energy efficiency measures. \n\n\nFor OpenStudio \nv1.9.0\n, the Radiance simulation option has been refactored (moved) to a measure, eliminating the \"daylight simulation engine\" selection radio buttons from the app, and modifying the workflow slightly. We've also added support for more shading options, including daylight redirecting louvers. \n\n\nWorkflow\n\n\nThis workflow uses OpenStudio (the plug-in and the application) to perform a \nclimate-based daylight simulation\n, using Radiance as the lighting simulation engine (in lieu of EnergyPlus' daylight simulation options). For implementation details, and caveats, refer to the OpenStudio-Radiance Reference Guide.\n\n\nThe process for using Radiance for daylighting analysis in OpenStudio is not dissimilar from using EnergyPlus. The basic steps are as follows, with the required applications in parentheses:\n\n\n1. Create (or Import) Building Geometry, Define Thermal Zones \n Spaces (SketchUp Plug-in)\n\n\nMany of the Radiance-related elements are not directly accessible from the OpenStudio Application, so regardless of whether you are starting your geometric model from scratch or importing from another CAD tool, you must start in the SketchUp Plugin. \n\n\nUsing the SketchUp Plugin tools, create the following elements:\n\n\n\n\nBuilding Shading Objects - to represent overhangs, fins, parapets\n\n\nSite Shading Objects - to represent other buildings, trees, ground\n\n\nInterior Partition Surfaces\n - can be used to define furniture, cubicle walls, \n other relevant structures, in addition to refining the interior space geometry (e.g. adding columns, ceiling coffers, soffits)\n\n\n\n\n2. Define Materials (SketchUp Plug-in or OpenStudio Application)\n\n\nIt is recommended to review the materials of your model constructions to ensure the photometric properties, e.g., visible light transmittance, transmittance model (specular or diffuse), and visible light reflectance, are correct. \n\n\n\n\nInterior finishes\n\n\nGlazing\n\n\n\n\n3. Add Daylighting Elements (SketchUp Plugin)\n\n\nFor each space where you wish to analyze daylighting, add:\n\n\n\n\nIlluminance map (primary)\n\n\nDaylighting control point (primary)\n\n\nDefine shading controls\n\n\nAssign shading controls\n\n\n\n\nOptionally to these spaces, add:\n\n\n\n\nGlare sensors\n\n\nCreate \n assign OS:WindowFrameAndDivider objects, to represent wall thickness in the Radiance model (user script) \n\n\n\n\n4. Configure Daylighting Elements (SketchUp Plugin)\n\n\n\n\nAssociate Space with Thermal Zone(s)\n\n\nAssign primary Illuminance Map to daylit Thermal Zone(s)\n\n\nAssign primary Daylighting Control Point to Thermal Zone\n\n\nThermal zone load percentages to daylighting controls\n\n\n\n\n5. Run Simulation (OpenStudio Application)\n\n\n\n\nAttach a weather file (Site Tab)\n\n\nSelect Radiance simulation parameters (Simulation Settings Tab)\n\n\nAdd the \"Radiance Daylighting Measure\" to the model's workflow (Measures Tab)\n\n\nRun the analysis (Run Tab (\nduh\n))\n\n\n\n\nThe Radiance daylighting results will inform the electric lighting load schedules and will be automatically used in the EnergyPlus model\n\n\n6. Review Results (Results Viewer, Excel, et al.)\n\n\nThe results of the Radiance/EnergyPlus simulation are stored in a few locations:\n\n\n\n\nradout.sql\n - this file contains all the Radiance-computed daylighting information, as well as the exterior daylight data from the weather file, for reference. Its data can be reviewed with the Results Viewer application. \n\n\ndaylightmetrics.csv\n - this file contains data for the following metrics:\n\n\nDaylight Autonomy (DA)\n\n\nContinuous Daylight Autonomy (cDA)\n\n\nUseful Daylight Illuminance (UDI)\n\n\n\n\n\n\n[windowGroupName].ill\n - annual daylight illuminance schedules for each window group, used for the shade control simulation", 
            "title": "Radiance and OpenStudio"
        }, 
        {
            "location": "/tutorials/radiance_tutorial/#workflow", 
            "text": "This workflow uses OpenStudio (the plug-in and the application) to perform a  climate-based daylight simulation , using Radiance as the lighting simulation engine (in lieu of EnergyPlus' daylight simulation options). For implementation details, and caveats, refer to the OpenStudio-Radiance Reference Guide.  The process for using Radiance for daylighting analysis in OpenStudio is not dissimilar from using EnergyPlus. The basic steps are as follows, with the required applications in parentheses:", 
            "title": "Workflow"
        }, 
        {
            "location": "/tutorials/radiance_tutorial/#1-create-or-import-building-geometry-define-thermal-zones-spaces-sketchup-plug-in", 
            "text": "Many of the Radiance-related elements are not directly accessible from the OpenStudio Application, so regardless of whether you are starting your geometric model from scratch or importing from another CAD tool, you must start in the SketchUp Plugin.   Using the SketchUp Plugin tools, create the following elements:   Building Shading Objects - to represent overhangs, fins, parapets  Site Shading Objects - to represent other buildings, trees, ground  Interior Partition Surfaces  - can be used to define furniture, cubicle walls,   other relevant structures, in addition to refining the interior space geometry (e.g. adding columns, ceiling coffers, soffits)", 
            "title": "1. Create (or Import) Building Geometry, Define Thermal Zones &amp; Spaces (SketchUp Plug-in)"
        }, 
        {
            "location": "/tutorials/radiance_tutorial/#2-define-materials-sketchup-plug-in-or-openstudio-application", 
            "text": "It is recommended to review the materials of your model constructions to ensure the photometric properties, e.g., visible light transmittance, transmittance model (specular or diffuse), and visible light reflectance, are correct.    Interior finishes  Glazing", 
            "title": "2. Define Materials (SketchUp Plug-in or OpenStudio Application)"
        }, 
        {
            "location": "/tutorials/radiance_tutorial/#3-add-daylighting-elements-sketchup-plugin", 
            "text": "For each space where you wish to analyze daylighting, add:   Illuminance map (primary)  Daylighting control point (primary)  Define shading controls  Assign shading controls   Optionally to these spaces, add:   Glare sensors  Create   assign OS:WindowFrameAndDivider objects, to represent wall thickness in the Radiance model (user script)", 
            "title": "3. Add Daylighting Elements (SketchUp Plugin)"
        }, 
        {
            "location": "/tutorials/radiance_tutorial/#4-configure-daylighting-elements-sketchup-plugin", 
            "text": "Associate Space with Thermal Zone(s)  Assign primary Illuminance Map to daylit Thermal Zone(s)  Assign primary Daylighting Control Point to Thermal Zone  Thermal zone load percentages to daylighting controls", 
            "title": "4. Configure Daylighting Elements (SketchUp Plugin)"
        }, 
        {
            "location": "/tutorials/radiance_tutorial/#5-run-simulation-openstudio-application", 
            "text": "Attach a weather file (Site Tab)  Select Radiance simulation parameters (Simulation Settings Tab)  Add the \"Radiance Daylighting Measure\" to the model's workflow (Measures Tab)  Run the analysis (Run Tab ( duh ))   The Radiance daylighting results will inform the electric lighting load schedules and will be automatically used in the EnergyPlus model", 
            "title": "5. Run Simulation (OpenStudio Application)"
        }, 
        {
            "location": "/tutorials/radiance_tutorial/#6-review-results-results-viewer-excel-et-al", 
            "text": "The results of the Radiance/EnergyPlus simulation are stored in a few locations:   radout.sql  - this file contains all the Radiance-computed daylighting information, as well as the exterior daylight data from the weather file, for reference. Its data can be reviewed with the Results Viewer application.   daylightmetrics.csv  - this file contains data for the following metrics:  Daylight Autonomy (DA)  Continuous Daylight Autonomy (cDA)  Useful Daylight Illuminance (UDI)    [windowGroupName].ill  - annual daylight illuminance schedules for each window group, used for the shade control simulation", 
            "title": "6. Review Results (Results Viewer, Excel, et al.)"
        }, 
        {
            "location": "/tutorials/tutorial_bcl/", 
            "text": "The Building Component Library\n\n\n\nThe \nBCL\n is an online repository of components and measures that can be used in OpenStudio.  Registering on the BCL website provides you with an API key that can be used by the OpenStudio Application to access online components and measures.  BCL users who belong to a group can also upload their own content\npublic or private\nto the BCL.  Users can either create a new group or request to join an existing one. The following tutorial provides information on common BCL tasks.\n\n\nGroups\n\n\nCreating a Group\n\n\nTo create a group, first login to the site and click the \nMy Dashboard\n link at the top right of the BCL site.  Click on the \nCreate Content\n tab, and then the \nGroup\n button.  Fill out the form and click the \nSave\n button. \n\n\n\n    \n\n    \n\n    \nCreating a BCL group.\n\n  \n     \n\n\n\n\nA note on group visibility:  if you create a private group, BCL users will not be able to see the group, or request membership.  You will have to manually add all users to the group (see \nAdding a Member to a Group\n).  Additionally, creating a public group does not restrict you to having only public content; a public group can have both public and private content.\n\n\nOnce you submit the form, a BCL admin will be notified and will review your group creation request.  You will receive an email when the group is approved, at which time you can upload content.\n\n\nJoining a Group\n\n\nTo join a public group, click the \nGroups\n button on the BCL homepage.  Select the group you would like to join and click the \nSubscribe to Group\n or \nRequest Group Membership\n button.  Your membership will be pending until the group admin reviews and approves your request. \n\n\n\n    \n\n    \n\n    \nRequesting group membership.\n\n  \n     \n\n\n\n\nAdding a Member to a Group\n\n\nIf you are a group administrator, you can add members to your group by clicking the \nMy Dashboard\n link at the top right of the page, then clicking on the \nMy groups\n tab. Your group should now be listed on the page. Click on the linked group\u2019s name, which will take you to the group description page. \n\n\n\n    \n\n    \n\n    \nSelecting your group for viewing.\n\n  \n     \n\n\n\n\nClick on the \nGroup\n tab at the top of the page.\n\n\n\n    \n\n    \n\n    \nView Group by clicking on the Group tab.\n\n  \n     \n\n\n\n\nFrom this page you can add new members by clicking on the \nAdd people\n link.  \n\n\n\n    \n\n    \n\n    \nAdd Members to group.\n\n  \n     \n\n\n\n\nNew members will need to provide you with their BCL account username. \n\n\n\n    \n\n    \n\n    \nAdd Member by Username.\n\n  \n     \n\n\n\n\nApproving a Membership\n\n\nIf you are the group admin of a public group, you can approved requested memberships to your group by clicking the \nMy Dashboard\n link at the top right of the page and then clicking on the \nMy groups\n tab.  Your group should now be listed on the page.  Click on the linked group's name, which will take you to the group description page.\n\n\n\n    \n\n    \n\n    \nSelecting your group for viewing.\n\n  \n     \n\n\n\n\nClick on the \"Group\" tab at the top of the page.  You can then approve pending memberships by clicking on the \nPeople\n link.\n\n\n\n    \n\n    \n\n    \nManage group members by clicking on the People link.\n\n  \n     \n\n\n\n\nCheck the checkbox next to the pending users to approve, choose \nModify membership status\n from the \nOperations\n dropdown, and press the \nExecute\n button. \n\n\n\n    \n\n    \n\n    \nModify membership status.\n\n  \n     \n\n\n\n\nChange the membership status to \nActive\n and click \nNext\n, then \nConfirm\n.\n\n\n\n    \n\n    \n\n    \nApprove new members.\n\n  \n     \n\n\n\n\nYou can follow steps similar to these to remove a user from a group.  Check the checkbox next to the user to remove, choose \nRemove from Group\n from the \nOperations\n dropdown, and click the \nExecute\n button.  You can also change a user's group permissions by assigning group roles.  Choose \nModify OG User Role\n from the \nOperations\n dropdown, and click the *Execute button.  Group roles are described in the next section.\n\n\nGroup Roles\n\n\nThere are 4 roles that users can have relative to the group to which they belong:  group manager, administrator member, editor, and member.\n\n\n\n\n\n\nGroup Manager\n: This role is assigned to the user who created the group.  There is only one group manager per group, and this   user will receive e-mails when other users request membership to the group.\n\n\n\n\n\n\nAdministrator Member\n: Users with the administrator role can assign roles to other group users and approve group membership.  They can also edit the group description and review, publish, and delete group content.\n\n\n\n\n\n\nEditor\n: Users with the editor role can review and publish group content.\n\n\n\n\n\n\nMember\n: The member role is the default role assigned to new group members.  These users can create draft content and submit content for review.  An editor or administrator member of the group will then need to review and publish it.\n\n\n\n\n\n\nUploading and Publishing Content\n\n\nThere are 2 types of content on the BCL:  components and measures.  Components are the building blocks of an energy model, and include roofs, walls, windows, occupancy and equipment schedules, and weather information, to name a few.  Measures describe a change to an energy model for purposes such as comparison to a baseline model or estimation of potential energy savings. Users must be part of a group to upload content, and only group admins can publish content for their group.  Although the instructions below pertain to measures, a similar process can be followed for uploading and updating components.\n\n\nCreating the Measure Zip File\n\n\nNew measures are made in the OpenStudio application or Parametric Analysis tool by either creating a new measure or cloning an existing one. OpenStudio will place all necessary files in the directory set under preferences as \nMy Measures Directory\n. Go within the directory for the measure and compress the files as shown below. Confirm that the xml file is updated after your last edit of the measure.rb file by clicking the \nSync Project Measures with Library\n button or opening the \nApply Measure Now\n dialog.\n\n\n\n    \n\n    \n\n    \nCompress the files directly to create the measure package; do not compress a directory containing the files.\n\n  \n\n\n\n\n\nAdditional details on the xml and other files can be found below:\n\n\n\n\nThe measure package to upload should contain a measure.xml file created with the current \nmeasure schema\n, available on the \nBCL\n website.  The \nuid\n and \nversion_id\n fields can be left blank as they will be assigned by the BCL.\n\n\nMake sure to include the type of your measure in the \ntag\n field. Select from the available \nBCL measure types\n, and include the full hierarchy.  This is usually 2 or 3 levels separated by a dot.  For example, if you are uploading a space types measure, the \ntag\n should be: \nWhole Building.Space Types\n.  If you do not see a suitable measure type for your measure in the list, please \ncontact us\n.  Attributes can also be applied to measures via the measure.xml file.  Consult the supported list of \nBCL attributes\n to view the correct names. For more detailed information on writing OpenStudio measures, consult the \nMeasure Writing Guide\n for further details.\n\n\nThe package should also contain the associated files referenced inside the measure.xml file\u2019s \nfiles\n section. These files should be contained in directories according to usage type:  the main measure file, usually named \nmeasure.rb\n should be compressed directly (same level as measure.xml), resource files should be in a \nresources\n directory, and test files should be in a \ntests\n directory. The compressed package should directly contain these files and directories; the upload will fail if the package has an inner directory containing the files.\n\n\n\n\nUploading the Measure Zip File\n\n\nTo begin, click on the \nMy Dashboard\n link at the top right of the BCL site.  Click on the \nCreate content\n tab.  You should see a list of buttons.  Press the \nUpload Measure\n button, which will direct you to a multi-tab form.\n\n\n\n    \n\n    \n\n    \nUpload a Measure.\n\n  \n\n\n\n\n\nThe \nData\n tab contains a file upload field that will accept either a zip measure or a tar.gz measure package.  The \nGroup\n tab contains a list of the groups with which you are affiliated.  Select the appropriate group, as well as your desired content visibility for this measure (public or private to the group).   Save the form.\n\n\n\n    \n\n    \n\n    \nSelect desired group and measure visibility.\n\n  \n\n\n\n\n\nOnce the measure has been saved, follow instructions in the \nPublishing Content\n section below for instructions on making the measure visible to others.\n\n\nEditing an Existing Measure\n\n\nIf you want to update a measure that has already been uploaded to the BCL, first go to the URL for your component and click the \nUpload New Version\n button.  To properly update an existing measure, you must re-upload the entire updated zip file.\n\n\n\n    \n\n    \n\n    \nNew Version of Existing Component.\n\n  \n\n\n\n\n\nOnce the new version of the measure has been saved, follow instructions in the \nPublishing Content\n section below for instructions on making the measure visible to others.\n\n\nPublishing Content\n\n\nAll members of a group can add content to the BCL, but only users with the \neditor\n or \nadministrator member\n group roles can review and publish their group's content.  Content can be published by clicking the \nMy Dashboard\n link at the top right of the page, then clicking on the \nMy content\n tab and selecting the \ngroup content\n sub-tab. \n\n\n\n    \n\n    \n\n    \nReview group content.\n\n  \n     \n\n\n\n\nContent in either the \nDraft\n or \nNeeds Review\n states can be published by changing the moderation state to \nPublished\n.  The intended workflow is as follows:\n\n\n\n\nA content author creates a component or measure.  The content is in the \nDraft\n state.  \n\n\nOnce the author is satisfied with the content, he/she sets the state to \nNeeds Review\n.  This indicates to the group editors and administrators that content is ready to be reviewed and published.\n\n\nOnce reviewed, a group editor or administrator sets the state to *Published.\n\n\nThe process is repeated for future revisions to the content.", 
            "title": "Building Component Library"
        }, 
        {
            "location": "/tutorials/tutorial_bcl/#groups", 
            "text": "", 
            "title": "Groups"
        }, 
        {
            "location": "/tutorials/tutorial_bcl/#creating-a-group", 
            "text": "To create a group, first login to the site and click the  My Dashboard  link at the top right of the BCL site.  Click on the  Create Content  tab, and then the  Group  button.  Fill out the form and click the  Save  button.   \n     \n     \n     Creating a BCL group. \n          A note on group visibility:  if you create a private group, BCL users will not be able to see the group, or request membership.  You will have to manually add all users to the group (see  Adding a Member to a Group ).  Additionally, creating a public group does not restrict you to having only public content; a public group can have both public and private content.  Once you submit the form, a BCL admin will be notified and will review your group creation request.  You will receive an email when the group is approved, at which time you can upload content.", 
            "title": "Creating a Group"
        }, 
        {
            "location": "/tutorials/tutorial_bcl/#joining-a-group", 
            "text": "To join a public group, click the  Groups  button on the BCL homepage.  Select the group you would like to join and click the  Subscribe to Group  or  Request Group Membership  button.  Your membership will be pending until the group admin reviews and approves your request.   \n     \n     \n     Requesting group membership.", 
            "title": "Joining a Group"
        }, 
        {
            "location": "/tutorials/tutorial_bcl/#adding-a-member-to-a-group", 
            "text": "If you are a group administrator, you can add members to your group by clicking the  My Dashboard  link at the top right of the page, then clicking on the  My groups  tab. Your group should now be listed on the page. Click on the linked group\u2019s name, which will take you to the group description page.   \n     \n     \n     Selecting your group for viewing. \n          Click on the  Group  tab at the top of the page.  \n     \n     \n     View Group by clicking on the Group tab. \n          From this page you can add new members by clicking on the  Add people  link.    \n     \n     \n     Add Members to group. \n          New members will need to provide you with their BCL account username.   \n     \n     \n     Add Member by Username.", 
            "title": "Adding a Member to a Group"
        }, 
        {
            "location": "/tutorials/tutorial_bcl/#approving-a-membership", 
            "text": "If you are the group admin of a public group, you can approved requested memberships to your group by clicking the  My Dashboard  link at the top right of the page and then clicking on the  My groups  tab.  Your group should now be listed on the page.  Click on the linked group's name, which will take you to the group description page.  \n     \n     \n     Selecting your group for viewing. \n          Click on the \"Group\" tab at the top of the page.  You can then approve pending memberships by clicking on the  People  link.  \n     \n     \n     Manage group members by clicking on the People link. \n          Check the checkbox next to the pending users to approve, choose  Modify membership status  from the  Operations  dropdown, and press the  Execute  button.   \n     \n     \n     Modify membership status. \n          Change the membership status to  Active  and click  Next , then  Confirm .  \n     \n     \n     Approve new members. \n          You can follow steps similar to these to remove a user from a group.  Check the checkbox next to the user to remove, choose  Remove from Group  from the  Operations  dropdown, and click the  Execute  button.  You can also change a user's group permissions by assigning group roles.  Choose  Modify OG User Role  from the  Operations  dropdown, and click the *Execute button.  Group roles are described in the next section.", 
            "title": "Approving a Membership"
        }, 
        {
            "location": "/tutorials/tutorial_bcl/#group-roles", 
            "text": "There are 4 roles that users can have relative to the group to which they belong:  group manager, administrator member, editor, and member.    Group Manager : This role is assigned to the user who created the group.  There is only one group manager per group, and this   user will receive e-mails when other users request membership to the group.    Administrator Member : Users with the administrator role can assign roles to other group users and approve group membership.  They can also edit the group description and review, publish, and delete group content.    Editor : Users with the editor role can review and publish group content.    Member : The member role is the default role assigned to new group members.  These users can create draft content and submit content for review.  An editor or administrator member of the group will then need to review and publish it.", 
            "title": "Group Roles"
        }, 
        {
            "location": "/tutorials/tutorial_bcl/#uploading-and-publishing-content", 
            "text": "There are 2 types of content on the BCL:  components and measures.  Components are the building blocks of an energy model, and include roofs, walls, windows, occupancy and equipment schedules, and weather information, to name a few.  Measures describe a change to an energy model for purposes such as comparison to a baseline model or estimation of potential energy savings. Users must be part of a group to upload content, and only group admins can publish content for their group.  Although the instructions below pertain to measures, a similar process can be followed for uploading and updating components.", 
            "title": "Uploading and Publishing Content"
        }, 
        {
            "location": "/tutorials/tutorial_bcl/#creating-the-measure-zip-file", 
            "text": "New measures are made in the OpenStudio application or Parametric Analysis tool by either creating a new measure or cloning an existing one. OpenStudio will place all necessary files in the directory set under preferences as  My Measures Directory . Go within the directory for the measure and compress the files as shown below. Confirm that the xml file is updated after your last edit of the measure.rb file by clicking the  Sync Project Measures with Library  button or opening the  Apply Measure Now  dialog.  \n     \n     \n     Compress the files directly to create the measure package; do not compress a directory containing the files. \n     Additional details on the xml and other files can be found below:   The measure package to upload should contain a measure.xml file created with the current  measure schema , available on the  BCL  website.  The  uid  and  version_id  fields can be left blank as they will be assigned by the BCL.  Make sure to include the type of your measure in the  tag  field. Select from the available  BCL measure types , and include the full hierarchy.  This is usually 2 or 3 levels separated by a dot.  For example, if you are uploading a space types measure, the  tag  should be:  Whole Building.Space Types .  If you do not see a suitable measure type for your measure in the list, please  contact us .  Attributes can also be applied to measures via the measure.xml file.  Consult the supported list of  BCL attributes  to view the correct names. For more detailed information on writing OpenStudio measures, consult the  Measure Writing Guide  for further details.  The package should also contain the associated files referenced inside the measure.xml file\u2019s  files  section. These files should be contained in directories according to usage type:  the main measure file, usually named  measure.rb  should be compressed directly (same level as measure.xml), resource files should be in a  resources  directory, and test files should be in a  tests  directory. The compressed package should directly contain these files and directories; the upload will fail if the package has an inner directory containing the files.", 
            "title": "Creating the Measure Zip File"
        }, 
        {
            "location": "/tutorials/tutorial_bcl/#uploading-the-measure-zip-file", 
            "text": "To begin, click on the  My Dashboard  link at the top right of the BCL site.  Click on the  Create content  tab.  You should see a list of buttons.  Press the  Upload Measure  button, which will direct you to a multi-tab form.  \n     \n     \n     Upload a Measure. \n     The  Data  tab contains a file upload field that will accept either a zip measure or a tar.gz measure package.  The  Group  tab contains a list of the groups with which you are affiliated.  Select the appropriate group, as well as your desired content visibility for this measure (public or private to the group).   Save the form.  \n     \n     \n     Select desired group and measure visibility. \n     Once the measure has been saved, follow instructions in the  Publishing Content  section below for instructions on making the measure visible to others.", 
            "title": "Uploading the Measure Zip File"
        }, 
        {
            "location": "/tutorials/tutorial_bcl/#editing-an-existing-measure", 
            "text": "If you want to update a measure that has already been uploaded to the BCL, first go to the URL for your component and click the  Upload New Version  button.  To properly update an existing measure, you must re-upload the entire updated zip file.  \n     \n     \n     New Version of Existing Component. \n     Once the new version of the measure has been saved, follow instructions in the  Publishing Content  section below for instructions on making the measure visible to others.", 
            "title": "Editing an Existing Measure"
        }, 
        {
            "location": "/tutorials/tutorial_bcl/#publishing-content", 
            "text": "All members of a group can add content to the BCL, but only users with the  editor  or  administrator member  group roles can review and publish their group's content.  Content can be published by clicking the  My Dashboard  link at the top right of the page, then clicking on the  My content  tab and selecting the  group content  sub-tab.   \n     \n     \n     Review group content. \n          Content in either the  Draft  or  Needs Review  states can be published by changing the moderation state to  Published .  The intended workflow is as follows:   A content author creates a component or measure.  The content is in the  Draft  state.    Once the author is satisfied with the content, he/she sets the state to  Needs Review .  This indicates to the group editors and administrators that content is ready to be reviewed and published.  Once reviewed, a group editor or administrator sets the state to *Published.  The process is repeated for future revisions to the content.", 
            "title": "Publishing Content"
        }, 
        {
            "location": "/tutorials/utility_rate_tariffs/", 
            "text": "Adding Utility Rate Tariffs\n\n\n\nTypically, life cycle cost analyses compare current capital costs required to implement energy conservation measures with future energy cost savings over the analysis period. In order to compute future energy cost savings the model must include information about the utility rate tariffs which apply to the project. Higher energy costs will give energy conservation measures a better pay back relative to their initial costs.\n\n\nCurrently the OpenStudio Application doesn't have a built in interface to add utility rates. Utility rates are added by including an EnergyPlus measure in your workflow as an always run measure. If you are participating in a Utility Energy Design Assistance Program then your utility has likely placed a custom measure on the \nBuilding Component Library (BCL)\n with valid utility rate structures. The \"EDA Program Tariffs\" section below covers this use case. The rest of the use cases cover users who want to create their own tariffs vs. using someone else's pre-made tariffs. Most of the measures have an argument for the \"Demand Window Length\". The measures confirm that the demand window length is in sync with EnergyPlus's simulation timestep.\n\n\nCurrently the EDA measures have tariffs for electricity and natural gas. The non-EDA measures have tariffs for electricity, natural gas, water, district heating, and district cooling. if you are running an early design simulation using Ideal air loads, your heating and cooling loads will show up ad district heating and cooling. The naming of the non-EDA measures relate to how electricity tariffs are handled. All other fuels are flat tariffs. Demand charges are only included for electricity.\n\n\nEDA Program Tariffs\n\n\nThe arguments on an EDA based tariff measure are pretty simple. The two choices are choosing electric and gas tariffs from a pre-populated list. Currently the demand window length is hard coded to correctly match each rate. Refer to the utility's rate information or look in the \"resources\" directory of the measure if you want to see what goes into each tariff option.\n\n\n\n\nAbove: Screenshot of Xcel Energy EDA Tariff selection measure inputs.\n\n\nFlat Tariffs\n\n\nThe flat tariff measure is the most basic non-EDA tariff measures. It has a single argument for each fuel type to define a flat tariff. It doesn't have an electricity demand change.\n\n\n\n\nAbove: Screenshot of Flat Tariff measure inputs.\n\n\nBlock Tariffs\n\n\nThe block tariff is similar to the flat tariff, but it allows you to define multiple blocks where the rate increases as you move into another block of consumption. There is one argument that expects comma separated values for the consumption blocks. The next argument expects comma separated values for the corresponding rates for each block described in the first measure. You should have the same number of values in each of the first two arguments. The next field defines a rate when you have exceeded the last block defined in the earlier arguments. After this you have arguments for flat rates for other fuels.\n\n\n\n\nAbove: Screenshot of Block Tariff measure inputs.\n\n\nTime and Date Dependent Tariffs\n\n\nThe time and date dependent tariff has four possible rates for electricity consumption. There are on and off peak summer rates, and on and off non-summer rates. The time of day for peak and the dates for summer are user configurable. For electricity demand charge, only the season is taken into account, not the time of day. The rest of the fuels are flat rates.\n\n\n\n\nAbove: Screenshot of Time and Date Dependant Tariff measure inputs.\n\n\nCustom Tariff Solutions\n\n\nIf none of these tariff examples meet your needs we have created a generic tariff measure. You can save your own IDF snippets into the \"resources\" directory for this measure. Each file should have one UtilityCost:Tariff object, and any associated objects that refer to it such as UtilityCost:Charge:Simple or Schedule:Compact. The Measure will create a user argument for each type of meter referred to by UtilityCost:Tariff objects in the directory. You can then choose one tariff object to be imported for each meter. It has been pre-loaded with a number of examples from the \nEnergyPlus Input/Output Reference\n\n\n\n\nAbove: Screenshot of Generic Tariff measure inputs.", 
            "title": "Utiity Rate Tariffs"
        }, 
        {
            "location": "/tutorials/utility_rate_tariffs/#eda-program-tariffs", 
            "text": "The arguments on an EDA based tariff measure are pretty simple. The two choices are choosing electric and gas tariffs from a pre-populated list. Currently the demand window length is hard coded to correctly match each rate. Refer to the utility's rate information or look in the \"resources\" directory of the measure if you want to see what goes into each tariff option.   Above: Screenshot of Xcel Energy EDA Tariff selection measure inputs.", 
            "title": "EDA Program Tariffs"
        }, 
        {
            "location": "/tutorials/utility_rate_tariffs/#flat-tariffs", 
            "text": "The flat tariff measure is the most basic non-EDA tariff measures. It has a single argument for each fuel type to define a flat tariff. It doesn't have an electricity demand change.   Above: Screenshot of Flat Tariff measure inputs.", 
            "title": "Flat Tariffs"
        }, 
        {
            "location": "/tutorials/utility_rate_tariffs/#block-tariffs", 
            "text": "The block tariff is similar to the flat tariff, but it allows you to define multiple blocks where the rate increases as you move into another block of consumption. There is one argument that expects comma separated values for the consumption blocks. The next argument expects comma separated values for the corresponding rates for each block described in the first measure. You should have the same number of values in each of the first two arguments. The next field defines a rate when you have exceeded the last block defined in the earlier arguments. After this you have arguments for flat rates for other fuels.   Above: Screenshot of Block Tariff measure inputs.", 
            "title": "Block Tariffs"
        }, 
        {
            "location": "/tutorials/utility_rate_tariffs/#time-and-date-dependent-tariffs", 
            "text": "The time and date dependent tariff has four possible rates for electricity consumption. There are on and off peak summer rates, and on and off non-summer rates. The time of day for peak and the dates for summer are user configurable. For electricity demand charge, only the season is taken into account, not the time of day. The rest of the fuels are flat rates.   Above: Screenshot of Time and Date Dependant Tariff measure inputs.", 
            "title": "Time and Date Dependent Tariffs"
        }, 
        {
            "location": "/tutorials/utility_rate_tariffs/#custom-tariff-solutions", 
            "text": "If none of these tariff examples meet your needs we have created a generic tariff measure. You can save your own IDF snippets into the \"resources\" directory for this measure. Each file should have one UtilityCost:Tariff object, and any associated objects that refer to it such as UtilityCost:Charge:Simple or Schedule:Compact. The Measure will create a user argument for each type of meter referred to by UtilityCost:Tariff objects in the directory. You can then choose one tariff object to be imported for each meter. It has been pre-loaded with a number of examples from the  EnergyPlus Input/Output Reference   Above: Screenshot of Generic Tariff measure inputs.", 
            "title": "Custom Tariff Solutions"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/", 
            "text": "Life Cycle Cost Analysis\n\n\n\nPurpose\n\n\nLife cycle cost analysis is commonly performed by energy modelers in order to determine if energy cost savings due to reduced energy usage will be enough to justify the additional investment required to implement the conservation measure. Different projects are interested in different life cycle metrics (e.g. simple payback, net present value, etc.) and will have different cost assumptions. However, in all cases the modeler needs a way to specify costs associated with the energy conservation measures, enter utility rate tariffs related to energy use, and set life cycle cost parameters such as the analysis period length and discount rate. This document explains how to use the OpenStudio Parametric Analysis Tool (PAT) to perform each of these functions as part of a life cycle cost analysis.\n\n\nIn order to perform a parametric analysis using PAT, a user must first build a baseline OpenStudio model using a combination of the OpenStudio SketchUp plug-in to edit geometry and the OpenStudio application to edit other model components. Once the baseline model has been assembled and tested, users may apply energy conservation measures using the PAT application. Tutorials and documentation on this process are available at http://openstudio.nrel.gov/parametric-analysis-tool-tutorials.\n\n\nThe \"OpenStudio Life Cycle Costing Examples\" document focuses on how to add cost inputs through measures in order to extend the PAT analysis from one dealing only with energy use to one that includes life cycle cost analysis as well. The first section describes how to set life cycle cost analysis parameters. The second section describes how to input utility rate tariffs. The third section describes how to input costs related to energy conservation measures. Because energy conservation measures may have different cost assumptions for different projects (e.g. retrofit vs. new construction), several examples are given for a variety of measures showing how to input costs in different scenarios. All cost values for measure inputs are entered in constant (year 0) dollars regardless of when the costs are incurred.\n\n\nLife Cycle Cost Parameters\n\n\nThe most basic parameters needed for a life cycle cost analysis are the analysis period length and the discount rate. A longer analysis period accumulates more energy cost savings than a shorter period; giving energy conservation measures a better pay back relative to their initial costs. A higher discount rate devalues future energy cost savings relative to money spent on capital improvements in the present; giving energy conservation measures a lower pay back relative to their initial costs. Users may set the \"Analysis Length\" of their project in the PAT application using the \"\nSet Lifecycle Cost Parameters\n\" OpenStudio measure. This measure should be added to the simulation workflow as an always run measure so it is applied to all design alternatives in the analysis. If you don\u2019t set OpenStudio will create an object with the default length of 25 years.\n\n\nEnergy Conservation Measure Costs\n\n\nOnce the life cycle economic parameters and utility rate tariffs have been added to the baseline model (or as always run measures in PAT), the next stage in the analysis is determining which energy conservation measures are available to the project and associated costs for each option. Because there are so many different types of energy efficiency measures (OpenStudio allows users to write their own measures) this document will focus on three measures (written by NREL) which span a range of potential options; \"\nReplace Exterior Window Constructions with a Different Construction from the Model\n\", \"\nReduce Lighting Loads By Percentage\n\", and \"\nAdd Daylight Sensors\n\". Each of these measures takes user input for both cost and performance; this document focuses primarily on the cost parameters. A variety of project scenarios (e.g. retrofit vs. new construction) will be explored to see how the same measure can support each scenario by using different cost inputs. Examples in this document will provide a motivating narrative to give background on why cost inputs were set to the values they are. The document will then show how the cost inputs translate to annual cash flows in the life cycle analysis. No attempt has been made to ensure that the cost inputs provided in these examples are reasonable; they are for illustrative purposes only.\n\n\nCase 1 - Replace Exterior Window Constructions, New Construction\n\n\nNarrative:\n\n\nIn this example a new construction project is considering two options for window constructions; the code minimum window construction (\"Window A\") and a higher performance window construction (\"Window B\"). The energy modeler has created a baseline model which includes both constructions. All windows in the baseline model reference \"Window A\"; \"Window B\" is not referenced by any windows in the baseline model. The energy modeler has received inputs from the cost estimator that \"Window A\" type windows will cost around $8/ft^2 and the \"Window B\" type windows will cost around $10/ft^2.\n\n\nInputs:\n\n\nThe first task the energy modeler needs to accomplish is to set the life cycle cost parameters by adding \"Set Lifecycle Cost Parameters\" as an always run measure to the simulation workflow with the following inputs:\n\n\nTable 1.1: Set Lifecycle Cost Parameters\n\n\n\n\n\n\n  \nArgument\n\n  \nValue\n\n  \nNote\n\n\n\n\n\n\n\n\n\n  \nSet the length of the Study Period (years)\n\n  \n10\n\n  \nThe life cycle analysis uses a 10 year analysis period.\n\n\n\n\n\n\n\n\nNext the modeler inputs utility rate costs by adding \"Xcel EDA Tariff Selection and Model Setup\" as an always run measure to the simulation workflow with the following inputs:\n\n\nTable 1.2: Xcel EDA Tariff Selection and Model Setup\n\n\n\n\n\n\n  \nArgument\n\n  \nValue\n\n  \nNote\n\n\n\n\n\n\n\n\n\n  \nElectricity Tariff\n\n  \nCommercial\n\n  \nSelect the small commercial electric utility rate.\n\n\n\n\n\n  \nGas Tariff\n\n  \nSmall CG\n\n  \nSelect the small commercial gas utility rate.\n\n\n\n\n\n\n\n\nThe next task is to add the cost of the \"Window A\" construction in the baseline model. This cost will be input by adding \"\nAdd Cost per Area to Construction\n\" as an always run measure to the simulation workflow with the following inputs:\n\n\nTable 1.3: Add Cost per Area to Construction\n\n\n\n\n\n\n  \nArgument\n\n  \nValue\n\n  \nNote\n\n\n\n\n\n\n\n\n\n  \nChoose a Construction to Add Costs For.\n\n  \nWindow A\n\n  \nName of the construction to add costs to.\n\n\n\n\n\n  \nRemove Existing Costs?\n\n  \nTrue\n\n  \nRemove any costs previously associated with this construction.\n\n\n\n\n\n  \nMaterial and Installation Costs for Construction per Area Used ($/ft^2).\n\n  \n8\n\n  \nEstimated cost for the baseline windows.\n\n\n\n\n\n  \nDemolition Costs for Construction per Area Used ($/ft^2).\n\n  \n0\n\n  \nNo demolition costs are modeled.\n\n\n\n\n\n  \nYears Until Costs Start (whole years).\n\n  \n0\n\n  \nConstruction costs will be incurred in year 0.\n\n\n\n\n\n  \nDemolition Costs Occur During Initial Construction?\n\n  \nFalse\n\n  \nNo demolition required for new construction.\n\n\n\n\n\n  \nExpected Life (whole years).\n\n  \n30\n\n  \nThe windows are expected to last for 30 years after installation. This will be beyond the analysis period.\n\n\n\n\n\n  \nO \n M Costs for Construction per Area Used ($/ft^2).\n\n  \n0\n\n  \nNo maintenance costs are modeled.\n\n\n\n\n\n  \nO \n M Frequency (whole years).\n\n  \n1\n\n  \nMaintenance costs would be incurred annually (if there were any).\n\n\n\n\n\n\n\n\nIn this example there is just one baseline construction, but often the baseline model will contain multiple constructions that need costing. This can be accomplished by adding multiple always run measures; with each one addressing a particular construction in the baseline model. The final task is to add the \"\nReplace Exterior Window Constructions\n\" measure using the \"Window B\" construction instead of \"Window A\". This measure will identify the alternate window construction to use as well as the cost for this construction:\n\n\nTable 1.4: Replace Exterior Window Constructions\n\n\n\n\n\n\n  \nArgument\n\n  \nValue\n\n  \nNote\n\n\n\n\n\n\n\n\n\n  \nPick a Window Construction From the Model to Replace Existing Window Constructions.\n\n  \nWindow B\n\n  \nName of the alternate construction to use.\n\n\n\n\n\n  \nChange Fixed Windows?\n\n  \nTrue\n\n  \nUse this alternate construction for exterior fixed windows.\n\n\n\n\n\n  \nChange Operable Windows?\n\n  \nTrue\n\n  \nUse this alternate construction for exterior operable windows.\n\n\n\n\n\n  \nRemove Existing Costs?\n\n  \nTrue\n\n  \nRemove any costs previously associated with this construction.\n\n\n\n\n\n  \nMaterial and Installation Costs for Construction per Area Used ($/ft^2).\n\n  \n10\n\n  \nEstimated cost for the alternate windows.\n\n\n\n\n\n  \nDemolition Costs for Construction per Area Used ($/ft^2).\n\n  \n0\n\n  \nNo demolition costs are modeled.\n\n\n\n\n\n  \nYears Until Costs Start (whole years).\n\n  \n0\n\n  \nConstruction costs will be incurred in year 0.\n\n\n\n\n\n  \nDemolition Costs Occur During Initial Construction?\n\n  \nFalse\n\n  \nNo demolition required for new construction.\n\n\n\n\n\n  \nExpected Life (whole years).\n\n  \n30\n\n  \nThe windows are expected to last for 30 years after installation. This will be beyond the analysis period.\n\n\n\n\n\n  \nO \n M Costs for Construction per Area Used ($/ft^2).\n\n  \n0\n\n  \nNo maintenance costs are modeled.\n\n\n\n\n\n  \nO \n M Frequency (whole years).\n\n  \n1\n\n  \nMaintenance costs would be incurred annually (if there were any).\n\n\n\n\n\n\n\n\nOutput:\n\n\nAssuming that there are 100 ft^2 of exterior windows in the model the following cash flows will be generated for the two cases:\n\n\nTable 1.5: Baseline window cash flows (constant dollar)\n\n\n\n\n\n\n  \nYear\n\n  \n0\n\n  \n1\n\n  \n2\n\n  \n3\n\n  \n4\n\n  \n5\n\n  \n6\n\n  \n7\n\n  \n8\n\n  \n9\n\n  \n10\n\n\n\n\n\n\n\n\n\n  \nMat \n Inst\n\n  \n$800\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nDemo\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nO\nM\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nTotal\n\n  \n$800\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n\n\n\n\n\n\n\nTable 1.6: High performance window cash flows (constant dollar)\n\n\n\n\n\n\n  \nYear\n\n  \n0\n\n  \n1\n\n  \n2\n\n  \n3\n\n  \n4\n\n  \n5\n\n  \n6\n\n  \n7\n\n  \n8\n\n  \n9\n\n  \n10\n\n\n\n\n\n\n\n\n\n  \nMat \n Inst\n\n  \n$1000\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nDemo\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nO\nM\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nTotal\n\n  \n$1000\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n\n\n\n\n\n\n\nCase 2 - Replace Exterior Window Constructions, Retrofit Construction\n\n\nNarrative:\n\n\nIn this example a retrofit project is considering replacing the existing code minimum windows (\"Window A\") with a higher performance window construction (\"Window B\"). The window retrofit is motivated because the existing windows are nearing the end of their life. In the baseline case the current windows are assumed to be replaced by windows with the same energy performance in 5 years. The energy modeler has created a baseline model which includes both constructions. All windows in the baseline model reference \"Window A\"; \"Window B\" is not referenced by any windows in the baseline model. The energy modeler has received inputs from the cost estimator that \"Window A\" type windows will cost around $8/ft^2 and the \"Window B\" type windows will cost around $10/ft^2. Demolition of the existing windows will be around $3/ft^2 and the existing windows will have a salvage value of $1/ft^2. Discount factors will be applied to the constant dollar cash flows when computing metrics such as net present value.\n\n\nInputs:\n\n\nAs in case 1, the energy modeler sets the analysis period length using \"\nSet Lifecycle Cost Parameters\n\" as an always run measure and the utility rates using \"\nXcel EDA Tariff Selection and Model Setup\n\" as an always run measure. The next task is to add the cost of the \"Window A\" construction in the baseline model. This cost will be input by adding \"\nAdd Cost per Area to Construction\n\" as an always run measure to the simulation workflow with the following inputs:\n\n\nTable 2.1: Add Cost per Area to Construction\n\n\n\n\n\n\n  \nArgument\n\n  \nValue\n\n  \nNote\n\n\n\n\n\n\n\n\n\n  \nChoose a Construction to Add Costs For.\n\n  \nWindow A\n\n  \nName of the construction to add costs to.\n\n\n\n\n\n  \nRemove Existing Costs?\n\n  \nTrue\n\n  \nRemove any costs previously associated with this construction.\n\n\n\n\n\n  \nMaterial and Installation Costs for Construction per Area Used ($/ft^2).\n\n  \n8\n\n  \nEstimated cost for the baseline windows.\n\n\n\n\n\n  \nDemolition Costs for Construction per Area Used ($/ft^2).\n\n  \n2\n\n  \nDemolition cost is $3/ft^2 cost to remove windows minus $1/ft^2 residual value.\n\n\n\n\n\n  \nYears Until Costs Start (whole years).\n\n  \n5\n\n  \nBaseline windows would be replaced in year 5.\n\n\n\n\n\n  \nDemolition Costs Occur During Initial Construction?\n\n  \nTrue\n\n  \nWill have to remove current windows when installing new ones.\n\n\n\n\n\n  \nExpected Life (whole years).\n\n  \n30\n\n  \nThe windows are expected to last for 30 years after installation. This will be beyond the analysis period.\n\n\n\n\n\n  \nO \n M Costs for Construction per Area Used ($/ft^2).\n\n  \n0\n\n  \nNo maintenance costs are modeled.\n\n\n\n\n\n  \nO \n M Frequency (whole years).\n\n  \n1\n\n  \nMaintenance costs would be incurred annually (if there were any).\n\n\n\n\n\n\n\n\nThe final task is to add the \"\nReplace Exterior Window Constructions\n\" measure using the \"Window B\" construction instead of \"Window A\". This measure will identify the alternate window construction to use as well as the cost for this construction. In this case the existing windows will be demolished and new windows installed in year 0. Therefore, the demolition costs for this measure will be set to match the costs modeled for the baseline case:\n\n\nTable 2.2: Replace Exterior Window Constructions\n\n\n\n\n\n\n  \nArgument\n\n  \nValue\n\n  \nNote\n\n\n\n\n\n\n\n\n\n  \nPick a Window Construction From the Model to Replace Existing Window Constructions.\n\n  \nWindow B\n\n  \nName of the alternate construction to use.\n\n\n\n\n\n  \nChange Fixed Windows?\n\n  \nTrue\n\n  \nUse this alternate construction for exterior fixed windows.\n\n\n\n\n\n  \nChange Operable Windows?\n\n  \nTrue\n\n  \nUse this alternate construction for exterior operable windows.\n\n\n\n\n\n  \nRemove Existing Costs?\n\n  \nTrue\n\n  \nRemove any costs previously associated with this construction.\n\n\n\n\n\n  \nMaterial and Installation Costs for Construction per Area Used ($/ft^2).\n\n  \n10\n\n  \nEstimated cost for the alternate windows.\n\n\n\n\n\n  \nDemolition Costs for Construction per Area Used ($/ft^2).\n\n  \n2\n\n  \nSame as baseline case.\n\n\n\n\n\n  \nYears Until Costs Start (whole years).\n\n  \n0\n\n  \nConstruction costs will be incurred in year 0.\n\n\n\n\n\n  \nDemolition Costs Occur During Initial Construction?\n\n  \nTrue\n\n  \nWill have to remove current windows when installing new ones.\n\n\n\n\n\n  \nExpected Life (whole years).\n\n  \n30\n\n  \nThe windows are expected to last for 30 years after installation. This will be beyond the analysis period.\n\n\n\n\n\n  \nO \n M Costs for Construction per Area Used ($/ft^2).\n\n  \n0\n\n  \nNo maintenance costs are modeled.\n\n\n\n\n\n  \nO \n M Frequency (whole years).\n\n  \n1\n\n  \nMaintenance costs should be incurred annually (if there were any).\n\n\n\n\n\n\n\n\nOutput:\n\n\nAssuming that there are 100 ft^2 of exterior windows in the model the following cash flows will be generated for the two cases:\n\n\nTable 2.3: Baseline window cash flows (constant dollar)\n\n\n\n\n\n\n  \nYear\n\n  \n0\n\n  \n1\n\n  \n2\n\n  \n3\n\n  \n4\n\n  \n5\n\n  \n6\n\n  \n7\n\n  \n8\n\n  \n9\n\n  \n10\n\n\n\n\n\n\n\n\n\n  \nMat \n Inst\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n$800\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nDemo\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n$200\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nO\nM\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nTotal\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$1000\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n\n\n\n\n\n\n\nTable 2.4: High performance window cash flows (constant dollar)\n\n\n\n\n\n\n  \nYear\n\n  \n0\n\n  \n1\n\n  \n2\n\n  \n3\n\n  \n4\n\n  \n5\n\n  \n6\n\n  \n7\n\n  \n8\n\n  \n9\n\n  \n10\n\n\n\n\n\n\n\n\n\n  \nMat \n Inst\n\n  \n$1000\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nDemo\n\n  \n$200\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nO\nM\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nTotal\n\n  \n$1200\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n\n\n\n\n\n\n\nCase 3 - Reduce Lighting Load By Percentage, New Construction\n\n\nNarrative:\n\n\nIn this example a new construction project is considering replacing CFL light bulbs in the baseline model with higher performance LED light bulbs. The lighting change is partially motivated because the LED light bulbs have an expected life of 15 years instead of 3 years for the CFLs. The energy modeler has created a baseline model which includes a lighting definition (\"Baseline Lighting\") that represents the baseline CFLs. The energy modeler estimates that lighting power can be reduced by 30% by moving from CFL to LED light bulbs. The energy modeler has received inputs from the cost estimator that CFL light bulbs will cost around $4/ft^2 and the LED bulbs will cost around $10/ft^2 (150% more than the CFL price). Because the cost for fixtures will be the same in both the baseline and alternate cases, the energy modeler will not include costs for fixtures in the models.\n\n\nInputs:\n\n\nAs in case 1, the energy modeler sets the analysis period length using \"\nSet Lifecycle Cost Parameters\n\" as an always run measure and the utility rates using \"\nXcel EDA Tariff Selectionand Model Setup\n\" as an always run measure. The next task is to add the cost of the CFL bulbs in the baseline model. This cost will be input by adding \"\nAdd Cost per Floor Area to Lights\n\" as an always run measure to the simulation workflow with the following inputs:\n\u2003\nTable 3.1: Add Cost per Floor Area to Lights\n\n\n\n\n\n\n  \nArgument\n\n  \nValue\n\n  \nNote\n\n\n\n\n\n\n\n\n\n  \nChoose a Watt per Area Lights Definition to Add Costs for.\n\n  \nBaseline Lighting\n\n  \nName of the lighting definition to add costs to.\n\n\n\n\n\n  \nRemove Existing Costs?\n\n  \nTrue\n\n  \nRemove any costs previously associated with this definition.\n\n\n\n\n\n  \nMaterial and Installation Costs for Definition per Floor Area ($/ft^2).\n\n  \n4\n\n  \nEstimated cost for the baseline lights.\n\n\n\n\n\n  \nDemolition Costs for Definition per Floor Area ($/ft^2).\n\n  \n0\n\n  \nNo demolition costs related to removing light bulbs.\n\n\n\n\n\n  \nYears Until Costs Start (whole years).\n\n  \n0\n\n  \nConstruction costs will be incurred in year 0.\n\n\n\n\n\n  \nDemolition Costs Occur During Initial Construction?\n\n  \nFalse\n\n  \nNo demolition required for new lights.\n\n\n\n\n\n  \nExpected Life (whole years).\n\n  \n4\n\n  \nThe CFL bulbs are expected to last four years.\n\n\n\n\n\n  \nO \n M Costs for Definition per Floor Area Used ($/ft^2).\n\n  \n0\n\n  \nNo maintenance costs are modeled.\n\n\n\n\n\n  \nO \n M Frequency (whole years).\n\n  \n1\n\n  \nMaintenance costs would be incurred annually (if there were any).\n\n\n\n\n\n\n\n\nThe final task is to add the \"\nReduce Lighting Loads by Percentage\n\" measure to reduce the lighting power by 30%. This measure is formulated to take arguments in the form of percentage changes from the baseline rather than absolute values:\n\n\nTable 3.2: Reduce Lighting Loads by Percentage\n\n\n\n\n\n\n  \nArgument\n\n  \nValue\n\n  \nNote\n\n\n\n\n\n\n\n\n\n  \nApply the Measure to a Specific Space Type or to the Entire Model.\n\n  \nEntire Building\n\n  \nReduce lighting across the entire building.\n\n\n\n\n\n  \nLighting Power Reduction Percentage (%).\n\n  \n30\n\n  \nReduce lighting power by 30%.\n\n\n\n\n\n  \nIncrease in Material and Installation Cost for Lighting per Floor Area (%).\n\n  \n150\n\n  \nPercentage cost increase for the LED bulbs, from $4/ft^2 to $10/ft^2.\n\n\n\n\n\n  \nIncrease in Demolition Costs for Lighting per Floor Area (%).\n\n  \n0\n\n  \nNo increase in demolition costs related to removing light bulbs.\n\n\n\n\n\n  \nYears Until Costs Start (whole years).\n\n  \n0\n\n  \nConstruction costs will be incurred in year 0.\n\n\n\n\n\n  \nDemolition Costs Occur During Initial Construction?\n\n  \nFalse\n\n  \nNo demolition required for new construction.\n\n\n\n\n\n  \nExpected Life (whole years).\n\n  \n15\n\n  \nThe LED bulbs are expected to last 15 years. This will be beyond the analysis period.\n\n\n\n\n\n  \nIncrease in O \n M Costs for Lighting per Floor Area (%).\n\n  \n0\n\n  \nNo maintenance costs are modeled.\n\n\n\n\n\n  \nO \n M Frequency (whole years).\n\n  \n1\n\n  \nMaintenance costs should be incurred annually (if there were any).\n\n\n\n\n\n\n\n\nOutput:\n\n\nAssuming that there are 100 ft^2 of lighted floor area in the model the following cash flows will be generated for the two cases:\n\n\nTable 3.3: Baseline CFL bulb cash flows (constant dollar)\n\n\n\n\n\n\n  \nYear\n\n  \n0\n\n  \n1\n\n  \n2\n\n  \n3\n\n  \n4\n\n  \n5\n\n  \n6\n\n  \n7\n\n  \n8\n\n  \n9\n\n  \n10\n\n\n\n\n\n\n\n\n\n  \nMat \n Inst\n\n  \n$400\n\n  \n\n  \n\n  \n\n  \n$400\n\n  \n\n  \n\n  \n\n  \n$400\n\n  \n\n  \n\n\n\n\n\n  \nDemo\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nO\nM\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nTotal\n\n  \n$400\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$400\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$400\n\n  \n$0\n\n  \n$0\n\n\n\n\n\n\n\n\nTable 3.4: High performance LED bulb cash flows (constant dollar)\n\n\n\n\n\n\n  \nYear\n\n  \n0\n\n  \n1\n\n  \n2\n\n  \n3\n\n  \n4\n\n  \n5\n\n  \n6\n\n  \n7\n\n  \n8\n\n  \n9\n\n  \n10\n\n\n\n\n\n\n\n\n\n  \nMat \n Inst\n\n  \n$1000\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nDemo\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nO\nM\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nTotal\n\n  \n$1000\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n\n\n\n\n\n\n\nCase 4 - Reduce Lighting Loads By Percentage, Retrofit\n\n\nNarrative:\n\n\nIn this example a retrofit project is considering replacing CFL light bulbs in the baseline model with higher performance linear florescent lighting. The lighting retrofit is more expensive because it requires removing old fixtures and installing new ones. The energy modeler has created a baseline model which includes a lighting definition (\"Baseline Lighting\") that represents the baseline CFLs. The energy modeler estimates that lighting power can be reduced by 30% by moving from CFL to linear florescent lighting. The energy modeler has received inputs from the cost estimator that CFL light bulbs will cost around $4/ft^2 and have an expected life of 4 years. Removing the current lighting fixtures will cost around $10/ft^2. The new fixtures will cost around $20/ft^2 (400% more than the baseline fixtures) and the linear florescent light bulbs will cost around $3/ft^2 with an expected life of 5 years.\n\n\nInputs:\n\n\nAs in case 1, the energy modeler sets the analysis period length using \"\nSet Lifecycle Cost Parameters\n\" as an always run measure and the utility rates using \"\nXcel EDA Tariff Selection and Model Setup\n\" as an always run measure. The next task is to add the cost of the CFL bulbs in the baseline model. Because the alternate case involves removing and installing lighting fixtures, the modeler chooses to include the cost of light bulbs in the maintenance category in this example. This cost will be input by adding \"\nAdd Cost per Floor Area to Lights\n\" as an always run measure to the simulation workflow with the following inputs:\n\n\nTable 4.1: Add Cost per Floor Area to Lights\n\n\n\n\n\n\n  \nArgument\n\n  \nValue\n\n  \nNote\n\n\n\n\n\n\n\n\n\n  \nChoose a Watt per Area Lights Definition to Add Costs For.\n\n  \nBaseline Lighting\n\n  \nName of the lighting definition to add costs to.\n\n\n\n\n\n  \nRemove Existing Costs?\n\n  \nTrue\n\n  \nRemove any costs previously associated with this definition.\n\n\n\n\n\n  \nMaterial and Installation Costs for Definition per Floor Area ($/ft^2).\n\n  \n5\n\n  \nIf the analysis period was long enough this would be incurred.\n\n\n\n\n\n  \nDemolition Costs for Definition  per Floor Area ($/ft^2).\n\n  \n10\n\n  \nIf the analysis period was long enough this would be incurred.\n\n\n\n\n\n  \nYears Until Costs Start (whole years).\n\n  \n15\n\n  \nIn the baseline case the existing lighting fixtures will not be replaced during the analysis period. The bulbs will be changed as an O\nM cost.\n\n\n\n\n\n  \nDemolition Costs Occur During Initial Construction?\n\n  \nTrue\n\n  \nDemolition costs will be incurred when construction occurs.\n\n\n\n\n\n  \nExpected Life (whole years).\n\n  \n20\n\n  \nThe expected life of the light fixtures themselves is assumed to be 20 years.\n\n\n\n\n\n  \nO \n M Costs for Definition  per Floor Area ($/ft^2).\n\n  \n4\n\n  \nReplacing CFL bulbs costs around $4/ft^2.\n\n\n\n\n\n  \nO \n M Frequency (whole years).\n\n  \n4\n\n  \nCFL bulbs must be replaced every four years.\n\n\n\n\n\n\n\n\nThe final task is to add the \"\nReduce Lighting Loads By Percentage\n\" measure to reduce the lighting power by 30%. This measure will also add costs for removing old fixtures and installing new ones:\n\n\nTable 4.2: Reduce Lighting Loads By Percentage\n\n\n\n\n\n\n  \nArgument\n\n  \nValue\n\n  \nNote\n\n\n\n\n\n\n\n\n\n  \nApply the Measure to a Specific Space Type or to the Entire Model.\n\n  \nEntire Building\n\n  \nReduce lighting across the entire building.\n\n\n\n\n\n  \nLighting Power Reduction Percentage (%).\n\n  \n30\n\n  \nReduce lighting power by 30%.\n\n\n\n\n\n  \nIncrease in Material and Installation Cost for Lighting per Floor Area (%).\n\n  \n400\n\n  \nPercentage cost increase of new lighting fixtures relative to existing fixtures.\n\n\n\n\n\n  \nIncrease in Demolition Cost for Lighting per Floor Area (%).\n\n  \n0\n\n  \nPercentage cost increase of demolition relative to existing fixtures.\n\n\n\n\n\n  \nYears Until Costs Start (whole years).\n\n  \n0\n\n  \nConstruction costs will be incurred in year 0.\n\n\n\n\n\n  \nDemolition Costs Occur During Initial Construction?\n\n  \nTrue\n\n  \nDemolition costs will be incurred when construction occurs.\n\n\n\n\n\n  \nExpected Life (whole years).\n\n  \n20\n\n  \nThe expected life of the light fixtures themselves is assumed to be 20 years.\n\n\n\n\n\n  \nIncrease in O \n M Costs for Lighting per Floor Area (%).\n\n  \n-25\n\n  \nPercentage cost increase of linear fluorescents over CFL bulbs, $3/ft^2-$4/ft^2.\n\n\n\n\n\n  \nO \n M Frequency (whole years).\n\n  \n5\n\n  \nLinear fluorescents bulbs must be replaced every five years.\n\n\n\n\n\n\n\n\nOutput:\n\n\nAssuming that there are 100 ft^2 of lighted floor area in the model the following cash flows will be generated for the two cases:\n\n\nTable 4.3: Baseline CFL bulb cash flows (constant dollar)\n\n\n\n\n\n\n  \nYear\n\n  \n0\n\n  \n1\n\n  \n2\n\n  \n3\n\n  \n4\n\n  \n5\n\n  \n6\n\n  \n7\n\n  \n8\n\n  \n9\n\n  \n10\n\n\n\n\n\n\n\n\n\n  \nMat \n Inst\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nDemo\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nO\nM\n\n  \n$400\n\n  \n\n  \n\n  \n\n  \n$400\n\n  \n\n  \n\n  \n\n  \n$400\n\n  \n\n  \n\n\n\n\n\n  \nTotal\n\n  \n$400\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$400\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$400\n\n  \n$0\n\n  \n$0\n\n\n\n\n\n\n\n\nTable 4.4: High performance LED bulb cash flows (constant dollar)\n\n\n\n\n\n\n  \nYear\n\n  \n0\n\n  \n1\n\n  \n2\n\n  \n3\n\n  \n4\n\n  \n5\n\n  \n6\n\n  \n7\n\n  \n8\n\n  \n9\n\n  \n10\n\n\n\n\n\n\n\n\n\n  \nMat \n Inst\n\n  \n$2000\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nDemo\n\n  \n$1000\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nO\nM\n\n  \n$300\n\n  \n\n  \n\n  \n\n  \n\n  \n$300\n\n  \n\n  \n\n  \n\n  \n\n  \n$300\n\n\n\n\n\n  \nTotal\n\n  \n$3300\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$300\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$300\n\n\n\n\n\n\n\n\nCase 5 - Add Daylight Sensors, New Construction\n\n\nNarrative:\n\n\nIn this final example a new construction project is considering adding daylight controls to the baseline model. The energy modeler has created a baseline model which does not include daylight controls. The energy modeler has received inputs from the cost estimator that daylight controls will cost around $500/sensor and have an expected life of 30 years.\n\n\nInputs:\n\n\nAs in case 1, the energy modeler sets the analysis period length using \"\nSet Lifecycle Cost Parameters\n\" as an always run measure and the utility rates using \"\nXcel EDA Tariff Selection and Model Setup\n\" as an always run measure. However, because there are no daylight control sensors in the baseline model there is no need to apply an always run measure to add costs to the baseline model. The final task is to add the \"\nAdd Daylight Sensors\n\" measure. This measure will add daylight controls to each office space as well as their associated costs:\n\u2003\nTable 5.1: Add Daylight Sensors\n\n\n\n\n\n\n  \nArgument\n\n  \nValue\n\n  \nNote\n\n\n\n\n\n\n\n\n\n  \nSpace Type to Add Daylight Sensors in.\n\n  \nOffice\n\n  \nAdd daylight controls to the spaces of Office Space Type\n\n\n\n\n\n  \nDaylighting Setpoint (fc).\n\n  \n45\n\n  \nDaylighting control setpoint of 45 footcandles.\n\n\n\n\n\n  \nDaylighting Control Type.\n\n  \nContinuous/Off\n\n  \nDaylight controls are allowed to dim lights as well as turn them off.\n\n\n\n\n\n  \nDaylighting Minimum Input Power Fraction (min=0 max=0.6).\n\n  \n0.3\n\n  \nMinimum power fraction the daylight controls may dim the lights to.\n\n\n\n\n\n  \nDaylighting Minimum Light Output Fraction (min=0 max=0.6).\n\n  \n0.2\n\n  \nLight output fraction at minimum dimming level.\n\n\n\n\n\n  \nSensor Height (inches).\n\n  \n30\n\n  \nPlace daylight control sensors at 30 inch workplane.\n\n\n\n\n\n  \nMaterial and Installation Costs per Sensor ($).\n\n  \n500\n\n  \nCost to install daylight controls\n\n\n\n\n\n  \nDemolition Costs per Sensor ($).\n\n  \n100\n\n  \nDemolition costs would be incurred in analysis period was long enough.\n\n\n\n\n\n  \nYears Until Costs Start (whole years).\n\n  \n0\n\n  \nConstruction costs will be incurred in year 0.\n\n\n\n\n\n  \nDemolition Costs Occur During Initial Construction?\n\n  \nFalse\n\n  \nNo demolition required for new construction.\n\n\n\n\n\n  \nExpected Life (whole years).\n\n  \n30\n\n  \nThe expected life of the daylight controls is assumed to be 30 years.\n\n\n\n\n\n  \nO \n M Costs per Sensor ($).\n\n  \n0\n\n  \nNo maintenance costs are modeled.\n\n\n\n\n\n  \n\n  \n\n  \n\n\n\n\n\n  \nO \n M Frequency (whole years).\n\n  \n1\n\n  \nMaintenance costs would be incurred annually (if there were any).\n\n\n\n\n\n\n\n\nOutput:\n\n\nAssuming that there are 10 \"Office\" spaces in the model the following cash flows will be generated for the two cases:\n\n\nTable 5.2: Baseline cash flows (constant dollar)\n\n\n\n\n\n\n  \nYear\n\n  \n0\n\n  \n1\n\n  \n2\n\n  \n3\n\n  \n4\n\n  \n5\n\n  \n6\n\n  \n7\n\n  \n8\n\n  \n9\n\n  \n10\n\n\n\n\n\n\n\n\n\n  \nMat \n Inst\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nDemo\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nO\nM\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nTotal\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n\n\n\n\n\n\n\nTable 5.3: High performance daylight controls cash flows (constant dollar)\n\n\n\n\n\n\n  \nYear\n\n  \n0\n\n  \n1\n\n  \n2\n\n  \n3\n\n  \n4\n\n  \n5\n\n  \n6\n\n  \n7\n\n  \n8\n\n  \n9\n\n  \n10\n\n\n\n\n\n\n\n\n\n  \nMat \n Inst\n\n  \n$5000\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nDemo\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nO\nM\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nTotal\n\n  \n$5000\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n  \n$0\n\n\n\n\n\n\n\n\nDraft examples to serve as design guide for HVAC component costing\n\n\nCase 6 - Increase COP of Two Speed DX Cooling Units, New Construction\n\n\nNarrative:\n\n\nIn this example a new construction project is considering two options for two speed dx cooling units; one with the code minimum COP of 3 and a higher performance one with a COP of 4.5. The energy modeler has created a baseline model which includes un-costed two speed dx cooling units. The energy modeler has received inputs from the cost estimator that each baseline DX units will cost around $2000 and the each high performance one will cost around $2500. There are 4 affected units.\n\n\nInputs:\n\n\nAs in case 1, the energy modeler sets the analysis period length using \"\nSet Lifecycle Cost Parameters\n\" as an always run measure and the utility rates using \"\nXcel EDA Tariff Selection and Model Setup\n\" as an always run measure. The next task is to add the cost to the appropriate HVAC components in the baseline model. In this case only two of the three loops are being inspected for two speed DX cooling units. This cost will be input by adding \"\nAdd Cost HVAC Components\n\" as an always run measure to the simulation workflow with the following inputs:\n\n\nTable 6.1: Add Cost to baseline two speed DX units.\n\n\n\n\n\n\n  \nArgument\n\n  \nValue\n\n  \nNote\n\n\n\n\n\n\n\n\n\n  \nComponent Type to Add Cost to.\n\n  \nOS:Coil:Cooling:Dx:\n\n  \n\n\n\n\n\n  \nTwoSpeed\n\n  \nList of all types of HVAC components (or we can make multiple measures each with sub-set of objects)\n\n  \n\n\n\n\n\n  \nSearch in Loop 1\n\n  \nTrue\n\n  \nThe measure will build up list of loops\n\n\n\n\n\n  \nand the modeler can choose which ones to search for two speed dx units in.\n\n  \n\n  \n\n\n\n\n\n  \nSearch in Loop 2\n\n  \nTrue\n\n  \n\n\n\n\n\n  \nSearch in Loop 3\n\n  \nFalse\n\n  \n\n\n\n\n\n  \nRemove Existing Costs?\n\n  \nTrue\n\n  \nRemove any cost associated with the affected components\n\n\n\n\n\n  \nMaterial and Installation Costs for Building ($).\n\n  \n2000\n\n  \nEstimated cost each for the baseline two speed dx cooling units\n\n\n\n\n\n  \nDemolition Costs for Construction per Area Used ($/ft^2).\n\n  \n200\n\n  \nThis field will not impact results since it will be 30 years before it is incurred.\n\n\n\n\n\n  \nYears Until Costs Start (whole years).\n\n  \n0\n\n  \nConstruction costs will be incurred in year 0.\n\n\n\n\n\n  \nDemolition Costs Occur During Initial Construction?\n\n  \nFalse\n\n  \nNo demolition required for new construction.\n\n\n\n\n\n  \nExpected Life (whole years).\n\n  \n30\n\n  \nThe windows are expected to last for 30 years after installation. This will be beyond the analysis period.\n\n\n\n\n\n  \nO \n M Costs for Construction per Area Used ($/ft^2).\n\n  \n50\n\n  \nNo maintenance costs are modeled.\n\n\n\n\n\n  \nO \n M Frequency (whole years).\n\n  \n1\n\n  \nMaintenance costs would be incurred annually (if there were any).\n\n\n\n\n\n\n\n\nIn this example there is just one baseline cost added , but often the baseline model will contain multiple components with different lifecycle cost cycles that need to be modeled. This can be accomplished by adding multiple always run measures; with each one addressing a particular component or component type in the baseline model. The final task is to add the \"\nSet COP for Two Speed DX Cooling Units\n\". This measure will adjust the COP of the selected units:\n\n\nTable 6.2: Set COP for two speed DX Cooling Units\n\n\n\n\n\n\n  \nArgument\n\n  \nValue\n\n  \nNote\n\n\n\n\n\n\n\n\n\n  \nRated High Speed COP\n\n  \n4.5\n\n  \n\n\n\n\n\n  \nRated Low Speed COP\n\n  \n4.5\n\n  \n\n\n\n\n\n  \nComponent Type to Add Cost to.\n\n  \nOS:Coil:Cooling:Dx:\n\n  \n\n\n\n\n\n  \nTwoSpeed\n\n  \nList of all types of HVAC components (or we can make multiple measures each with sub-set of objects)\n\n  \n\n\n\n\n\n  \nSearch in Loop 1\n\n  \nTrue\n\n  \nThe measure will build up list of loops\n\n\n\n\n\n  \nand the modeler can choose which ones to search for two speed dx units in.\n\n  \n\n  \n\n\n\n\n\n  \nSearch in Loop 2\n\n  \nTrue\n\n  \n\n\n\n\n\n  \nSearch in Loop 3\n\n  \nFalse\n\n  \n\n\n\n\n\n  \nRemove Existing Costs?\n\n  \nTrue\n\n  \nRemove any cost associated with the affected components\n\n\n\n\n\n  \nMaterial and Installation Costs for Building ($).\n\n  \n2500\n\n  \nEstimated cost each for the baseline two speed dx cooling units\n\n\n\n\n\n  \nDemolition Costs for Construction per Area Used ($/ft^2).\n\n  \n300\n\n  \nThis field will not impact results since it will be 30 years before it is incurred.\n\n\n\n\n\n  \nYears Until Costs Start (whole years).\n\n  \n0\n\n  \nConstruction costs will be incurred in year 0.\n\n\n\n\n\n  \nDemolition Costs Occur During Initial Construction?\n\n  \nFalse\n\n  \nNo demolition required for new construction.\n\n\n\n\n\n  \nExpected Life (whole years).\n\n  \n30\n\n  \nThe windows are expected to last for 30 years after installation. This will be beyond the analysis period.\n\n\n\n\n\n  \nO \n M Costs for Construction per Area Used ($/ft^2).\n\n  \n50\n\n  \nNo maintenance costs are modeled.\n\n\n\n\n\n  \nO \n M Frequency (whole years).\n\n  \n3\n\n  \nMaintenance costs would be incurred annually (if there were any).\n\n\n\n\n\n\n\n\nOutput:\n\n\nAssuming that there are 4 affected DX units the following cash flows will be generated for the two cases:\n\n\nTable 6.3: Baseline DX units cash flows (constant dollar)\n\n\n\n\n\n\n  \nYear\n\n  \n0\n\n  \n1\n\n  \n2\n\n  \n3\n\n  \n4\n\n  \n5\n\n  \n6\n\n  \n7\n\n  \n8\n\n  \n9\n\n  \n10\n\n\n\n\n\n\n\n\n\n  \nMat \n Inst\n\n  \n$8000\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nDemo\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nO\nM\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n\n\n\n\n  \nTotal\n\n  \n$8200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n\n\n\n\n\n\n\nTable 6.4: High performance DX units cash flows (constant dollar)\n\n\n\n\n\n\n  \nYear\n\n  \n0\n\n  \n1\n\n  \n2\n\n  \n3\n\n  \n4\n\n  \n5\n\n  \n6\n\n  \n7\n\n  \n8\n\n  \n9\n\n  \n10\n\n\n\n\n\n\n\n\n\n  \nMat \n Inst\n\n  \n$10000\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nDemo\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nO\nM\n\n  \n$200\n\n  \n\n  \n\n  \n$200\n\n  \n\n  \n\n  \n$200\n\n  \n\n  \n\n  \n$200\n\n  \n\n\n\n\n\n  \nTotal\n\n  \n$10200\n\n  \n$0\n\n  \n$0\n\n  \n$200\n\n  \n$0\n\n  \n$0\n\n  \n$200\n\n  \n$0\n\n  \n$0\n\n  \n$200\n\n  \n$0\n\n\n\n\n\n\n\n\nCase 7 - Increase COP of Two Speed DX Cooling Units, Retrofit\n\n\nNarrative:\n\n\nIn this example a retrofit project is considering replacing the two speed dx cooling units in part of the building. The baseline units have a code minimum COP of 3. The retrofit would add units 4.5. The energy modeler has created a baseline model which includes un-costed two speed dx cooling units. The energy modeler has received inputs from the cost estimator that each high performance two speed DX units will cost $2500. There are 4 affected units.\n\n\nInputs:\n\n\nAs in case 1, the energy modeler sets the analysis period length using \"\nSet Lifecycle Cost Parameters\n\" as an always run measure and the utility rates using \"\nXcel EDA Tariff Selection and Model Setup\n\" as an always run measure. The next task is to add the cost to the appropriate HVAC components in the baseline model. In this case only two of the three loops are being inspected for two speed DX cooling units. This cost will be input by adding \"\nAdd Cost HVAC Components\n\" as an always run measure to the simulation workflow with the following inputs:\n\n\nTable 7.1: Add Cost to baseline two speed DX units.\n\n\n\n\n\n\n  \nArgument\n\n  \nValue\n\n  \nNote\n\n\n\n\n\n\n\n\n\n  \nComponent Type to Add Cost to.\n\n  \nOS:Coil:Cooling:Dx:\n\n  \n\n\n\n\n\n  \nTwoSpeed\n\n  \nList of all types of HVAC components (or we can make multiple measures each with sub-set of objects)\n\n  \n\n\n\n\n\n  \nSearch in Loop 1\n\n  \nTrue\n\n  \nThe measure will build up list of loops\n\n\n\n\n\n  \nand the modeler can choose which ones to search for two speed dx units in.\n\n  \n\n  \n\n\n\n\n\n  \nSearch in Loop 2\n\n  \nTrue\n\n  \n\n\n\n\n\n  \nSearch in Loop 3\n\n  \nFalse\n\n  \n\n\n\n\n\n  \nRemove Existing Costs?\n\n  \nTrue\n\n  \nRemove any cost associated with the affected components\n\n\n\n\n\n  \nMaterial and Installation Costs for Building ($).\n\n  \n2000\n\n  \nEstimated cost each for the baseline two speed dx cooling units\n\n\n\n\n\n  \nDemolition Costs for Construction per Area Used ($/ft^2).\n\n  \n200\n\n  \nThis field will not impact results since it will be 30 years before it is incurred.\n\n\n\n\n\n  \nYears Until Costs Start (whole years).\n\n  \n5\n\n  \nConstruction costs will be incurred in year 0.\n\n\n\n\n\n  \nDemolition Costs Occur During Initial Construction?\n\n  \nFalse\n\n  \nNo demolition required for new construction.\n\n\n\n\n\n  \nExpected Life (whole years).\n\n  \n30\n\n  \nThe windows are expected to last for 30 years after installation. This will be beyond the analysis period.\n\n\n\n\n\n  \nO \n M Costs for Construction per Area Used ($/ft^2).\n\n  \n50\n\n  \nNo maintenance costs are modeled.\n\n\n\n\n\n  \nO \n M Frequency (whole years).\n\n  \n1\n\n  \nMaintenance costs would be incurred annually (if there were any).\n\n\n\n\n\n\n\n\nIn this example there is just one baseline cost added , but often the baseline model will contain multiple components with different lifecycle cost cycles that need to be modeled. This can be accomplished by adding multiple always run measures; with each one addressing a particular component or component type in the baseline model. The final task is to add the \"Set COP for Two Speed DX Cooling Units\". This measure will adjust the COP of the selected units:\n\n\nTable 7.2: Set COP for two speed DX Cooling Units\n\n\n\n\n\n\n  \nArgument\n\n  \nValue\n\n  \nNote\n\n\n\n\n\n\n\n\n\n  \nRated High Speed COP\n\n  \n4.5\n\n  \n\n\n\n\n\n  \nRated Low Speed COP\n\n  \n4.5\n\n  \n\n\n\n\n\n  \nComponent Type to Add Cost to.\n\n  \nOS:Coil:Cooling:Dx:\n\n  \n\n\n\n\n\n  \nTwoSpeed\n\n  \nList of all types of HVAC components (or we can make multiple measures each with sub-set of objects)\n\n  \n\n\n\n\n\n  \nSearch in Loop 1\n\n  \nTrue\n\n  \nThe measure will build up list of loops\n\n\n\n\n\n  \nand the modeler can choose which ones to search for two speed dx units in.\n\n  \n\n  \n\n\n\n\n\n  \nSearch in Loop 2\n\n  \nTrue\n\n  \n\n\n\n\n\n  \nSearch in Loop 3\n\n  \nFalse\n\n  \n\n\n\n\n\n  \nRemove Existing Costs?\n\n  \nTrue\n\n  \nRemove any cost associated with the affected components\n\n\n\n\n\n  \nMaterial and Installation Costs for Building ($).\n\n  \n2500\n\n  \nEstimated cost each for the baseline two speed dx cooling units\n\n\n\n\n\n  \nDemolition Costs for Construction per Area Used ($/ft^2).\n\n  \n300\n\n  \nThis field will not impact results since it will be 30 years before it is incurred.\n\n\n\n\n\n  \nYears Until Costs Start (whole years).\n\n  \n0\n\n  \nConstruction costs will be incurred in year 0.\n\n\n\n\n\n  \nDemolition Costs Occur During Initial Construction?\n\n  \nTrue\n\n  \nNo demolition required for new construction.\n\n\n\n\n\n  \nExpected Life (whole years).\n\n  \n30\n\n  \nThe windows are expected to last for 30 years after installation. This will be beyond the analysis period.\n\n\n\n\n\n  \nO \n M Costs for Construction per Area Used ($/ft^2).\n\n  \n50\n\n  \nNo maintenance costs are modeled.\n\n\n\n\n\n  \nO \n M Frequency (whole years).\n\n  \n3\n\n  \nMaintenance costs would be incurred annually (if there were any).\n\n\n\n\n\n\n\n\nOutput:\n\n\nAssuming that there are 4 affected DX units the following cash flows will be generated for the two cases:\n\n\nTable 6.3: Baseline DX units cash flows (constant dollar)\n\n\n\n\n\n\n  \nYear\n\n  \n0\n\n  \n1\n\n  \n2\n\n  \n3\n\n  \n4\n\n  \n5\n\n  \n6\n\n  \n7\n\n  \n8\n\n  \n9\n\n  \n10\n\n\n\n\n\n\n\n\n\n  \nMat \n Inst\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n$8000\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nDemo\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n$200\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nO\nM\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n\n\n\n\n  \nTotal\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$8400\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n  \n$200\n\n\n\n\n\n\n\n\nTable 6.4: High performance DX units cash flows (constant dollar)\n\n\n\n\n\n\n  \nYear\n\n  \n0\n\n  \n1\n\n  \n2\n\n  \n3\n\n  \n4\n\n  \n5\n\n  \n6\n\n  \n7\n\n  \n8\n\n  \n9\n\n  \n10\n\n\n\n\n\n\n\n\n\n  \nMat \n Inst\n\n  \n$10000\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nDemo\n\n  \n$200\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n  \nO\nM\n\n  \n$200\n\n  \n\n  \n\n  \n$200\n\n  \n\n  \n\n  \n$200\n\n  \n\n  \n\n  \n$200\n\n  \n\n\n\n\n\n  \nTotal\n\n  \n$10400\n\n  \n$0\n\n  \n$0\n\n  \n$200\n\n  \n$0\n\n  \n$0\n\n  \n$200\n\n  \n$0\n\n  \n$0\n\n  \n$200\n\n  \n$0", 
            "title": "Life Cycle Cost Analysis"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#purpose", 
            "text": "Life cycle cost analysis is commonly performed by energy modelers in order to determine if energy cost savings due to reduced energy usage will be enough to justify the additional investment required to implement the conservation measure. Different projects are interested in different life cycle metrics (e.g. simple payback, net present value, etc.) and will have different cost assumptions. However, in all cases the modeler needs a way to specify costs associated with the energy conservation measures, enter utility rate tariffs related to energy use, and set life cycle cost parameters such as the analysis period length and discount rate. This document explains how to use the OpenStudio Parametric Analysis Tool (PAT) to perform each of these functions as part of a life cycle cost analysis.  In order to perform a parametric analysis using PAT, a user must first build a baseline OpenStudio model using a combination of the OpenStudio SketchUp plug-in to edit geometry and the OpenStudio application to edit other model components. Once the baseline model has been assembled and tested, users may apply energy conservation measures using the PAT application. Tutorials and documentation on this process are available at http://openstudio.nrel.gov/parametric-analysis-tool-tutorials.  The \"OpenStudio Life Cycle Costing Examples\" document focuses on how to add cost inputs through measures in order to extend the PAT analysis from one dealing only with energy use to one that includes life cycle cost analysis as well. The first section describes how to set life cycle cost analysis parameters. The second section describes how to input utility rate tariffs. The third section describes how to input costs related to energy conservation measures. Because energy conservation measures may have different cost assumptions for different projects (e.g. retrofit vs. new construction), several examples are given for a variety of measures showing how to input costs in different scenarios. All cost values for measure inputs are entered in constant (year 0) dollars regardless of when the costs are incurred.", 
            "title": "Purpose"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#life-cycle-cost-parameters", 
            "text": "The most basic parameters needed for a life cycle cost analysis are the analysis period length and the discount rate. A longer analysis period accumulates more energy cost savings than a shorter period; giving energy conservation measures a better pay back relative to their initial costs. A higher discount rate devalues future energy cost savings relative to money spent on capital improvements in the present; giving energy conservation measures a lower pay back relative to their initial costs. Users may set the \"Analysis Length\" of their project in the PAT application using the \" Set Lifecycle Cost Parameters \" OpenStudio measure. This measure should be added to the simulation workflow as an always run measure so it is applied to all design alternatives in the analysis. If you don\u2019t set OpenStudio will create an object with the default length of 25 years.", 
            "title": "Life Cycle Cost Parameters"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#energy-conservation-measure-costs", 
            "text": "Once the life cycle economic parameters and utility rate tariffs have been added to the baseline model (or as always run measures in PAT), the next stage in the analysis is determining which energy conservation measures are available to the project and associated costs for each option. Because there are so many different types of energy efficiency measures (OpenStudio allows users to write their own measures) this document will focus on three measures (written by NREL) which span a range of potential options; \" Replace Exterior Window Constructions with a Different Construction from the Model \", \" Reduce Lighting Loads By Percentage \", and \" Add Daylight Sensors \". Each of these measures takes user input for both cost and performance; this document focuses primarily on the cost parameters. A variety of project scenarios (e.g. retrofit vs. new construction) will be explored to see how the same measure can support each scenario by using different cost inputs. Examples in this document will provide a motivating narrative to give background on why cost inputs were set to the values they are. The document will then show how the cost inputs translate to annual cash flows in the life cycle analysis. No attempt has been made to ensure that the cost inputs provided in these examples are reasonable; they are for illustrative purposes only.", 
            "title": "Energy Conservation Measure Costs"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#case-1-replace-exterior-window-constructions-new-construction", 
            "text": "", 
            "title": "Case 1 - Replace Exterior Window Constructions, New Construction"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#narrative", 
            "text": "In this example a new construction project is considering two options for window constructions; the code minimum window construction (\"Window A\") and a higher performance window construction (\"Window B\"). The energy modeler has created a baseline model which includes both constructions. All windows in the baseline model reference \"Window A\"; \"Window B\" is not referenced by any windows in the baseline model. The energy modeler has received inputs from the cost estimator that \"Window A\" type windows will cost around $8/ft^2 and the \"Window B\" type windows will cost around $10/ft^2.", 
            "title": "Narrative:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#inputs", 
            "text": "The first task the energy modeler needs to accomplish is to set the life cycle cost parameters by adding \"Set Lifecycle Cost Parameters\" as an always run measure to the simulation workflow with the following inputs:  Table 1.1: Set Lifecycle Cost Parameters   \n   Argument \n   Value \n   Note     \n   Set the length of the Study Period (years) \n   10 \n   The life cycle analysis uses a 10 year analysis period.     Next the modeler inputs utility rate costs by adding \"Xcel EDA Tariff Selection and Model Setup\" as an always run measure to the simulation workflow with the following inputs:  Table 1.2: Xcel EDA Tariff Selection and Model Setup   \n   Argument \n   Value \n   Note     \n   Electricity Tariff \n   Commercial \n   Select the small commercial electric utility rate.   \n   Gas Tariff \n   Small CG \n   Select the small commercial gas utility rate.     The next task is to add the cost of the \"Window A\" construction in the baseline model. This cost will be input by adding \" Add Cost per Area to Construction \" as an always run measure to the simulation workflow with the following inputs:  Table 1.3: Add Cost per Area to Construction   \n   Argument \n   Value \n   Note     \n   Choose a Construction to Add Costs For. \n   Window A \n   Name of the construction to add costs to.   \n   Remove Existing Costs? \n   True \n   Remove any costs previously associated with this construction.   \n   Material and Installation Costs for Construction per Area Used ($/ft^2). \n   8 \n   Estimated cost for the baseline windows.   \n   Demolition Costs for Construction per Area Used ($/ft^2). \n   0 \n   No demolition costs are modeled.   \n   Years Until Costs Start (whole years). \n   0 \n   Construction costs will be incurred in year 0.   \n   Demolition Costs Occur During Initial Construction? \n   False \n   No demolition required for new construction.   \n   Expected Life (whole years). \n   30 \n   The windows are expected to last for 30 years after installation. This will be beyond the analysis period.   \n   O   M Costs for Construction per Area Used ($/ft^2). \n   0 \n   No maintenance costs are modeled.   \n   O   M Frequency (whole years). \n   1 \n   Maintenance costs would be incurred annually (if there were any).     In this example there is just one baseline construction, but often the baseline model will contain multiple constructions that need costing. This can be accomplished by adding multiple always run measures; with each one addressing a particular construction in the baseline model. The final task is to add the \" Replace Exterior Window Constructions \" measure using the \"Window B\" construction instead of \"Window A\". This measure will identify the alternate window construction to use as well as the cost for this construction:  Table 1.4: Replace Exterior Window Constructions   \n   Argument \n   Value \n   Note     \n   Pick a Window Construction From the Model to Replace Existing Window Constructions. \n   Window B \n   Name of the alternate construction to use.   \n   Change Fixed Windows? \n   True \n   Use this alternate construction for exterior fixed windows.   \n   Change Operable Windows? \n   True \n   Use this alternate construction for exterior operable windows.   \n   Remove Existing Costs? \n   True \n   Remove any costs previously associated with this construction.   \n   Material and Installation Costs for Construction per Area Used ($/ft^2). \n   10 \n   Estimated cost for the alternate windows.   \n   Demolition Costs for Construction per Area Used ($/ft^2). \n   0 \n   No demolition costs are modeled.   \n   Years Until Costs Start (whole years). \n   0 \n   Construction costs will be incurred in year 0.   \n   Demolition Costs Occur During Initial Construction? \n   False \n   No demolition required for new construction.   \n   Expected Life (whole years). \n   30 \n   The windows are expected to last for 30 years after installation. This will be beyond the analysis period.   \n   O   M Costs for Construction per Area Used ($/ft^2). \n   0 \n   No maintenance costs are modeled.   \n   O   M Frequency (whole years). \n   1 \n   Maintenance costs would be incurred annually (if there were any).", 
            "title": "Inputs:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#output", 
            "text": "Assuming that there are 100 ft^2 of exterior windows in the model the following cash flows will be generated for the two cases:  Table 1.5: Baseline window cash flows (constant dollar)   \n   Year \n   0 \n   1 \n   2 \n   3 \n   4 \n   5 \n   6 \n   7 \n   8 \n   9 \n   10     \n   Mat   Inst \n   $800 \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Demo \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   O M \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Total \n   $800 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0     Table 1.6: High performance window cash flows (constant dollar)   \n   Year \n   0 \n   1 \n   2 \n   3 \n   4 \n   5 \n   6 \n   7 \n   8 \n   9 \n   10     \n   Mat   Inst \n   $1000 \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Demo \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   O M \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Total \n   $1000 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0", 
            "title": "Output:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#case-2-replace-exterior-window-constructions-retrofit-construction", 
            "text": "", 
            "title": "Case 2 - Replace Exterior Window Constructions, Retrofit Construction"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#narrative_1", 
            "text": "In this example a retrofit project is considering replacing the existing code minimum windows (\"Window A\") with a higher performance window construction (\"Window B\"). The window retrofit is motivated because the existing windows are nearing the end of their life. In the baseline case the current windows are assumed to be replaced by windows with the same energy performance in 5 years. The energy modeler has created a baseline model which includes both constructions. All windows in the baseline model reference \"Window A\"; \"Window B\" is not referenced by any windows in the baseline model. The energy modeler has received inputs from the cost estimator that \"Window A\" type windows will cost around $8/ft^2 and the \"Window B\" type windows will cost around $10/ft^2. Demolition of the existing windows will be around $3/ft^2 and the existing windows will have a salvage value of $1/ft^2. Discount factors will be applied to the constant dollar cash flows when computing metrics such as net present value.", 
            "title": "Narrative:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#inputs_1", 
            "text": "As in case 1, the energy modeler sets the analysis period length using \" Set Lifecycle Cost Parameters \" as an always run measure and the utility rates using \" Xcel EDA Tariff Selection and Model Setup \" as an always run measure. The next task is to add the cost of the \"Window A\" construction in the baseline model. This cost will be input by adding \" Add Cost per Area to Construction \" as an always run measure to the simulation workflow with the following inputs:  Table 2.1: Add Cost per Area to Construction   \n   Argument \n   Value \n   Note     \n   Choose a Construction to Add Costs For. \n   Window A \n   Name of the construction to add costs to.   \n   Remove Existing Costs? \n   True \n   Remove any costs previously associated with this construction.   \n   Material and Installation Costs for Construction per Area Used ($/ft^2). \n   8 \n   Estimated cost for the baseline windows.   \n   Demolition Costs for Construction per Area Used ($/ft^2). \n   2 \n   Demolition cost is $3/ft^2 cost to remove windows minus $1/ft^2 residual value.   \n   Years Until Costs Start (whole years). \n   5 \n   Baseline windows would be replaced in year 5.   \n   Demolition Costs Occur During Initial Construction? \n   True \n   Will have to remove current windows when installing new ones.   \n   Expected Life (whole years). \n   30 \n   The windows are expected to last for 30 years after installation. This will be beyond the analysis period.   \n   O   M Costs for Construction per Area Used ($/ft^2). \n   0 \n   No maintenance costs are modeled.   \n   O   M Frequency (whole years). \n   1 \n   Maintenance costs would be incurred annually (if there were any).     The final task is to add the \" Replace Exterior Window Constructions \" measure using the \"Window B\" construction instead of \"Window A\". This measure will identify the alternate window construction to use as well as the cost for this construction. In this case the existing windows will be demolished and new windows installed in year 0. Therefore, the demolition costs for this measure will be set to match the costs modeled for the baseline case:  Table 2.2: Replace Exterior Window Constructions   \n   Argument \n   Value \n   Note     \n   Pick a Window Construction From the Model to Replace Existing Window Constructions. \n   Window B \n   Name of the alternate construction to use.   \n   Change Fixed Windows? \n   True \n   Use this alternate construction for exterior fixed windows.   \n   Change Operable Windows? \n   True \n   Use this alternate construction for exterior operable windows.   \n   Remove Existing Costs? \n   True \n   Remove any costs previously associated with this construction.   \n   Material and Installation Costs for Construction per Area Used ($/ft^2). \n   10 \n   Estimated cost for the alternate windows.   \n   Demolition Costs for Construction per Area Used ($/ft^2). \n   2 \n   Same as baseline case.   \n   Years Until Costs Start (whole years). \n   0 \n   Construction costs will be incurred in year 0.   \n   Demolition Costs Occur During Initial Construction? \n   True \n   Will have to remove current windows when installing new ones.   \n   Expected Life (whole years). \n   30 \n   The windows are expected to last for 30 years after installation. This will be beyond the analysis period.   \n   O   M Costs for Construction per Area Used ($/ft^2). \n   0 \n   No maintenance costs are modeled.   \n   O   M Frequency (whole years). \n   1 \n   Maintenance costs should be incurred annually (if there were any).", 
            "title": "Inputs:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#output_1", 
            "text": "Assuming that there are 100 ft^2 of exterior windows in the model the following cash flows will be generated for the two cases:  Table 2.3: Baseline window cash flows (constant dollar)   \n   Year \n   0 \n   1 \n   2 \n   3 \n   4 \n   5 \n   6 \n   7 \n   8 \n   9 \n   10     \n   Mat   Inst \n   \n   \n   \n   \n   \n   $800 \n   \n   \n   \n   \n     \n   Demo \n   \n   \n   \n   \n   \n   $200 \n   \n   \n   \n   \n     \n   O M \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Total \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $1000 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0     Table 2.4: High performance window cash flows (constant dollar)   \n   Year \n   0 \n   1 \n   2 \n   3 \n   4 \n   5 \n   6 \n   7 \n   8 \n   9 \n   10     \n   Mat   Inst \n   $1000 \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Demo \n   $200 \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   O M \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Total \n   $1200 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0", 
            "title": "Output:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#case-3-reduce-lighting-load-by-percentage-new-construction", 
            "text": "", 
            "title": "Case 3 - Reduce Lighting Load By Percentage, New Construction"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#narrative_2", 
            "text": "In this example a new construction project is considering replacing CFL light bulbs in the baseline model with higher performance LED light bulbs. The lighting change is partially motivated because the LED light bulbs have an expected life of 15 years instead of 3 years for the CFLs. The energy modeler has created a baseline model which includes a lighting definition (\"Baseline Lighting\") that represents the baseline CFLs. The energy modeler estimates that lighting power can be reduced by 30% by moving from CFL to LED light bulbs. The energy modeler has received inputs from the cost estimator that CFL light bulbs will cost around $4/ft^2 and the LED bulbs will cost around $10/ft^2 (150% more than the CFL price). Because the cost for fixtures will be the same in both the baseline and alternate cases, the energy modeler will not include costs for fixtures in the models.", 
            "title": "Narrative:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#inputs_2", 
            "text": "As in case 1, the energy modeler sets the analysis period length using \" Set Lifecycle Cost Parameters \" as an always run measure and the utility rates using \" Xcel EDA Tariff Selectionand Model Setup \" as an always run measure. The next task is to add the cost of the CFL bulbs in the baseline model. This cost will be input by adding \" Add Cost per Floor Area to Lights \" as an always run measure to the simulation workflow with the following inputs:\n\u2003\nTable 3.1: Add Cost per Floor Area to Lights   \n   Argument \n   Value \n   Note     \n   Choose a Watt per Area Lights Definition to Add Costs for. \n   Baseline Lighting \n   Name of the lighting definition to add costs to.   \n   Remove Existing Costs? \n   True \n   Remove any costs previously associated with this definition.   \n   Material and Installation Costs for Definition per Floor Area ($/ft^2). \n   4 \n   Estimated cost for the baseline lights.   \n   Demolition Costs for Definition per Floor Area ($/ft^2). \n   0 \n   No demolition costs related to removing light bulbs.   \n   Years Until Costs Start (whole years). \n   0 \n   Construction costs will be incurred in year 0.   \n   Demolition Costs Occur During Initial Construction? \n   False \n   No demolition required for new lights.   \n   Expected Life (whole years). \n   4 \n   The CFL bulbs are expected to last four years.   \n   O   M Costs for Definition per Floor Area Used ($/ft^2). \n   0 \n   No maintenance costs are modeled.   \n   O   M Frequency (whole years). \n   1 \n   Maintenance costs would be incurred annually (if there were any).     The final task is to add the \" Reduce Lighting Loads by Percentage \" measure to reduce the lighting power by 30%. This measure is formulated to take arguments in the form of percentage changes from the baseline rather than absolute values:  Table 3.2: Reduce Lighting Loads by Percentage   \n   Argument \n   Value \n   Note     \n   Apply the Measure to a Specific Space Type or to the Entire Model. \n   Entire Building \n   Reduce lighting across the entire building.   \n   Lighting Power Reduction Percentage (%). \n   30 \n   Reduce lighting power by 30%.   \n   Increase in Material and Installation Cost for Lighting per Floor Area (%). \n   150 \n   Percentage cost increase for the LED bulbs, from $4/ft^2 to $10/ft^2.   \n   Increase in Demolition Costs for Lighting per Floor Area (%). \n   0 \n   No increase in demolition costs related to removing light bulbs.   \n   Years Until Costs Start (whole years). \n   0 \n   Construction costs will be incurred in year 0.   \n   Demolition Costs Occur During Initial Construction? \n   False \n   No demolition required for new construction.   \n   Expected Life (whole years). \n   15 \n   The LED bulbs are expected to last 15 years. This will be beyond the analysis period.   \n   Increase in O   M Costs for Lighting per Floor Area (%). \n   0 \n   No maintenance costs are modeled.   \n   O   M Frequency (whole years). \n   1 \n   Maintenance costs should be incurred annually (if there were any).", 
            "title": "Inputs:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#output_2", 
            "text": "Assuming that there are 100 ft^2 of lighted floor area in the model the following cash flows will be generated for the two cases:  Table 3.3: Baseline CFL bulb cash flows (constant dollar)   \n   Year \n   0 \n   1 \n   2 \n   3 \n   4 \n   5 \n   6 \n   7 \n   8 \n   9 \n   10     \n   Mat   Inst \n   $400 \n   \n   \n   \n   $400 \n   \n   \n   \n   $400 \n   \n     \n   Demo \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   O M \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Total \n   $400 \n   $0 \n   $0 \n   $0 \n   $400 \n   $0 \n   $0 \n   $0 \n   $400 \n   $0 \n   $0     Table 3.4: High performance LED bulb cash flows (constant dollar)   \n   Year \n   0 \n   1 \n   2 \n   3 \n   4 \n   5 \n   6 \n   7 \n   8 \n   9 \n   10     \n   Mat   Inst \n   $1000 \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Demo \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   O M \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Total \n   $1000 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0", 
            "title": "Output:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#case-4-reduce-lighting-loads-by-percentage-retrofit", 
            "text": "", 
            "title": "Case 4 - Reduce Lighting Loads By Percentage, Retrofit"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#narrative_3", 
            "text": "In this example a retrofit project is considering replacing CFL light bulbs in the baseline model with higher performance linear florescent lighting. The lighting retrofit is more expensive because it requires removing old fixtures and installing new ones. The energy modeler has created a baseline model which includes a lighting definition (\"Baseline Lighting\") that represents the baseline CFLs. The energy modeler estimates that lighting power can be reduced by 30% by moving from CFL to linear florescent lighting. The energy modeler has received inputs from the cost estimator that CFL light bulbs will cost around $4/ft^2 and have an expected life of 4 years. Removing the current lighting fixtures will cost around $10/ft^2. The new fixtures will cost around $20/ft^2 (400% more than the baseline fixtures) and the linear florescent light bulbs will cost around $3/ft^2 with an expected life of 5 years.", 
            "title": "Narrative:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#inputs_3", 
            "text": "As in case 1, the energy modeler sets the analysis period length using \" Set Lifecycle Cost Parameters \" as an always run measure and the utility rates using \" Xcel EDA Tariff Selection and Model Setup \" as an always run measure. The next task is to add the cost of the CFL bulbs in the baseline model. Because the alternate case involves removing and installing lighting fixtures, the modeler chooses to include the cost of light bulbs in the maintenance category in this example. This cost will be input by adding \" Add Cost per Floor Area to Lights \" as an always run measure to the simulation workflow with the following inputs:  Table 4.1: Add Cost per Floor Area to Lights   \n   Argument \n   Value \n   Note     \n   Choose a Watt per Area Lights Definition to Add Costs For. \n   Baseline Lighting \n   Name of the lighting definition to add costs to.   \n   Remove Existing Costs? \n   True \n   Remove any costs previously associated with this definition.   \n   Material and Installation Costs for Definition per Floor Area ($/ft^2). \n   5 \n   If the analysis period was long enough this would be incurred.   \n   Demolition Costs for Definition  per Floor Area ($/ft^2). \n   10 \n   If the analysis period was long enough this would be incurred.   \n   Years Until Costs Start (whole years). \n   15 \n   In the baseline case the existing lighting fixtures will not be replaced during the analysis period. The bulbs will be changed as an O M cost.   \n   Demolition Costs Occur During Initial Construction? \n   True \n   Demolition costs will be incurred when construction occurs.   \n   Expected Life (whole years). \n   20 \n   The expected life of the light fixtures themselves is assumed to be 20 years.   \n   O   M Costs for Definition  per Floor Area ($/ft^2). \n   4 \n   Replacing CFL bulbs costs around $4/ft^2.   \n   O   M Frequency (whole years). \n   4 \n   CFL bulbs must be replaced every four years.     The final task is to add the \" Reduce Lighting Loads By Percentage \" measure to reduce the lighting power by 30%. This measure will also add costs for removing old fixtures and installing new ones:  Table 4.2: Reduce Lighting Loads By Percentage   \n   Argument \n   Value \n   Note     \n   Apply the Measure to a Specific Space Type or to the Entire Model. \n   Entire Building \n   Reduce lighting across the entire building.   \n   Lighting Power Reduction Percentage (%). \n   30 \n   Reduce lighting power by 30%.   \n   Increase in Material and Installation Cost for Lighting per Floor Area (%). \n   400 \n   Percentage cost increase of new lighting fixtures relative to existing fixtures.   \n   Increase in Demolition Cost for Lighting per Floor Area (%). \n   0 \n   Percentage cost increase of demolition relative to existing fixtures.   \n   Years Until Costs Start (whole years). \n   0 \n   Construction costs will be incurred in year 0.   \n   Demolition Costs Occur During Initial Construction? \n   True \n   Demolition costs will be incurred when construction occurs.   \n   Expected Life (whole years). \n   20 \n   The expected life of the light fixtures themselves is assumed to be 20 years.   \n   Increase in O   M Costs for Lighting per Floor Area (%). \n   -25 \n   Percentage cost increase of linear fluorescents over CFL bulbs, $3/ft^2-$4/ft^2.   \n   O   M Frequency (whole years). \n   5 \n   Linear fluorescents bulbs must be replaced every five years.", 
            "title": "Inputs:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#output_3", 
            "text": "Assuming that there are 100 ft^2 of lighted floor area in the model the following cash flows will be generated for the two cases:  Table 4.3: Baseline CFL bulb cash flows (constant dollar)   \n   Year \n   0 \n   1 \n   2 \n   3 \n   4 \n   5 \n   6 \n   7 \n   8 \n   9 \n   10     \n   Mat   Inst \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Demo \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   O M \n   $400 \n   \n   \n   \n   $400 \n   \n   \n   \n   $400 \n   \n     \n   Total \n   $400 \n   $0 \n   $0 \n   $0 \n   $400 \n   $0 \n   $0 \n   $0 \n   $400 \n   $0 \n   $0     Table 4.4: High performance LED bulb cash flows (constant dollar)   \n   Year \n   0 \n   1 \n   2 \n   3 \n   4 \n   5 \n   6 \n   7 \n   8 \n   9 \n   10     \n   Mat   Inst \n   $2000 \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Demo \n   $1000 \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   O M \n   $300 \n   \n   \n   \n   \n   $300 \n   \n   \n   \n   \n   $300   \n   Total \n   $3300 \n   $0 \n   $0 \n   $0 \n   $0 \n   $300 \n   $0 \n   $0 \n   $0 \n   $0 \n   $300", 
            "title": "Output:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#case-5-add-daylight-sensors-new-construction", 
            "text": "", 
            "title": "Case 5 - Add Daylight Sensors, New Construction"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#narrative_4", 
            "text": "In this final example a new construction project is considering adding daylight controls to the baseline model. The energy modeler has created a baseline model which does not include daylight controls. The energy modeler has received inputs from the cost estimator that daylight controls will cost around $500/sensor and have an expected life of 30 years.", 
            "title": "Narrative:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#inputs_4", 
            "text": "As in case 1, the energy modeler sets the analysis period length using \" Set Lifecycle Cost Parameters \" as an always run measure and the utility rates using \" Xcel EDA Tariff Selection and Model Setup \" as an always run measure. However, because there are no daylight control sensors in the baseline model there is no need to apply an always run measure to add costs to the baseline model. The final task is to add the \" Add Daylight Sensors \" measure. This measure will add daylight controls to each office space as well as their associated costs:\n\u2003\nTable 5.1: Add Daylight Sensors   \n   Argument \n   Value \n   Note     \n   Space Type to Add Daylight Sensors in. \n   Office \n   Add daylight controls to the spaces of Office Space Type   \n   Daylighting Setpoint (fc). \n   45 \n   Daylighting control setpoint of 45 footcandles.   \n   Daylighting Control Type. \n   Continuous/Off \n   Daylight controls are allowed to dim lights as well as turn them off.   \n   Daylighting Minimum Input Power Fraction (min=0 max=0.6). \n   0.3 \n   Minimum power fraction the daylight controls may dim the lights to.   \n   Daylighting Minimum Light Output Fraction (min=0 max=0.6). \n   0.2 \n   Light output fraction at minimum dimming level.   \n   Sensor Height (inches). \n   30 \n   Place daylight control sensors at 30 inch workplane.   \n   Material and Installation Costs per Sensor ($). \n   500 \n   Cost to install daylight controls   \n   Demolition Costs per Sensor ($). \n   100 \n   Demolition costs would be incurred in analysis period was long enough.   \n   Years Until Costs Start (whole years). \n   0 \n   Construction costs will be incurred in year 0.   \n   Demolition Costs Occur During Initial Construction? \n   False \n   No demolition required for new construction.   \n   Expected Life (whole years). \n   30 \n   The expected life of the daylight controls is assumed to be 30 years.   \n   O   M Costs per Sensor ($). \n   0 \n   No maintenance costs are modeled.   \n   \n   \n     \n   O   M Frequency (whole years). \n   1 \n   Maintenance costs would be incurred annually (if there were any).", 
            "title": "Inputs:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#output_4", 
            "text": "Assuming that there are 10 \"Office\" spaces in the model the following cash flows will be generated for the two cases:  Table 5.2: Baseline cash flows (constant dollar)   \n   Year \n   0 \n   1 \n   2 \n   3 \n   4 \n   5 \n   6 \n   7 \n   8 \n   9 \n   10     \n   Mat   Inst \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Demo \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   O M \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Total \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0     Table 5.3: High performance daylight controls cash flows (constant dollar)   \n   Year \n   0 \n   1 \n   2 \n   3 \n   4 \n   5 \n   6 \n   7 \n   8 \n   9 \n   10     \n   Mat   Inst \n   $5000 \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Demo \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   O M \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Total \n   $5000 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0 \n   $0", 
            "title": "Output:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#draft-examples-to-serve-as-design-guide-for-hvac-component-costing", 
            "text": "", 
            "title": "Draft examples to serve as design guide for HVAC component costing"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#case-6-increase-cop-of-two-speed-dx-cooling-units-new-construction", 
            "text": "", 
            "title": "Case 6 - Increase COP of Two Speed DX Cooling Units, New Construction"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#narrative_5", 
            "text": "In this example a new construction project is considering two options for two speed dx cooling units; one with the code minimum COP of 3 and a higher performance one with a COP of 4.5. The energy modeler has created a baseline model which includes un-costed two speed dx cooling units. The energy modeler has received inputs from the cost estimator that each baseline DX units will cost around $2000 and the each high performance one will cost around $2500. There are 4 affected units.", 
            "title": "Narrative:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#inputs_5", 
            "text": "As in case 1, the energy modeler sets the analysis period length using \" Set Lifecycle Cost Parameters \" as an always run measure and the utility rates using \" Xcel EDA Tariff Selection and Model Setup \" as an always run measure. The next task is to add the cost to the appropriate HVAC components in the baseline model. In this case only two of the three loops are being inspected for two speed DX cooling units. This cost will be input by adding \" Add Cost HVAC Components \" as an always run measure to the simulation workflow with the following inputs:  Table 6.1: Add Cost to baseline two speed DX units.   \n   Argument \n   Value \n   Note     \n   Component Type to Add Cost to. \n   OS:Coil:Cooling:Dx: \n     \n   TwoSpeed \n   List of all types of HVAC components (or we can make multiple measures each with sub-set of objects) \n     \n   Search in Loop 1 \n   True \n   The measure will build up list of loops   \n   and the modeler can choose which ones to search for two speed dx units in. \n   \n     \n   Search in Loop 2 \n   True \n     \n   Search in Loop 3 \n   False \n     \n   Remove Existing Costs? \n   True \n   Remove any cost associated with the affected components   \n   Material and Installation Costs for Building ($). \n   2000 \n   Estimated cost each for the baseline two speed dx cooling units   \n   Demolition Costs for Construction per Area Used ($/ft^2). \n   200 \n   This field will not impact results since it will be 30 years before it is incurred.   \n   Years Until Costs Start (whole years). \n   0 \n   Construction costs will be incurred in year 0.   \n   Demolition Costs Occur During Initial Construction? \n   False \n   No demolition required for new construction.   \n   Expected Life (whole years). \n   30 \n   The windows are expected to last for 30 years after installation. This will be beyond the analysis period.   \n   O   M Costs for Construction per Area Used ($/ft^2). \n   50 \n   No maintenance costs are modeled.   \n   O   M Frequency (whole years). \n   1 \n   Maintenance costs would be incurred annually (if there were any).     In this example there is just one baseline cost added , but often the baseline model will contain multiple components with different lifecycle cost cycles that need to be modeled. This can be accomplished by adding multiple always run measures; with each one addressing a particular component or component type in the baseline model. The final task is to add the \" Set COP for Two Speed DX Cooling Units \". This measure will adjust the COP of the selected units:  Table 6.2: Set COP for two speed DX Cooling Units   \n   Argument \n   Value \n   Note     \n   Rated High Speed COP \n   4.5 \n     \n   Rated Low Speed COP \n   4.5 \n     \n   Component Type to Add Cost to. \n   OS:Coil:Cooling:Dx: \n     \n   TwoSpeed \n   List of all types of HVAC components (or we can make multiple measures each with sub-set of objects) \n     \n   Search in Loop 1 \n   True \n   The measure will build up list of loops   \n   and the modeler can choose which ones to search for two speed dx units in. \n   \n     \n   Search in Loop 2 \n   True \n     \n   Search in Loop 3 \n   False \n     \n   Remove Existing Costs? \n   True \n   Remove any cost associated with the affected components   \n   Material and Installation Costs for Building ($). \n   2500 \n   Estimated cost each for the baseline two speed dx cooling units   \n   Demolition Costs for Construction per Area Used ($/ft^2). \n   300 \n   This field will not impact results since it will be 30 years before it is incurred.   \n   Years Until Costs Start (whole years). \n   0 \n   Construction costs will be incurred in year 0.   \n   Demolition Costs Occur During Initial Construction? \n   False \n   No demolition required for new construction.   \n   Expected Life (whole years). \n   30 \n   The windows are expected to last for 30 years after installation. This will be beyond the analysis period.   \n   O   M Costs for Construction per Area Used ($/ft^2). \n   50 \n   No maintenance costs are modeled.   \n   O   M Frequency (whole years). \n   3 \n   Maintenance costs would be incurred annually (if there were any).", 
            "title": "Inputs:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#output_5", 
            "text": "Assuming that there are 4 affected DX units the following cash flows will be generated for the two cases:  Table 6.3: Baseline DX units cash flows (constant dollar)   \n   Year \n   0 \n   1 \n   2 \n   3 \n   4 \n   5 \n   6 \n   7 \n   8 \n   9 \n   10     \n   Mat   Inst \n   $8000 \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Demo \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   O M \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200   \n   Total \n   $8200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200     Table 6.4: High performance DX units cash flows (constant dollar)   \n   Year \n   0 \n   1 \n   2 \n   3 \n   4 \n   5 \n   6 \n   7 \n   8 \n   9 \n   10     \n   Mat   Inst \n   $10000 \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Demo \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   O M \n   $200 \n   \n   \n   $200 \n   \n   \n   $200 \n   \n   \n   $200 \n     \n   Total \n   $10200 \n   $0 \n   $0 \n   $200 \n   $0 \n   $0 \n   $200 \n   $0 \n   $0 \n   $200 \n   $0", 
            "title": "Output:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#case-7-increase-cop-of-two-speed-dx-cooling-units-retrofit", 
            "text": "", 
            "title": "Case 7 - Increase COP of Two Speed DX Cooling Units, Retrofit"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#narrative_6", 
            "text": "In this example a retrofit project is considering replacing the two speed dx cooling units in part of the building. The baseline units have a code minimum COP of 3. The retrofit would add units 4.5. The energy modeler has created a baseline model which includes un-costed two speed dx cooling units. The energy modeler has received inputs from the cost estimator that each high performance two speed DX units will cost $2500. There are 4 affected units.", 
            "title": "Narrative:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#inputs_6", 
            "text": "As in case 1, the energy modeler sets the analysis period length using \" Set Lifecycle Cost Parameters \" as an always run measure and the utility rates using \" Xcel EDA Tariff Selection and Model Setup \" as an always run measure. The next task is to add the cost to the appropriate HVAC components in the baseline model. In this case only two of the three loops are being inspected for two speed DX cooling units. This cost will be input by adding \" Add Cost HVAC Components \" as an always run measure to the simulation workflow with the following inputs:  Table 7.1: Add Cost to baseline two speed DX units.   \n   Argument \n   Value \n   Note     \n   Component Type to Add Cost to. \n   OS:Coil:Cooling:Dx: \n     \n   TwoSpeed \n   List of all types of HVAC components (or we can make multiple measures each with sub-set of objects) \n     \n   Search in Loop 1 \n   True \n   The measure will build up list of loops   \n   and the modeler can choose which ones to search for two speed dx units in. \n   \n     \n   Search in Loop 2 \n   True \n     \n   Search in Loop 3 \n   False \n     \n   Remove Existing Costs? \n   True \n   Remove any cost associated with the affected components   \n   Material and Installation Costs for Building ($). \n   2000 \n   Estimated cost each for the baseline two speed dx cooling units   \n   Demolition Costs for Construction per Area Used ($/ft^2). \n   200 \n   This field will not impact results since it will be 30 years before it is incurred.   \n   Years Until Costs Start (whole years). \n   5 \n   Construction costs will be incurred in year 0.   \n   Demolition Costs Occur During Initial Construction? \n   False \n   No demolition required for new construction.   \n   Expected Life (whole years). \n   30 \n   The windows are expected to last for 30 years after installation. This will be beyond the analysis period.   \n   O   M Costs for Construction per Area Used ($/ft^2). \n   50 \n   No maintenance costs are modeled.   \n   O   M Frequency (whole years). \n   1 \n   Maintenance costs would be incurred annually (if there were any).     In this example there is just one baseline cost added , but often the baseline model will contain multiple components with different lifecycle cost cycles that need to be modeled. This can be accomplished by adding multiple always run measures; with each one addressing a particular component or component type in the baseline model. The final task is to add the \"Set COP for Two Speed DX Cooling Units\". This measure will adjust the COP of the selected units:  Table 7.2: Set COP for two speed DX Cooling Units   \n   Argument \n   Value \n   Note     \n   Rated High Speed COP \n   4.5 \n     \n   Rated Low Speed COP \n   4.5 \n     \n   Component Type to Add Cost to. \n   OS:Coil:Cooling:Dx: \n     \n   TwoSpeed \n   List of all types of HVAC components (or we can make multiple measures each with sub-set of objects) \n     \n   Search in Loop 1 \n   True \n   The measure will build up list of loops   \n   and the modeler can choose which ones to search for two speed dx units in. \n   \n     \n   Search in Loop 2 \n   True \n     \n   Search in Loop 3 \n   False \n     \n   Remove Existing Costs? \n   True \n   Remove any cost associated with the affected components   \n   Material and Installation Costs for Building ($). \n   2500 \n   Estimated cost each for the baseline two speed dx cooling units   \n   Demolition Costs for Construction per Area Used ($/ft^2). \n   300 \n   This field will not impact results since it will be 30 years before it is incurred.   \n   Years Until Costs Start (whole years). \n   0 \n   Construction costs will be incurred in year 0.   \n   Demolition Costs Occur During Initial Construction? \n   True \n   No demolition required for new construction.   \n   Expected Life (whole years). \n   30 \n   The windows are expected to last for 30 years after installation. This will be beyond the analysis period.   \n   O   M Costs for Construction per Area Used ($/ft^2). \n   50 \n   No maintenance costs are modeled.   \n   O   M Frequency (whole years). \n   3 \n   Maintenance costs would be incurred annually (if there were any).", 
            "title": "Inputs:"
        }, 
        {
            "location": "/tutorials/life_cycle_costing_examples/#output_6", 
            "text": "Assuming that there are 4 affected DX units the following cash flows will be generated for the two cases:  Table 6.3: Baseline DX units cash flows (constant dollar)   \n   Year \n   0 \n   1 \n   2 \n   3 \n   4 \n   5 \n   6 \n   7 \n   8 \n   9 \n   10     \n   Mat   Inst \n   \n   \n   \n   \n   \n   $8000 \n   \n   \n   \n   \n     \n   Demo \n   \n   \n   \n   \n   \n   $200 \n   \n   \n   \n   \n     \n   O M \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200   \n   Total \n   $200 \n   $200 \n   $200 \n   $200 \n   $200 \n   $8400 \n   $200 \n   $200 \n   $200 \n   $200 \n   $200     Table 6.4: High performance DX units cash flows (constant dollar)   \n   Year \n   0 \n   1 \n   2 \n   3 \n   4 \n   5 \n   6 \n   7 \n   8 \n   9 \n   10     \n   Mat   Inst \n   $10000 \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   Demo \n   $200 \n   \n   \n   \n   \n   \n   \n   \n   \n   \n     \n   O M \n   $200 \n   \n   \n   $200 \n   \n   \n   $200 \n   \n   \n   $200 \n     \n   Total \n   $10400 \n   $0 \n   $0 \n   $200 \n   $0 \n   $0 \n   $200 \n   $0 \n   $0 \n   $200 \n   $0", 
            "title": "Output:"
        }, 
        {
            "location": "/tutorials/tutorial_cbecc_materials/", 
            "text": "CBECC Materials and Constructions\n\n\n\nCBECC-Com (California Building Energy Code Compliance)\n is an open source project that may be used by Code Agencies, Rating Authorities, or Utility Programs in the development of energy codes, standards, or efficiency programs. Architects, engineers, and energy consultants may also use these tools to demonstrate compliance with energy codes or beyond-code programs. OpenStudio models can be exported to the SDD format which may then be imported into CBECC-Com.  OpenStudio 1.6.0 added the ability to specify material and construction properties needed by CBECC-Com, these are then exported to SDD and imported into CBECC-Com.  This tutorial will explain how to set these properties using the OpenStudio application so they can be properly imported into CBECC-Com.  Future versions of OpenStudio will add additional information to the SDD export with the ultimate goal of being able to run an exported SDD from OpenStudio through the CBECC-Com interface with no manual modification.\n\n\nMaterial Measure Tags\n\n\nIn order to apply energy codes to a SDD model, CBECC-Com requires information that is not used by energy simulation software.  OpenStudio has augmented several model objects with measure tags that can be used to add this information to an OpenStudio model.  These tags allow you to specify information like composite framing material or the standards identifier used to reference a particular material.  This information is not used when running an energy simulation using OpenStudio.  However, this information is included in the SDD export and used by CBECC-Com to apply energy codes.  These tags may also be used by measures that operate on the OpenStudio model.  OpenStudio measure tags are populated with a set of suggested values that are compatible with CBECC-Com.  You may choose to enter any value that you wish, but only the suggested values will work with CBECC-Com.  The set of measure tags available for a Material object is shown in the figure below.  In this example, the material is tagged as belonging to the standards category Roofing.  CBECC-Com provides a set of identifiers for materials in this category, choosing one of these identifiers specifies the material in CBECC-Com's library.  The performance values used in the OpenStudio model are not translated to SDD, only the standards category and identifier as this is all that CBECC-Com allows for compliance analysis.\n\n\n\n\nThe Composite material standards category behaves slightly differently.  For this category, you are prompted to specify framing material, configuration, depth, size, and cavity insulation for your composite layer.  CBECC-Com uses these properties to model your composite material, there is no standards identifier for composite materials.  \n\n\n\n\nWhen modeling fenestration, no standards information is needed at the material level as this is input at the construction level in CBECC-Com.  The only performance data which is translated from OpenStudio material objects to SDD are the u-factor, solar heat gain coefficient, and visible transmittance properties of Simple Glazing System Window objects.\n\n\n\n\nConstruction Measure Tags\n\n\nAt the construction level, the only measure tags available for opaque constructions are the intended surface type and the construction type, the values for construction type are  populated based on the intended surface type.\n\n\n\n\nFor fenestration constructions that consist of a single layer of a Simple Glazing System Window, the performance values in the Simple Glazing System Window will be used.  However, if you have specified your window constructions in a different way (e.g. layer by layer) you can use the fenestration measure tags to specify data (e.g. number of panes, frame type) that CBECC-Com will use to look up default performance information for compliance analysis.\n\n\n\n\nLoad the CECTemplate library\n\n\nIt is possible to assign measure tags to your own materials.  However, there is no guarantee that the performance values in your materials will match those used by CBECC-Com for compliance analysis.  Therefore, OpenStudio has been distributed with a library of materials which include both performance data and the measure tags used by CBECC-Com.  This library file may be loaded in the OpenStudio application using \"File-\nLoad Library\" and selecting CECTemplate.osm.  Currently, this library contains only materials, it does not include constructions or constructions sets, these may be added at a later date.", 
            "title": "CBECC Materials and Constructions"
        }, 
        {
            "location": "/tutorials/tutorial_cbecc_materials/#material-measure-tags", 
            "text": "In order to apply energy codes to a SDD model, CBECC-Com requires information that is not used by energy simulation software.  OpenStudio has augmented several model objects with measure tags that can be used to add this information to an OpenStudio model.  These tags allow you to specify information like composite framing material or the standards identifier used to reference a particular material.  This information is not used when running an energy simulation using OpenStudio.  However, this information is included in the SDD export and used by CBECC-Com to apply energy codes.  These tags may also be used by measures that operate on the OpenStudio model.  OpenStudio measure tags are populated with a set of suggested values that are compatible with CBECC-Com.  You may choose to enter any value that you wish, but only the suggested values will work with CBECC-Com.  The set of measure tags available for a Material object is shown in the figure below.  In this example, the material is tagged as belonging to the standards category Roofing.  CBECC-Com provides a set of identifiers for materials in this category, choosing one of these identifiers specifies the material in CBECC-Com's library.  The performance values used in the OpenStudio model are not translated to SDD, only the standards category and identifier as this is all that CBECC-Com allows for compliance analysis.   The Composite material standards category behaves slightly differently.  For this category, you are prompted to specify framing material, configuration, depth, size, and cavity insulation for your composite layer.  CBECC-Com uses these properties to model your composite material, there is no standards identifier for composite materials.     When modeling fenestration, no standards information is needed at the material level as this is input at the construction level in CBECC-Com.  The only performance data which is translated from OpenStudio material objects to SDD are the u-factor, solar heat gain coefficient, and visible transmittance properties of Simple Glazing System Window objects.", 
            "title": "Material Measure Tags"
        }, 
        {
            "location": "/tutorials/tutorial_cbecc_materials/#construction-measure-tags", 
            "text": "At the construction level, the only measure tags available for opaque constructions are the intended surface type and the construction type, the values for construction type are  populated based on the intended surface type.   For fenestration constructions that consist of a single layer of a Simple Glazing System Window, the performance values in the Simple Glazing System Window will be used.  However, if you have specified your window constructions in a different way (e.g. layer by layer) you can use the fenestration measure tags to specify data (e.g. number of panes, frame type) that CBECC-Com will use to look up default performance information for compliance analysis.", 
            "title": "Construction Measure Tags"
        }, 
        {
            "location": "/tutorials/tutorial_cbecc_materials/#load-the-cectemplate-library", 
            "text": "It is possible to assign measure tags to your own materials.  However, there is no guarantee that the performance values in your materials will match those used by CBECC-Com for compliance analysis.  Therefore, OpenStudio has been distributed with a library of materials which include both performance data and the measure tags used by CBECC-Com.  This library file may be loaded in the OpenStudio application using \"File- Load Library\" and selecting CECTemplate.osm.  Currently, this library contains only materials, it does not include constructions or constructions sets, these may be added at a later date.", 
            "title": "Load the CECTemplate library"
        }, 
        {
            "location": "/tutorials/tutorial_glhepro/", 
            "text": "Vertical Ground Heat Exchanger sizing with GLHEPro\n\n\n\nThis tutorial explains how to size a vertical ground heat exchanger with OpenStudio and an external program called GLHEPro. First, you make a model with water-to-water heat pumps and use district heating and district cooling objects to determine the loads on the heat-pump loop. You run this model and use a Measure to export these loads in a format that GLHEPro will accept. Then you run GLHEPro and use another Measure to bring the G-Function from GLHEPro back into your model, replacing the district heating and district cooling objects on the loop.\n\n\nSetting up the initial model\n\n\n\n\n\n\nCreate a model with water-source heat pumps (WSHPs) in each zone you want to condition. WSHPs are Zone HVAC Equipment found on the ThermalZones tab.\n\n\n\n\n\n\n\n\nCreate a plant loop with a pump, a district heating plant and a district cooling plant on one branch, and a bypass pipe on a separate branch. This loop will be the heat source/heat sink for the WSHPs.\n\n\n\n\n\n\n\n\nSet up the heating and cooling setpoint for the Heat Pump Loop. The district heating and cooling objects will run to keep the water in the heat pump loop between these bounds. The loads on the district heating and district cooling objects will represent the capacity needed in the GSHX.\n\n\n\n\nPut a SetpointManager:Scheduled onto the outlet of the district cooling object. Edit the temperature schedule of that setpoint manager to be the desired max temperature of the GSHX water (95F, for example). Make sure to edit both the default days and the design day schedules.\n\n\nPut a SetpointManager:Scheduled onto the outlet of the district heating object. Edit the temperature schedule of that setpoint manager to be the desired min temperature of the GSHX water (55F, for example). Make sure to edit both the default days and the design day schedules.\n\n\nPut a SetpointManager:Scheduled onto the supply outlet node of the loop. Edit the temperature schedule of that setpoint manager to be the desired max temperature of the GSHX water (95F, for example). You can pick the same schedule used for the district cooling object's setpoint manager.\n\n\n\n\n\n\n\n\n\n\nSet the sizing parameters of the Heat Pump Loop\n\n\n\n\nThe loop type should be \"Condenser.\"\n\n\nThe loop design outlet temp should be the desired max of the GSHX water (95F here).\n\n\nThe loop design temperature difference should be reasonable for a GSHX (9 delta-F here).\n\n\n\n\n\n\n\n\n\n\nConnect the heating and cooling coils for each WSHP to the Heat Pump Loop.\n\n\n\n\nClick on the Thermal Zones tab\n\n\nClick on the WSHP\n\n\nClick the chain link icons in the upper right\n\n\nCheck the box to select the Heat Pump Loop.\n\n\n\n\n\n\n\n\n\n\nAdding Measure to export loads for GLHEPro\n\n\n\n\n\n\nOn the Measures tab, click \"Find Measures on BCL\"\n\n\n\n\n\n\n\n\nSearch for \"GLHEPro\"\n\n\n\n\nDownload the following 3 Measures:\n\n\n\"GLHEPro Setup Export Loads for Ground Heat Exchanger Sizing\"\n\n\n\"GLHEPro Export Loads for Ground Heat Exchanger Sizing\"\n\n\n\"GLHEProGFunctionImport\"\n\n\n\n\n\n\nOn the Measures tab, drag 2 of the 3 Measures into the model:\n\n\n\"GLHEPro Setup Export Loads for Ground Heat Exchanger Sizing\" as OS Measure\n\n\n\n\n\"GLHEPro Export Loads for Ground Heat Exchanger Sizing\" as Reporting Measure\n\n\n\n\n\n\n\n\n\n\n\n\nRun the simulation and import loads into GLHEPro\n\n\n\n\nGo to the Run tab \n Run \n wait for simulation to finish\n\n\n\n\nGo to the Results tab and select the report called \"Export Loads to GLHEPro\" in the dropdown\n\n\n\n\nThis report explains the next steps for importing the loads into GLHEPro. It also shows the hourly load for the district heating and district cooling objects. Important Note: the hourly graph only shows up if you are using OpenStudio 1.4.1 or higher (or if you are using OpenStudio 1.4.0 built with Ruby 2.0). Even if the hourly graph doesn't show up, the loads have still been exported for GLHEPro, you just don't get to visualize them.\n\n\n\n\n\n\nFind the GLHEPro .gt1 file. In a file browser, navigate to the run directory for your model, for example: \nC:\\GLHEPro\\gshp_model\\run\\6-UserScript-0\\mergedjob-0\n\n\nYou should see the files below:\n\n\n\n\nThe *.gt1 files are the monthly loads for GLHEPro import.\n\n\nThe *.csv files are the hourly loads (same as seen in graph).\n\n\nThe report.html is the same report seen in the OS Application.\n\n\n\n\n\n\n\n\nOpen GLHEPro, which can be downloaded (not free) from here: \nhttp://www.hvac.okstate.edu/glhepro/\n\n\n\n\nIn the top menu, click Loads \n Read Heat Pump Loads and select the \"Monthly Loads.gt1\" file.\n\n\n\n\nDouble-check that these numbers make sense, then click OK.\n\n\n\n\n\n\n\n\nRun GLHEPro to size bore field\n\n\n\n\nFill in the GLHEPro inputs. See GLHEPro manual for more information.\n\n\nIn the top menu, click Action \n Perform Sizing to size the loop.\n\n\nIn the top menu, click Action \n G Function Creator.\n\n\n\n\nFill out the inputs as desired, then click \"Select G-func Print Format\" and check \"Print EnergyPlus IDF File.\n\n\n\n\n\n\n\n\nSelect a place on your computer and save the IDF file.\n\n\n\n\n\n\nImport bore field sizing information and G Function into OpenStudio\n\n\n\n\nReturn to your OpenStudio model.\n\n\nSave a copy in case you want to change loads and re-size GSHX later.\n\n\nIn the top menu, click Components \n Measures \n Apply Measure Now\n\n\nUnder HVAC \n Whole System, find \"GLHEPro GFunction Import\"\n\n\n\n\nClick this Measure and fill in the inputs: path to GFunction.IDF, heat pump loop.\n\n\n\n\n\n\n\n\nClick Apply Measure. You should see information about district heating and district cooling objects being removed from the heat pump loop, and information about a GLHX being added. If so, click Accept Changes.\n\n\n\n\n\n\n\n\nOn the HVAC tab, inspect the changes. You should see a GSHX in place of the district heating and district cooling objects.\n\n\n\n\n\n\n\n\nRe-run your simulation. If you get lots of warnings/errors about the plant loop temperatures being too cold or too hot, your bore field wasn't sized correctly. Go back into GLHEPro, correct any mistakes, then try again. Also, if you changed your loads significantly, you'll need to re-run the model with district heating and district cooling and repeat the GLHEPro process.", 
            "title": "Vertical Ground Heat Exchanger sizing with GLHEPro"
        }, 
        {
            "location": "/tutorials/tutorial_glhepro/#setting-up-the-initial-model", 
            "text": "Create a model with water-source heat pumps (WSHPs) in each zone you want to condition. WSHPs are Zone HVAC Equipment found on the ThermalZones tab.     Create a plant loop with a pump, a district heating plant and a district cooling plant on one branch, and a bypass pipe on a separate branch. This loop will be the heat source/heat sink for the WSHPs.     Set up the heating and cooling setpoint for the Heat Pump Loop. The district heating and cooling objects will run to keep the water in the heat pump loop between these bounds. The loads on the district heating and district cooling objects will represent the capacity needed in the GSHX.   Put a SetpointManager:Scheduled onto the outlet of the district cooling object. Edit the temperature schedule of that setpoint manager to be the desired max temperature of the GSHX water (95F, for example). Make sure to edit both the default days and the design day schedules.  Put a SetpointManager:Scheduled onto the outlet of the district heating object. Edit the temperature schedule of that setpoint manager to be the desired min temperature of the GSHX water (55F, for example). Make sure to edit both the default days and the design day schedules.  Put a SetpointManager:Scheduled onto the supply outlet node of the loop. Edit the temperature schedule of that setpoint manager to be the desired max temperature of the GSHX water (95F, for example). You can pick the same schedule used for the district cooling object's setpoint manager.      Set the sizing parameters of the Heat Pump Loop   The loop type should be \"Condenser.\"  The loop design outlet temp should be the desired max of the GSHX water (95F here).  The loop design temperature difference should be reasonable for a GSHX (9 delta-F here).      Connect the heating and cooling coils for each WSHP to the Heat Pump Loop.   Click on the Thermal Zones tab  Click on the WSHP  Click the chain link icons in the upper right  Check the box to select the Heat Pump Loop.", 
            "title": "Setting up the initial model"
        }, 
        {
            "location": "/tutorials/tutorial_glhepro/#adding-measure-to-export-loads-for-glhepro", 
            "text": "On the Measures tab, click \"Find Measures on BCL\"     Search for \"GLHEPro\"   Download the following 3 Measures:  \"GLHEPro Setup Export Loads for Ground Heat Exchanger Sizing\"  \"GLHEPro Export Loads for Ground Heat Exchanger Sizing\"  \"GLHEProGFunctionImport\"    On the Measures tab, drag 2 of the 3 Measures into the model:  \"GLHEPro Setup Export Loads for Ground Heat Exchanger Sizing\" as OS Measure   \"GLHEPro Export Loads for Ground Heat Exchanger Sizing\" as Reporting Measure", 
            "title": "Adding Measure to export loads for GLHEPro"
        }, 
        {
            "location": "/tutorials/tutorial_glhepro/#run-the-simulation-and-import-loads-into-glhepro", 
            "text": "Go to the Run tab   Run   wait for simulation to finish   Go to the Results tab and select the report called \"Export Loads to GLHEPro\" in the dropdown   This report explains the next steps for importing the loads into GLHEPro. It also shows the hourly load for the district heating and district cooling objects. Important Note: the hourly graph only shows up if you are using OpenStudio 1.4.1 or higher (or if you are using OpenStudio 1.4.0 built with Ruby 2.0). Even if the hourly graph doesn't show up, the loads have still been exported for GLHEPro, you just don't get to visualize them.    Find the GLHEPro .gt1 file. In a file browser, navigate to the run directory for your model, for example:  C:\\GLHEPro\\gshp_model\\run\\6-UserScript-0\\mergedjob-0  You should see the files below:   The *.gt1 files are the monthly loads for GLHEPro import.  The *.csv files are the hourly loads (same as seen in graph).  The report.html is the same report seen in the OS Application.     Open GLHEPro, which can be downloaded (not free) from here:  http://www.hvac.okstate.edu/glhepro/   In the top menu, click Loads   Read Heat Pump Loads and select the \"Monthly Loads.gt1\" file.   Double-check that these numbers make sense, then click OK.", 
            "title": "Run the simulation and import loads into GLHEPro"
        }, 
        {
            "location": "/tutorials/tutorial_glhepro/#run-glhepro-to-size-bore-field", 
            "text": "Fill in the GLHEPro inputs. See GLHEPro manual for more information.  In the top menu, click Action   Perform Sizing to size the loop.  In the top menu, click Action   G Function Creator.   Fill out the inputs as desired, then click \"Select G-func Print Format\" and check \"Print EnergyPlus IDF File.     Select a place on your computer and save the IDF file.", 
            "title": "Run GLHEPro to size bore field"
        }, 
        {
            "location": "/tutorials/tutorial_glhepro/#import-bore-field-sizing-information-and-g-function-into-openstudio", 
            "text": "Return to your OpenStudio model.  Save a copy in case you want to change loads and re-size GSHX later.  In the top menu, click Components   Measures   Apply Measure Now  Under HVAC   Whole System, find \"GLHEPro GFunction Import\"   Click this Measure and fill in the inputs: path to GFunction.IDF, heat pump loop.     Click Apply Measure. You should see information about district heating and district cooling objects being removed from the heat pump loop, and information about a GLHX being added. If so, click Accept Changes.     On the HVAC tab, inspect the changes. You should see a GSHX in place of the district heating and district cooling objects.     Re-run your simulation. If you get lots of warnings/errors about the plant loop temperatures being too cold or too hot, your bore field wasn't sized correctly. Go back into GLHEPro, correct any mistakes, then try again. Also, if you changed your loads significantly, you'll need to re-run the model with district heating and district cooling and repeat the GLHEPro process.", 
            "title": "Import bore field sizing information and G Function into OpenStudio"
        }, 
        {
            "location": "/tutorials/tutorial_ifcimport/", 
            "text": "Import IFC\n\n\n\nThis tutorial explains how to import an IFC file into OpenStudio using BIMserver.  This functionality is available in OpenStudio 1.7.1 and higher.  This functionality was developed by Chong Zhou as part of the \nBIMDataHub\n project at the \nConsortium for Building Energy Innovation\n.\n\n\nInstall BIMserver\n\n\nStand-alone version\n\n\nMost users will want to install a stand-alone version of BIMserver on their local computer.\n\n\n\n\n\n\nInstall the Java JDK. Java 1.8 is not well supported yet, Java JDK 1.7 can be \ndownloaded here\n, for Windows you will want the file named jdk-7u75-windows-x64.exe. \n\n\n\n\n\n\nDownload \nBIMserver 1.3.4\n from the BIMserver Github site.\n\n\n\n\n\n\nAssuming this is your first installation, create a new folder in your system, e.g. C:\\BIMserver. Copy the downloaded bimserver-[version].jar file into the above folder. Note: avoid the creating BIMserver subfolder under C:\\Program Files or C:\\Program Files (x86). \n\n\n\n\n\n\nDouble-click on the bimserver-[version].jar file to execute it. Enter the path to your JVM install, e.g. C:\\Program Files\\Java\\jdk1.7.0_75.  Press the start button to start the BIMserver. Wait for BIMserver to expand all the files and configure itself and until the phrase \"Server started successfully\" appears. Click the Stop button to stop the BIMserver.\n\n\n\n\n\n\n\n\n\n\n\n\nDownload the \nlatest OSMSerializer\n and copy the OSMSerializer.jar file into the plugins subfolder under the bimserver-[version] folder.\n\n\n\n\n\n\nClick the Start button to restart BIMserver. Once the BIMserver has restarted, click Launch Browser.\n\n\n\n\n\n\nSetup the BIMserver for the first time by clicking the \u201cthe admin page\u201d in the browser. \n\n\n\n\n\n\n\n\n\n\nEnter the Administrator username (e.g. 'Administrator'), email (e.g. 'admin@bimserver.org'), and password (e.g. 'admin') then click Setup.\n\n\n\n\n\n\n\n\nThe BIMserver is now correctly setup and running. You can close the browser and continue to use OpenStudio to import IFC file.  BIMserver needs to be running during the IFC import, you can stop BIMserver when you are done by pressing the Stop button. \n\n\n\n\nServer Version\n\n\nIf you want to host BIMserver on a public website you should install the server version. \n\n\n\n\nDownload the \n.war version\n of the BIMserver and host it with TOMCAT on a unix server. Please refer to the \nBIMserver site\n on Github for more assistance. \n\n\n\n\nUsing the Import IFC Utility in OpenStudio\n\n\nLaunch the Import IFC Utility.\n\n\n\n\nClick File -\n Import -\n IFC.\n\n\n\n\n\n\n\n\nYou will need to specify the BIMserver settings information the first time running the Import IFC Utility in OpenStudio. Please enter the BIMserver Address (e.g. http://127.0.0.1), Port (e.g. 8082), Username (e.g 'admin@bimserver.org'), and Password (e.g. 'admin') for the BIMserver and click Okay. \n\n\n\n\n\n\n\n\nThe left part of the Import IFC Utility lists all BIM projects hosted on BIMserver. The right part displays a list of IFC revisions of a project.\n\n\n\n\n\n\nCreate a new Project\n\n\n\n\nCreate a new project by clicking the New Project Button and specify the name for the project e.g. \u201cTest\u201d.\n\n\n\n\n\n\n\n\nYou will see the newly created project on the left. It contains Project ID on the BIMserver and the Project Name separated by colon. \n\n\n\n\n\n\n\n\nClick the \u201c\n\u201d button to view the current IFC files hosted on BIMserver. It will not display anything for now since we have not yet checked in the IFC file.\n\n\n\n\nCheck in IFC File\n\n\n\n\nAfter selecting a project and clicked \u201c\n\u201d button, click the Check in IFC File button and select an IFC file to upload to BIMserver.\n\n\n\n\n\n\n\n\nNow you can click the \u201c\n\u201d button again to refresh the IFC revision list. Select the newly added file. It displays the IFC Revision ID and the time when the IFC file is uploaded, separated by colon.\n\n\n\n\nDownload OSM File\n\n\n\n\nClick the Download OSM File button to start importing this IFC file into OpenStudio. It will ask you to save your current OpenStudio model and restart the application with the newly imported model.\n\n\n\n\nChange the BIMserver Settings\n\n\n\n\nIf you want to change the BIMserver Settings, please simply click the Setting button and type in the new settings. It will automatically access the new BIMserver after you click OK.\n\n\n\n\nScope of our current IFC importation Utility\n\n\nWe provide an IFC to OSM transformation utility, using BIMserver as a middle-ware. Our goal is to assist energy simulation modelers to import the building geometry from IFC. The current effort requires energy simulation modelers to create the building geometry from scratch. Our current utility can partially automate this process by importing important building elements into OpenStudio from IFC. We will try to fully automate this process in the future.\n\n\nCurrently supported IFC elements\n\n\n\n\nSpaces will be transformed as OSM Spaces.\n\n\nStraight and non-curved Walls will be transformed into OSM Surface. Outside boundary conditions are preserved for walls.\n\n\nCeilings and Floors will be transformed into OSM Surface. Outside boundary conditions are not preserved.\n\n\nDoors and Windows will be transformed into OSM SubSurface. The relationship to their corresponding Walls will be preserved. Outside boundary conditions are not preserved.\n\n\n\n\nIFC elements under development\n\n\n\n\nSloped Wall and Roofs (Currently, the sloped walls cannot be transformed correctly. We are solving this problem now but follow the steps in 3.3 to modify your model).\n\n\nOutside boundary conditions of ceilings, floors, doors, and windows.\n\n\nCurtain Walls.\n\n\n\n\nWhat to do if you have some elements being transformed incorrectly or not transformed\n\n\n\n\nSave the imported OSM model in OpenStudio by clicking File -\n Save As in the menu.\n\n\nUse SketchUp with the OpenStudio plug-in to open the new OSM file. \n\n\nModify the building geometry in SketchUp. For more information, please refer to \nthis tutorial\n.", 
            "title": "BIMserver Import IFC"
        }, 
        {
            "location": "/tutorials/tutorial_ifcimport/#install-bimserver", 
            "text": "", 
            "title": "Install BIMserver"
        }, 
        {
            "location": "/tutorials/tutorial_ifcimport/#stand-alone-version", 
            "text": "Most users will want to install a stand-alone version of BIMserver on their local computer.    Install the Java JDK. Java 1.8 is not well supported yet, Java JDK 1.7 can be  downloaded here , for Windows you will want the file named jdk-7u75-windows-x64.exe.     Download  BIMserver 1.3.4  from the BIMserver Github site.    Assuming this is your first installation, create a new folder in your system, e.g. C:\\BIMserver. Copy the downloaded bimserver-[version].jar file into the above folder. Note: avoid the creating BIMserver subfolder under C:\\Program Files or C:\\Program Files (x86).     Double-click on the bimserver-[version].jar file to execute it. Enter the path to your JVM install, e.g. C:\\Program Files\\Java\\jdk1.7.0_75.  Press the start button to start the BIMserver. Wait for BIMserver to expand all the files and configure itself and until the phrase \"Server started successfully\" appears. Click the Stop button to stop the BIMserver.       Download the  latest OSMSerializer  and copy the OSMSerializer.jar file into the plugins subfolder under the bimserver-[version] folder.    Click the Start button to restart BIMserver. Once the BIMserver has restarted, click Launch Browser.    Setup the BIMserver for the first time by clicking the \u201cthe admin page\u201d in the browser.       Enter the Administrator username (e.g. 'Administrator'), email (e.g. 'admin@bimserver.org'), and password (e.g. 'admin') then click Setup.     The BIMserver is now correctly setup and running. You can close the browser and continue to use OpenStudio to import IFC file.  BIMserver needs to be running during the IFC import, you can stop BIMserver when you are done by pressing the Stop button.", 
            "title": "Stand-alone version"
        }, 
        {
            "location": "/tutorials/tutorial_ifcimport/#server-version", 
            "text": "If you want to host BIMserver on a public website you should install the server version.    Download the  .war version  of the BIMserver and host it with TOMCAT on a unix server. Please refer to the  BIMserver site  on Github for more assistance.", 
            "title": "Server Version"
        }, 
        {
            "location": "/tutorials/tutorial_ifcimport/#using-the-import-ifc-utility-in-openstudio", 
            "text": "", 
            "title": "Using the Import IFC Utility in OpenStudio"
        }, 
        {
            "location": "/tutorials/tutorial_ifcimport/#launch-the-import-ifc-utility", 
            "text": "Click File -  Import -  IFC.     You will need to specify the BIMserver settings information the first time running the Import IFC Utility in OpenStudio. Please enter the BIMserver Address (e.g. http://127.0.0.1), Port (e.g. 8082), Username (e.g 'admin@bimserver.org'), and Password (e.g. 'admin') for the BIMserver and click Okay.      The left part of the Import IFC Utility lists all BIM projects hosted on BIMserver. The right part displays a list of IFC revisions of a project.", 
            "title": "Launch the Import IFC Utility."
        }, 
        {
            "location": "/tutorials/tutorial_ifcimport/#create-a-new-project", 
            "text": "Create a new project by clicking the New Project Button and specify the name for the project e.g. \u201cTest\u201d.     You will see the newly created project on the left. It contains Project ID on the BIMserver and the Project Name separated by colon.      Click the \u201c \u201d button to view the current IFC files hosted on BIMserver. It will not display anything for now since we have not yet checked in the IFC file.", 
            "title": "Create a new Project"
        }, 
        {
            "location": "/tutorials/tutorial_ifcimport/#check-in-ifc-file", 
            "text": "After selecting a project and clicked \u201c \u201d button, click the Check in IFC File button and select an IFC file to upload to BIMserver.     Now you can click the \u201c \u201d button again to refresh the IFC revision list. Select the newly added file. It displays the IFC Revision ID and the time when the IFC file is uploaded, separated by colon.", 
            "title": "Check in IFC File"
        }, 
        {
            "location": "/tutorials/tutorial_ifcimport/#download-osm-file", 
            "text": "Click the Download OSM File button to start importing this IFC file into OpenStudio. It will ask you to save your current OpenStudio model and restart the application with the newly imported model.", 
            "title": "Download OSM File"
        }, 
        {
            "location": "/tutorials/tutorial_ifcimport/#change-the-bimserver-settings", 
            "text": "If you want to change the BIMserver Settings, please simply click the Setting button and type in the new settings. It will automatically access the new BIMserver after you click OK.", 
            "title": "Change the BIMserver Settings"
        }, 
        {
            "location": "/tutorials/tutorial_ifcimport/#scope-of-our-current-ifc-importation-utility", 
            "text": "We provide an IFC to OSM transformation utility, using BIMserver as a middle-ware. Our goal is to assist energy simulation modelers to import the building geometry from IFC. The current effort requires energy simulation modelers to create the building geometry from scratch. Our current utility can partially automate this process by importing important building elements into OpenStudio from IFC. We will try to fully automate this process in the future.", 
            "title": "Scope of our current IFC importation Utility"
        }, 
        {
            "location": "/tutorials/tutorial_ifcimport/#currently-supported-ifc-elements", 
            "text": "Spaces will be transformed as OSM Spaces.  Straight and non-curved Walls will be transformed into OSM Surface. Outside boundary conditions are preserved for walls.  Ceilings and Floors will be transformed into OSM Surface. Outside boundary conditions are not preserved.  Doors and Windows will be transformed into OSM SubSurface. The relationship to their corresponding Walls will be preserved. Outside boundary conditions are not preserved.", 
            "title": "Currently supported IFC elements"
        }, 
        {
            "location": "/tutorials/tutorial_ifcimport/#ifc-elements-under-development", 
            "text": "Sloped Wall and Roofs (Currently, the sloped walls cannot be transformed correctly. We are solving this problem now but follow the steps in 3.3 to modify your model).  Outside boundary conditions of ceilings, floors, doors, and windows.  Curtain Walls.", 
            "title": "IFC elements under development"
        }, 
        {
            "location": "/tutorials/tutorial_ifcimport/#what-to-do-if-you-have-some-elements-being-transformed-incorrectly-or-not-transformed", 
            "text": "Save the imported OSM model in OpenStudio by clicking File -  Save As in the menu.  Use SketchUp with the OpenStudio plug-in to open the new OSM file.   Modify the building geometry in SketchUp. For more information, please refer to  this tutorial .", 
            "title": "What to do if you have some elements being transformed incorrectly or not transformed"
        }, 
        {
            "location": "/tutorials/tutorial_shadingcontrols/", 
            "text": "Shading Controls\n\n\n\nThis tutorial explains how to add shading controls to an OpenStudio model to study the impact of blinds, shades, switchable glazing, or other shading controls.\n\n\nCreate Shading Controls\n\n\nCreate a model with fenestration. Apply a fenestration construction which represents the unshaded state to your windows. Create either a fenestration construction representing the shaded state or a shading material such as a blind, screen, or shade. If you choose a shading material it will be added to the unshaded construction when the window is in the shaded state. Run the \"Add Shading Controls\" user script to create a shading control object.\n\n\n\n\nChoose either your shaded construction or shading material, you cannot choose both.\n\n\n\n\nApply Shading Controls\n\n\nSelect the windows that you want to apply the shading controls to. This can be done individually or by using the surface search feature. Run the \"Apply Shading Controls\" user script to apply a shading control object to the selected windows.\n\n\n\n\nEdit Shading Controls\n\n\nEdit details related to the shading control object (e.g. control algorithm) using the OpenStudio inspector.\n\n\n\n\nYou can also assign shading control objects to individual surfaces using the OpenStudio inspector.", 
            "title": "Shading Controls"
        }, 
        {
            "location": "/tutorials/tutorial_shadingcontrols/#create-shading-controls", 
            "text": "Create a model with fenestration. Apply a fenestration construction which represents the unshaded state to your windows. Create either a fenestration construction representing the shaded state or a shading material such as a blind, screen, or shade. If you choose a shading material it will be added to the unshaded construction when the window is in the shaded state. Run the \"Add Shading Controls\" user script to create a shading control object.   Choose either your shaded construction or shading material, you cannot choose both.", 
            "title": "Create Shading Controls"
        }, 
        {
            "location": "/tutorials/tutorial_shadingcontrols/#apply-shading-controls", 
            "text": "Select the windows that you want to apply the shading controls to. This can be done individually or by using the surface search feature. Run the \"Apply Shading Controls\" user script to apply a shading control object to the selected windows.", 
            "title": "Apply Shading Controls"
        }, 
        {
            "location": "/tutorials/tutorial_shadingcontrols/#edit-shading-controls", 
            "text": "Edit details related to the shading control object (e.g. control algorithm) using the OpenStudio inspector.   You can also assign shading control objects to individual surfaces using the OpenStudio inspector.", 
            "title": "Edit Shading Controls"
        }, 
        {
            "location": "/tutorials/tutorial_windowproperty_frameanddivider/", 
            "text": "Window Property Frame and Divider\n\n\n\nThis tutorial explains how to use the OS:WindowProperty:FrameAndDivider object to study the impact of window frame and divider materials as well as the impact of sill and outside reveal surfaces. The OS:WindowProperty:FrameAndDivider object closely follows the EnergyPlus \nWindowProperty:FrameAndDivider\n object with only one difference.  The OpenStudio object includes one additional field, Outside Reveal Depth, which the EnergyPlus object does not.  During translation from OpenStudio to EnergyPlus, OS:SubSurface vertices are offset by this amount in order to model the additional shading provided by the outside reveal surface.\n\n\nCreate Window Property Frame and Divider\n\n\nWindow Property Frame and Divider objects can be created using the object inspector in the OpenStudio SketchUp plug-in. The inspector can also be used to edit any properties of the Window Property Frame and Divider object.\n\n\n\n\nImporting IDF files from the WINDOW program\n\n\nIDF files exported from \nWINDOW\n containing Window Property Frame and Divider objects can be imported using the OpenStudio SketchUp plug-in via Extensions\nOpenStudio\nImport\nImport EnergyPlus Idf Constructions.  WINDOW exports two IDF files, a \n_Avg.idf and a \n_Spec.idf file. Only the \n_Avg.idf file may be imported as the MaterialProperty:GlazingSpectralData object in the \n_Spec.idf file is not yet supported by OpenStudio.\n\n\n\n\nApply Window Property Frame and Divider\n\n\nOnce you have a Window Property Frame and Divider object in your model, you can apply it to sub surfaces using the object inspector.  Only exterior windows and glass doors can reference Window Property Frame and Divider objects.\n\n\n\n\nThe Window Property Frame and Divider object can also be applied to all valid sub surfaces in the current selection using the OpenStudio user script \"Set Window Property Frame and Divider\" under \"Alter or Add Model Elements.", 
            "title": "Window Property Frame and Divider"
        }, 
        {
            "location": "/tutorials/tutorial_windowproperty_frameanddivider/#create-window-property-frame-and-divider", 
            "text": "Window Property Frame and Divider objects can be created using the object inspector in the OpenStudio SketchUp plug-in. The inspector can also be used to edit any properties of the Window Property Frame and Divider object.", 
            "title": "Create Window Property Frame and Divider"
        }, 
        {
            "location": "/tutorials/tutorial_windowproperty_frameanddivider/#importing-idf-files-from-the-window-program", 
            "text": "IDF files exported from  WINDOW  containing Window Property Frame and Divider objects can be imported using the OpenStudio SketchUp plug-in via Extensions OpenStudio Import Import EnergyPlus Idf Constructions.  WINDOW exports two IDF files, a  _Avg.idf and a  _Spec.idf file. Only the  _Avg.idf file may be imported as the MaterialProperty:GlazingSpectralData object in the  _Spec.idf file is not yet supported by OpenStudio.", 
            "title": "Importing IDF files from the WINDOW program"
        }, 
        {
            "location": "/tutorials/tutorial_windowproperty_frameanddivider/#apply-window-property-frame-and-divider", 
            "text": "Once you have a Window Property Frame and Divider object in your model, you can apply it to sub surfaces using the object inspector.  Only exterior windows and glass doors can reference Window Property Frame and Divider objects.   The Window Property Frame and Divider object can also be applied to all valid sub surfaces in the current selection using the OpenStudio user script \"Set Window Property Frame and Divider\" under \"Alter or Add Model Elements.", 
            "title": "Apply Window Property Frame and Divider"
        }, 
        {
            "location": "/tutorials/tutorial_virtual_pulse/", 
            "text": "VirtualPULSE\n\n\n\nVirtualPULSE\n is a holistic web based simulation platform for building energy, urban solar radiation \n urban airlflow. It uses OpenStudio under the hood to assist in generating models and running simulations. The website offers a full workflow on its own, but you can also take resulting models out as OSM models for further inspection, modeling, and simulation.\n\n\nVirtualPULSE Workflow Video\n\n\n\n\n\nAbove: This video made by the Building Science Group and University of Maryland, walks you through the virtualPULSE web based workflow.\n\n\nBring Models Into OpenStudio.\n\n\nYou can start your workflow using the \nVirtualPULSE\n workflow, and then bring in models from selected buildings into OpenStudio. At that point they are like any other OpenStudio models.\n\n\n\n\nAbove: VirtualPULSE model viewed in OpenStudio.", 
            "title": "VirtualPULSE"
        }, 
        {
            "location": "/tutorials/tutorial_virtual_pulse/#virtualpulse-workflow-video", 
            "text": "Above: This video made by the Building Science Group and University of Maryland, walks you through the virtualPULSE web based workflow.", 
            "title": "VirtualPULSE Workflow Video"
        }, 
        {
            "location": "/tutorials/tutorial_virtual_pulse/#bring-models-into-openstudio", 
            "text": "You can start your workflow using the  VirtualPULSE  workflow, and then bring in models from selected buildings into OpenStudio. At that point they are like any other OpenStudio models.   Above: VirtualPULSE model viewed in OpenStudio.", 
            "title": "Bring Models Into OpenStudio."
        }, 
        {
            "location": "/reference/openstudio_application_interface/", 
            "text": "OpenStudio Application Interface Guide\n\n\n\nThis section contains an overview of the OpenStudio Application.\n\n\nThe \nOpenStudio Quick Start Guide\n provides an introduction to the interface for the Plug-in and the OpenStudio application. It also provides guidance on the basic workflow.\n\n\n\n\n\nAbove: This video demonstrates the new Spaces tab and the redesigned Facilities and Site tab from version 1.9.0.\n\n\n\n\nOverview\n\n\nThe tabs on the left that move vertically are ordered in a suggested workflow.\n\n\n\n\nAbove: Overview of the OpenStudio Application Interface.\n\n\n\n\nSub-tabs\n\n\nSub-tabs are designed to move from more general categories on the left to more specific on the right. On the constructions tab, the sub-tabs are \"Construction Sets\", \"Constructions\", and \"Materials.\" If you are not building your own materials and constructions you may not need to go to the \"Materials\" sub-tab.\n\n\n\n\nRight Panel\n\n\nThe right panel provides access to items in the library or in your model, as well as the ability to edit some of these items.\n\n\n\n\n\n\n\"My Model\"\n displays items that are part of your model already.\n\n\n\n\n\n\n\"Library\"\n includes components and measures that come with the application or are downloaded from the Building Component Library (BCL)\n\n\n\n\n\n\n\"Edit\"\n allows you to select certain components and edit the settings for that component. It is used in the HVAC tab to edit component settings, assign thermal zones to loops, and to add plenums.\n\n\n\n\n\n\n\n\nAbove: Edit settings on some objects in the edit panel.\n\n\n\n\nLeft Panel Bottom\n\n\n Add New Item allows the user to add a new component to the interface. Sometimes the type of item added depends on the selection in the left panel.\n\n\n\n\nAbove: On the \"Utility Bill\" sub-tab, select the type of bill you want to add before hitting the add button.\n\n\n Duplicate a selected object with this button.\n\n\n Delete a selected object with this button.\n\n\n Purge unused objects with this button.\n\n\n\n\nAdding Objects from the Library\n\n\nTo add items from the library, select the \"Library\" tab on the right panel and find the item you want to add to the model. Select that item and drag and drop it in into the correct drop zone. Drop zones are surrounded by a dotted line and are programmed to only accept items that will work for that field.\n\n\n\n\nAbove: Drag-and-drop items from the library to the drop zones in the model.\n\n\n\n\nAbove: Drag-and-drop example on the HVAC service hot water.\n\n\n\n\nGrid View and Multi-edit: Thermal Zones, Space Types, and Refrigeration\n\n\nEarlier releases have included a grid view for the refrigeration section in the HVAC tab. Now you can edit thermal zones and space types in a grid view. This makes it easier to view all your zones and space types at once and compare settings. By selecting the buttons across the top you can select the fields you would like to see and edit.\n\n\n\n\nAbove: The grid view provides a spreadsheet style layout. Click on the image to view a larger version.\n\n\n\n\n\nView this video to see multi-edit in action.\n\n\nDrag components and schedules into the grid view. Most items on the grid can be inspected in the right panel \"Edit\" tab, except schedules. A yellow highlight indicates the item you have selected in the grid. When you start editing the item in the \"Edit\" tab the highlight will disappear indicating that the focus is now on editing the item.\n\n\nSelect the check box in the top of the column if you want to view that column in the \"Custom\" category.\n\n\nDrag components and schedules into the grid view. Most items on the grid can be inspected in the right panel \"Edit\" tab, except schedules. To edit or view schedules go to the schedules tab. Use the delete in the \"Edit\" panel to remove a component from the grid.\n\n\nClick on the color box on the \"General\" button to change the rendering color of the space type. This will change the rendering color in the SketchUp Plug-in as well.\n\n\nYou can use the Multi-edit feature on individual columns (as shown below) or on whole rows by selecting a row or rows and hitting the \"2X\" button on the bottom left to duplicate those rows.\n\n\n\n\nAbove: The steps for using the multi-edit function are shown above.\n\n\n\n\nAbove: Above: Hit the \"Loads\" button to edit and view loads by space type. Click on the name of a component and select the  \"Edit\" panel on the right to inspect and edit that item.\n\n\n\n\nFile Menu\n\n\nIf you launch the OpenStudio application from the SketchUp Plug-in, your open file will automatically open in the application. But to save the file or open a new file, select file open from the menu.\n\n\nWhen you save an OSM model in the OpenStudio Application or the SketchUp Plug-in a folder is saved next to the OSM file. This folder contains external resources such as the weather file, scripts, and simulation results.\n\n\nLoad Library is also a very important feature. This allows you to load building component libraries for specific building types. These libraries are the same as those used in the SketchUp Plug-in templates.\n\n\n\n\nAbove: The file menu contains the new, open, revert, save, import, and export functions.\n\n\n\n\nPreferences Menu\n\n\nThe Units menu lets you switch between SI and IP units. This affects both input fields and output data on the results tab. It does not currently affect standard EnergyPlus output files.\n\n\nThe SketchUp Plug-in has access to this as well under \nPlugins-\nOpenStudio-\nPreferences\n.\n\n\nScan for Tools will look for Radiance, Ruby, and EnergyPlus installations. If you install those applications prior to installing OpenStudio this shouldn't be necessary.\n\n\n\n\nAbove: The preferences menu contains the units, measure directory, and tool location options.\n\n\n\n\nComponents \n Measures Menu\n\n\n\n\nAbove: This menu item allows you to run one measure on you model.\n\n\nApply Measures Now\n\n\nYou can apply measures to your model at any time by going to the \"Components and Measures\" menu and selecting the \"Apply Measures Now\" option.\n\n\nThis will open a dialog that allows you to choose a measure from the library to apply, go to BCL to find a measure to apply, or even write your own measure and test it.\n\n\nOnce you select a measure you may edit the measure inputs on the right side of the dialog. Hit apply measure to start.\n\n\n\n\nAbove: This menu item allows you to run one measure on your model.\n\n\nFind Measures and Find Components\n\n\nThe BCL window gives you access to an online repository of building energy modeling data called the Building Component Library. Although you can access the BCL website on its own, OpenStudio has integrated access to the BCL from within the application. You can access this through the \"Components \n Measures\" menu.\n\n\nThe first time you open this window you will be prompted for an API key, unless you have already used BCL functionality in the SketchUp Plug-in. \nInstructions for finding your API Key\n are in the \"Getting Started\" section.\n\n\n\n\nAbove: This window gives you access to the online BCL to download measures or components.", 
            "title": "OpenStudio Application Interface Guide"
        }, 
        {
            "location": "/reference/openstudio_application_interface/#overview", 
            "text": "The tabs on the left that move vertically are ordered in a suggested workflow.   Above: Overview of the OpenStudio Application Interface.", 
            "title": "Overview"
        }, 
        {
            "location": "/reference/openstudio_application_interface/#sub-tabs", 
            "text": "Sub-tabs are designed to move from more general categories on the left to more specific on the right. On the constructions tab, the sub-tabs are \"Construction Sets\", \"Constructions\", and \"Materials.\" If you are not building your own materials and constructions you may not need to go to the \"Materials\" sub-tab.", 
            "title": "Sub-tabs"
        }, 
        {
            "location": "/reference/openstudio_application_interface/#right-panel", 
            "text": "The right panel provides access to items in the library or in your model, as well as the ability to edit some of these items.    \"My Model\"  displays items that are part of your model already.    \"Library\"  includes components and measures that come with the application or are downloaded from the Building Component Library (BCL)    \"Edit\"  allows you to select certain components and edit the settings for that component. It is used in the HVAC tab to edit component settings, assign thermal zones to loops, and to add plenums.     Above: Edit settings on some objects in the edit panel.", 
            "title": "Right Panel"
        }, 
        {
            "location": "/reference/openstudio_application_interface/#left-panel-bottom", 
            "text": "Add New Item allows the user to add a new component to the interface. Sometimes the type of item added depends on the selection in the left panel.   Above: On the \"Utility Bill\" sub-tab, select the type of bill you want to add before hitting the add button.   Duplicate a selected object with this button.   Delete a selected object with this button.   Purge unused objects with this button.", 
            "title": "Left Panel Bottom"
        }, 
        {
            "location": "/reference/openstudio_application_interface/#adding-objects-from-the-library", 
            "text": "To add items from the library, select the \"Library\" tab on the right panel and find the item you want to add to the model. Select that item and drag and drop it in into the correct drop zone. Drop zones are surrounded by a dotted line and are programmed to only accept items that will work for that field.   Above: Drag-and-drop items from the library to the drop zones in the model.   Above: Drag-and-drop example on the HVAC service hot water.", 
            "title": "Adding Objects from the Library"
        }, 
        {
            "location": "/reference/openstudio_application_interface/#grid-view-and-multi-edit-thermal-zones-space-types-and-refrigeration", 
            "text": "Earlier releases have included a grid view for the refrigeration section in the HVAC tab. Now you can edit thermal zones and space types in a grid view. This makes it easier to view all your zones and space types at once and compare settings. By selecting the buttons across the top you can select the fields you would like to see and edit.   Above: The grid view provides a spreadsheet style layout. Click on the image to view a larger version.   View this video to see multi-edit in action.  Drag components and schedules into the grid view. Most items on the grid can be inspected in the right panel \"Edit\" tab, except schedules. A yellow highlight indicates the item you have selected in the grid. When you start editing the item in the \"Edit\" tab the highlight will disappear indicating that the focus is now on editing the item.  Select the check box in the top of the column if you want to view that column in the \"Custom\" category.  Drag components and schedules into the grid view. Most items on the grid can be inspected in the right panel \"Edit\" tab, except schedules. To edit or view schedules go to the schedules tab. Use the delete in the \"Edit\" panel to remove a component from the grid.  Click on the color box on the \"General\" button to change the rendering color of the space type. This will change the rendering color in the SketchUp Plug-in as well.  You can use the Multi-edit feature on individual columns (as shown below) or on whole rows by selecting a row or rows and hitting the \"2X\" button on the bottom left to duplicate those rows.   Above: The steps for using the multi-edit function are shown above.   Above: Above: Hit the \"Loads\" button to edit and view loads by space type. Click on the name of a component and select the  \"Edit\" panel on the right to inspect and edit that item.", 
            "title": "Grid View and Multi-edit: Thermal Zones, Space Types, and Refrigeration"
        }, 
        {
            "location": "/reference/openstudio_application_interface/#file-menu", 
            "text": "If you launch the OpenStudio application from the SketchUp Plug-in, your open file will automatically open in the application. But to save the file or open a new file, select file open from the menu.  When you save an OSM model in the OpenStudio Application or the SketchUp Plug-in a folder is saved next to the OSM file. This folder contains external resources such as the weather file, scripts, and simulation results.  Load Library is also a very important feature. This allows you to load building component libraries for specific building types. These libraries are the same as those used in the SketchUp Plug-in templates.   Above: The file menu contains the new, open, revert, save, import, and export functions.", 
            "title": "File Menu"
        }, 
        {
            "location": "/reference/openstudio_application_interface/#preferences-menu", 
            "text": "The Units menu lets you switch between SI and IP units. This affects both input fields and output data on the results tab. It does not currently affect standard EnergyPlus output files.  The SketchUp Plug-in has access to this as well under  Plugins- OpenStudio- Preferences .  Scan for Tools will look for Radiance, Ruby, and EnergyPlus installations. If you install those applications prior to installing OpenStudio this shouldn't be necessary.   Above: The preferences menu contains the units, measure directory, and tool location options.", 
            "title": "Preferences Menu"
        }, 
        {
            "location": "/reference/openstudio_application_interface/#components-measures-menu", 
            "text": "Above: This menu item allows you to run one measure on you model.", 
            "title": "Components &amp; Measures Menu"
        }, 
        {
            "location": "/reference/openstudio_application_interface/#apply-measures-now", 
            "text": "You can apply measures to your model at any time by going to the \"Components and Measures\" menu and selecting the \"Apply Measures Now\" option.  This will open a dialog that allows you to choose a measure from the library to apply, go to BCL to find a measure to apply, or even write your own measure and test it.  Once you select a measure you may edit the measure inputs on the right side of the dialog. Hit apply measure to start.   Above: This menu item allows you to run one measure on your model.", 
            "title": "Apply Measures Now"
        }, 
        {
            "location": "/reference/openstudio_application_interface/#find-measures-and-find-components", 
            "text": "The BCL window gives you access to an online repository of building energy modeling data called the Building Component Library. Although you can access the BCL website on its own, OpenStudio has integrated access to the BCL from within the application. You can access this through the \"Components   Measures\" menu.  The first time you open this window you will be prompted for an API key, unless you have already used BCL functionality in the SketchUp Plug-in.  Instructions for finding your API Key  are in the \"Getting Started\" section.   Above: This window gives you access to the online BCL to download measures or components.", 
            "title": "Find Measures and Find Components"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/", 
            "text": "OpenStudio SketchUp Plug-in Interface Guide\n\n\n\nThis section provides the legend for toolbars and menus available in the Plug-in. You may also find helpful information in the \nOpenStudio Quick Start Guide (PDF)\n.\n\n\n\n\nFile Management\n\n\nTools in this set create, open, save, import, or export data to or from your model. Some have toolbar icons; some do not. These functions are also located the OpenStudio Plug-in menu.\n\n\n\n\n\n\n\nIcons\n\n\nFunctionality\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew OpenStudio Model\n\n\nThis tool closes your current OpenStudio model and creates a new one. On a Mac it creates an empty model and you have to go under the menu item \nExtentions/OpenStudio User Scripts/On-Demand Template Generators/Space Type and Construction Set Wizard\n to add template items like constructions, schedules, and space types. On a PC the template dialog will be available once and you can choose templates. If you want to add additional template types you must go to the \nExtentions/OpenStudio User Scripts/On-Demand Template Generators/Space Type and Construction Set Wizard\n. \n\n\n\n\n\n\n\n\n\n\nOpen OpenStudio Model\n\n\nUse this feature to close your current OpenStudio model and open an OpenStudio file (.osm). It does not close your current SketchUp file, but loads a different OpenStudio model into it. OpenStudio 0.6.0 introduced an updated OSM format. It will not open OSM files created with OpenStudio 0.4.4 or earlier, and may not open some files created with OpenStudio 0.5.0.\n\n\n\n\n\n\n\n\n\n\nSave OpenStudio Model\n\n\nSaves your OpenStudio Model as an OpenStudio file (.osm). If you save your OSM file and then save your SketchUp model, the SketchUp model will maintain a link to the OSM model. If you close and reopen your linked SketchUp file (.skp), it will reload the content from the OSM file. All the energy model content is saved in the OSM file, not in the SketchUp file.\n\n\nThe benefit of having a link to a SketchUp file is to maintain a relationship with non-OpenStudio content that you may have in your model, such as a base plan or base model. A linked SketchUp file also has saved scenes, drawing styles, and section cut location. When saving your OpenStudio model, make sure your filename ends with the \".osm\" extension. If it does not have that extension, OpenStudio will not open the file. If you have files without this extension, you can manually rename them; they should open.\n\n\n\n\n\n\n\n\n\n\nSave As OpenStudio Model\n\n\nUsing this feature saves your OpenStudio model as a new OSM file and updates the SketchUp file to link to the newly saved OSM file.\n\n\nWhen saving your OpenStudio model, make sure your filename ends with the \".osm\" extension. If it does not have this extension, OpenStudio will not open the file. If you have files without this extension, you can manually rename them; they should open.\n\n\n\n\n\n\n\n\n\n\n\nImport EnergyPlus Input Data File (IDF)\n\n\nThis feature functions similarly to the Import OpenStudio Model tool. If you import an entire IDF model, your current OSM model is closed and a new one is created from your IDF. When you import and then save an IDF model, you will be prompted to save it as an OSM file. If you want to keep it as an IDF file, you can choose the Export EnergyPlus Input Data File tool instead of the Save OSM tool. If you have added geometry or other objects, such as interior partitions that are unique to an OpenStudio model, you will lose or alter those objects when you export back to an IDF file.\n\n\nLike the Import OpenStudio Model tool, the Import EnergyPlus Input Data File tool can be used to import additional content into your model. In this import workflow, your OSM model stays open and the import tool adds additional content from a previously saved IDF file.\n\n\nContent types that can be imported from an IDF file:\n\n\n\n\nConstructions (including materials)\n\n\nSchedules\n\n\n\n\nYou can access these features under the Plugins/OpenStudio menu or the \nFile-\nImport\n menu. \nSpace Loads\n are unique to an OSM, so they cannot be imported from an IDF file.\n\n\n\n\nAbove: Import dialog allows you to import OpenStudio models, constructions, schedules, and space loads. You can also import IDF files through this menu.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExport EnergyPlus Input Data File\n\n\nUse this tool when exporting an IDF file from an OSM model. This can be useful if you need an IDF file to use in an application that does not support the new OSM format. Some model data may be lost when exporting to an IDF because the OSM file format supports many objects, such as interior partition groups and surfaces, that are not in EnergyPlus. If you export an OSM model with unsupported elements to an IDF file, and then reimport it into OpenStudio, the unsupported elements will be gone.\n\n\nGood practice for a typical workflow is to always use your OSM file as the working file. You can run simulations in EnergyPlus directly from an OSM file by using the OpenStudio RunManager application as a stand-alone application or through the OpenStudio SketchUp Plug-in interface.\n\n\nWhen exploring an IDF file, make sure your file name ends with the \".idf\" extension. If it does not have this extension, EnergyPlus and other applications may not open the file. If you have files without this extension, you can manually rename them; they should open.\n\n\n\n\n\n\n\n\n\n\n\nImport OpenStudio Model\n\n\nThis tool can function similarly to the Open OpenStudio Model tool. If you import an entire model, your current model is closed and a new one loaded. When you import an OSM model and then save the OSM model, you will be prompted for a new filename. This prevents you from accidentally overwriting your original file.\n\n\nThe Import OpenStudio Model tool can also be used to import additional content into your model. In this import workflow, your OSM model stays open and the import tool adds content from a previously saved OSM file (see the Import dialog image above.) Content types that can be imported from an OSM file follow:\n\n\n\n\nConstructions (including construction sets, constructions, and materials)\n\n\nSchedules\n\n\nSpace loads\n\n\n\n\n\n\n\n\n\n\n\n\n\nExport OpenStudio Model\n\n\nThis tool prompts you for a new filename for your saved file. As you continue to work, you alter your original file instead of the exported file.\n\n\n\n\n\n\n\n\n\nImporting gbXML Files\n\n\nThere is no toolbar icon to use for importing gbXML (Green Building XML) files; this functionality is available through the \nPlugins-\nOpenStudio-\nImport-\nImport gbXML Model\n menu item only. If you import a gbXML model, your current OSM model is closed and a new one is created from your gbXML. When you import a gbXML model and then save the model, you will be prompted to save it as an OSM file. Currently, there is no export of gbXML from OpenStudio.\n\n\n\n\nAbove: Import dialog allows you to import gbXML files.\n\n\nThe following gbXML element types are imported from gbXML to the OpenStudio Model:\n\n\n\n\nConstruction\n\n\nMaterial\n\n\nScheduleDay\n\n\nScheduleWeek\n\n\nSchedule\n\n\nCampus\n\n\nBuilding\n\n\nSpace\n\n\nSurface\n\n\nSubSurface\n\n\n\n\n\n\nAbove: Screenshot of Import gbXML Model result\n\n\n\n\n\n\n\n\n\n\nExport Untranslated EnergyPlus IDF\n\n\nWhen an IDF file is imported into the SketchUp Plug-in, a translation between EnergyPlus IDF and OpenStudio OSM occurs. OpenStudio does not yet support translation of all objects from EnergyPlus IDF to OpenStudio OSM. To support users with workflows that switch between IDF and OSM, the SketchUp Plug-in allows users to export IDF objects that were not translated during the import. These objects are written to a plain text IDF file so the user may then reintegrate these untranslated objects with the IDF produced by the OpenStudio OSM to EnergyPlus IDF translation. After importing an EnergyPlus IDF, a prompt will alert the user about the objects that could not be translated to OpenStudio OSM.\n\n\n\n\nAbove: User Prompt on EnergyPlus IDF Import\n\n\nTo save untranslated EnergyPlus IDF objects, select the menu item \"Plugins-\nOpenStudio-\nExport-\nExport Untranslated EnergyPlus Idf\".\n\n\n\n\nAbove: Export menu available through Plugins menu\n\n\n\n\n\n\n\n\nModeling Tools\n\n\nTools in this set create new zones, groups, and geometry.\n\n\n\n\n\n\n\nIcons\n\n\nFunctionality\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew Space\n\n\nYou can use the New Space tool to create a new OpenStudio space. Activate the tool and then click where you want your zone origin to be. An OpenStudio space is a top-level object in your SketchUp workspace. If you want to draw in the space, you first need to enter into the space through one of the following methods:\n\n\n\n\nDouble-click on the space while it is selected (this may be difficult if other model objects get in the way)\n\n\nWhile the space is selected, right-click and choose \"Edit Group\" from the contextual menu (You can also go to the edit menu under \"group\" or \"solid group\")\n\n\nSelect the object by name from SketchUp's Outliner window and then double-click or right-click and choose \"Edit Group\"\n\n\nYou can set up a keyboard shortcut that will take you into the selected group. A tutorial will be added to the documentation that shows you how to add your own shortcuts or load some preconfigured OpenStudio shortcuts\n\n\n\n\nOnce you are inside a space, you can draw surfaces. You can also add shading groups, interior partition groups, daylighting control points, luminance maps, and luminaire objects. An alternate method to make new spaces is to copy and paste a space.\n\n\n\n\nAbove: Screenshot of OpenStudio Inspector with an OpenStudio space selected\n\n\n\n\nAbove: Screenshot of OpenStudio Inspector with an OpenStudio surface selected\n\n\n\n\nAbove: Screenshot of OpenStudio Inspector with an OpenStudio subsurface selected\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew Shading Surface Group\n\n\nThe New Shading Surface Group tool is used to create a new EnergyPlus shading group. Activate the tool and then click where you want your shading group origin to be. An EnergyPlus shading group can be a top-level object in your SketchUp workspace, or it can be placed within a space. If you want to draw in the group, you first need to enter into the group through one of the following methods:\n\n\n\n\nDouble-click on the space while it is selected (this may be difficult if other model objects get in the way)\n\n\nWhile the space is selected, right-click and choose \"Edit Group\" from the contextual menu (You can also go to the edit menu under \"group\" or \"solid group\")\n\n\nSelect the object by name from SketchUp's Outliner window and then double-click or right-click and choose \"Edit Group\"\n\n\nYou can set up a keyboard shortcut that will take you into the selected group. A tutorial will be added to the documentation that shows you how to add your own shortcuts or load some preconfigured OpenStudio shortcuts\n\n\n\n\nYou can create shading surface groups within or outside a space. Once you enter into a shading surface group, you can draw shading surfaces. An alternate method to make new shading groups is to copy and paste a group.\n\n\n\n\nAbove: Screenshot of OpenStudio Inspector with an OpenStudio subsurface selected\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew Interior Partition Surface Group \n\n\nThe New Interior Partition Surface Group tool is used to create a new OpenStudio Interior Partition Group. Activate the tool and then click where you want your interior partition group origin to be. If you want to draw in the group, you first need to enter into the group through one of the following methods:\n\n\n\n\nDouble-click on the space while it is selected (this may be difficult if other model objects get in the way)\n\n\nWhile the space is selected, right-click and choose \"Edit Group\" from the contextual menu (You can also go to the edit menu under \"group\" or \"solid group\")\n\n\nSelect the object by name from SketchUp's Outliner window and then double-click or right-click and choose \"Edit Group\"\n\n\nYou can set up a keyboard shortcut that will take you into the selected group. A tutorial will be added to the documentation that shows you how to add your own shortcuts or load some preconfigured OpenStudio shortcuts\n\n\n\n\nYou can create interior partition groups within a space only. Once you enter into an interior partition group, you can draw interior partition surfaces. An alternate method to make new interior partition groups is to copy and paste a group. Interior partition surfaces are not used as heat transfer surfaces, but they still have an associated construction. This construction, along with the surface area, is used to create internal mass that is used to run simulations and create objects for IDF export. In the future, interior partition surfaces and their constructions will be used by other processes.\n\n\n\n\nScreenshot of OpenStudio Inspector With an Interior Partition Group Selected\n\n\n\n\nScreenshot of OpenStudio Inspector With an Interior Partition Surface Selected\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew Daylighting Control Object\n\n\nThe New Daylighting Control Object tool creates a new OpenStudio Daylighting Control object. This consists of a single sensor, which by default will be placed 30 inches above the surface you click on. You can move the object with the SketchUp Move tool or via the Object Inspector, and you can set many attributes that feed information to EnergyPlus and Radiance. The Glare Calculation Azimuth Angle of View Direction also changes the appearance of the object in OpenStudio. To report data from the sensors in EnergyPlus, you also need to include light objects in your model. Most space types in the template files already include a light object.\n\n\nYou can create a Daylighting Control object from within a space, or you can copy and paste one from ne space to another.\n\n\n\n\nAbove: Screenshot of Daylighting Controls Objects Inside a Space\n\n\n\n\nAbove: Screenshot of Daylighting Controls Inspector\n\n\nTo associate a daylighting control object with a thermal zone, select the desired thermal zone object and then choose a primary (and optionally a secondary) daylighting control object. \nNOTE\n: Secondary daylighting control objects are not supported by Radiance at this time, they (and the percentage of load controlled by them) are ignored.\n\n\n\n\nAbove: Screenshot of OpenStudio Inspector with a Thermal Zone selected\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew Illuminance Map\n\n\nThe New Illuminance Map tool creates a new OpenStudio Illuminance Map object. This consists of a rectangle with a grid representing map data points. By default it will be placed 30 inches above the surface you click on. You can move and resize the Illuminance Map with the SketchUp Move and Scale Tool and through the Object Inspector. To obtain data reported for the map in EnergyPlus, you also need to include a Daylighting Controls Object and lights. Most space types in the template files already include a light object.\n\n\nYou can create an illuminance map from  within a space, or you can copy and paste the map into a different space. You can have multiple illuminance maps in a space.\n\n\n\n\nAbove: Screenshot of Illuminance Map Object Inside a Space.\n\n\n\n\nAbove: Screenshot of OpenStudio Inspector With an Illuminance Map Object Selected\n\n\nTo associate an illuminance map with a thermal zone, select the desired thermal zone object and then choose an illuminance map object.\n\n\n\n\nAbove: Screenshot of OpenStudio Inspector With a Thermal Zone Selected\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew Luminaire Tool\n\n\nThe New Luminaire tool creates a new OpenStudio Luminaire object. This object is used to represent a single lighting fixture; power used by this object is represented in EnergyPlus and this object will eventually be used in electric lighting simulations using Radiance. The object is represented by a rectangle with a red triangle on top. The shorter edge of the red triangle goes from the center of the rectangle to the edge in the positive x direction; the longer edge goes out in the positive y direction.\n\n\n\n\nAbove: Detail of Luminaire Object\n\n\n\n\nAbove: Luminaire placed within Space in model\n\n\nWhen a luminaire is placed it must refer to an OS:Luminaire:Definition object to define its power usage and photometric description. If no luminaire definition objects exist when the luminaire is placed, a new one will be created. If one or more luminaire definition objects exist, a dialog will prompt you to select a definition to use or to make a new one.\n\n\n\n\nAbove: Luminaire Definition Prompt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew Glare Sensor\n\n\nThe New Glare Sensor Object tool is a new addition to OpenStudio 0.9.0. It creates a new OpenStudio Glare Sensor that supports Radiance simulations. Unlike the Illuminance Map and Daylighting Control Point, the Glare Sensor has no connection to a Thermal Zone. The default placement of the sensor is 30 inches above the surface you click on. You can move the object with the SketchUp move tool or through the Object Inspector, and you can set many attributes that feed information to Radiance.\n\n\nYou can create a Glare Sensor object from within a space, or you can copy and paste one into a different space.\n\n\n\n\nAbove: Screenshot of OpenStudio Inspector Glare Sensor selected\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSurface Matching\n\n\nThe Surface Matching tool is used to automatically set outside boundary conditions for space surfaces and assign the appropriate outside boundary object in adjacent spaces when \"surface\" is the outside boundary condition. The Surface Matching tool can match or unmatch surfaces in your selection or for the entire model.\n\n\n\n\nAbove: Screenshot of Surface Matching Dialog Box\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSet Space Attributes\n\n\nThe Space Attributes Tool can be used to set attributes for one or more selected spaces in your OpenStudio model. The first four pull-down menus (Space Type, Building Story, Construction Set, and Thermal Zone) set attributes of the selected space objects. The last two pull-down menus set attributes in the thermal zone associated with the selected spaces. Most of the menus allow you to choose from a list populated by the appropriate model objects or one of the following options: No Change, Clear Field, or Make a new Object. The exception is the ideal air loads, which has a \"no change\" option, or yes/no. The Thermostat menu is similar to the others, but does not offer the option to create a new thermostat. You can create a new thermostat from the inspector.\n\n\n\n\nAbove: Screenshot of Space Attributes Dialog Box\n\n\nThe following image shows the model after a new space type is applied to two selected spaces. The render mode is set to render by space type.\n\n\n\n\nAbove: Screenshot of Space Attributes Dialog Box\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate Spaces from Diagrams\n\n\nThe Space Diagram Tool allows you to use native SketchUp tools to draw a space diagram representing your building's floor plan. After drawing the diagram, you can select the surfaces and create a single-story or multistory building based on the diagram. Your model will have one space for each surface in your diagram for each floor. You can use this tool multiple times. If you want to create a new diagram with a unique floor for higher floors, just repeat the steps you used for the original diagram.\n\n\nSurfaces that are not horizontal will be ignored; surfaces with improper surface normals will be flipped over. Once made, the spaces are like any other OpenStudio space. You can enter the space and alter or extend your geometry to refine it beyond the basic geometry created by the space diagram tool.\n\n\n\n\nAbove: Screenshot of Space Diagram Dialog Box\n\n\nThe following image shows the resulting model after using the Space Diagram Tool. The loose geometry of the diagram will be saved onto a layer in SketchUp named \"OpenStudio - Space Diagrams\". Although the resulting spaces are saved in your OpenStudio model (OSM file), the diagram is not. If you want to keep the diagram, you can save the SketchUp file as well. Even if you do not save the SketchUp file you will still have access to the diagram until you quit. If you want to make a change to the diagram, you can delete the spaces, alter the diagram, and re-project them.\n\n\n\n\nAbove: Screenshot of Model After Using Space Diagram Tool\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProject Loose Geometry\n\n\nThe Project Loose Geometry Tool allows you to use the native SketchUp tools to draw loose geometry onto surfaces of your building envelope. When you are ready to project these surfaces into the spaces of your model, you can open this tool and run it across all loose geometry or the selected loose geometry. Although this is often used to create fenestration, it can also be used to split a base surface into two base surfaces. For example, you can create a line 3 feet above the ground representing a change in construction from concrete block to brick. The advantage of this tool--versus the traditional method of entering and drawing within a space--is that you can quickly create surfaces across many spaces without having to ever enter those spaces.\n\n\nIf some of the surfaces you have selected are not in the same plane as a building surface, they will be ignored.\n\n\n\n\nAbove: Screenshot of Project Loose Geometry Dialog Box\n\n\nThe image below shows the resulting model after you have projected selected loose geometry. The loose geometry used for the projection operation will be moved to a layer in SketchUp named \"OpenStudio - Loose Geometry\". While the surfaces made in the spaces by the projection are saved in your OpenStudio Model (OSM file), the loose geometry is not saved in the OpenStudio Model. If you want to save this for future use, you can save the SketchUp file as well.\n\n\n\n\nAbove: Screenshot after Projecting Loose Geometry\n\n\n\n\n\n\n\n\n\n\nInformation Tools\n\n\nTools in this set are generally for viewing model attributes, however some editing may be done as well.\n\n\n\n\n\n\n\nIcons\n\n\nFunctionality\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpenStudio Inspector\n\n\nThe OpenStudio Inspector displays information about your currently open OpenStudio model. This replaces the Object Information Window found in older versions.\n\n\nThe Inspector Window is divided into three main areas:\n\n\n\n\nThe top left is the \"Select Type\" pane. This has a partial list of OpenStudio object types and identifies how many objects of a specific type are in your model.\n\n\nThe bottom left pane is the \"Select Object\" pane. If you select a \"Type\" in the type pane, a list of objects of that type will be displayed in the \"Select Object\" pane. The objects listed in the \"Select Object\" pane have a number to indicate how many objects in the model refer to this object. Below the list are several buttons. The plus button to create a new object of this type, a copy button to copy the selected object, a minus button to delete the selected object, and a purge button to purge unused objects of this type. For some object types, one or more of these buttons may be disabled.\n\n\nThe third and last pane of the Inspector is the \"Edit Object\" pane at the right. This displays the fields for the currently selected object in the \"Select Object\" pane. Some fields accept a string; others are edited via a pull-down list. For some object types, some fields may be hidden from the Inspector or locked from editing. This is by design.\n\n\n\n\nOpenStudio 0.9.0 adds a render mode aware inspector. If you are in a render by class or render by boundary condition and use the SketchUp select tool to select a space, the OpenStudio space will be selected in the Inspector. If, however, you are in render by space type, thermal zone, or story mode, a space type, thermal zone, or story will be selected in the Inspector. This is assuming that the space is an assigned space type, thermal zone, or story. The construction render mode is similar, but you need to select a surface versus a space to select a construction object in the Inspector. Currently, if you select a thermal zone, space type, or construction object in the Inspector, it will not make a selection in the SketchUp model that correlates to this object.\n\n\nThe Inspector cannot select multiple objects at once. So if you select multiple spaces or surfaces in SketchUp, only one will be active in the Inspector. Similarly, you cannot use the Inspector to batch change the attributes for multiple objects at once.\n\n\nThe \nSet Space Attributes for Selected Spaces\n tool on the OpenStudio toolbar does allow batch changes for space objects, and to a limited extent for zones that parent the spaces.\n\n\n\n\nAbove: Screenshot of OpenStudio Inspector With a Space Object Selected\n\n\nScreenshots of the OpenStudio Inspector with other object types selected are shown under the individual pages for those object types.\n\n\n\n\n\n\n\n\n\n\n\nSurface Search\n\n\nThe OpenStudio Surface Search Tool enables you to search your model for surfaces with specific attributes. You can select the search results and visually isolate them by hiding all other surfaces. When you are finished, click \"Unhide All\" on the Surface Search Dialog to unhide the rest of the surfaces. Before searching on a large IDF, close SketchUp's Outliner Window to expedite the surface searching. While surfaces are hidden you can also use SketchUp's built-in \"View Hidden Geometry\" to quickly view all hidden surfaces.\n\n\nNew to the Surface Search Tool with OpenStudio 0.5 and later is the ability to search based on Surface Orientation. You can set both \"from\" and \"to\" to a single value if you want to find surfaces that face a specific direction, or you can set unique values to show surfaces within a range of angles. The \"Exclude Horizontal Surfaces\" is generally intended to be used along with Surface Orientation search to hide surfaces with no azimuth. There are also check boxes to limit search results to non-convex surfaces or to surfaces with more than a set number of vertices. Once your search is complete, the resulting surfaces are selected in SketchUp. You can use this selection for other operations or scripts.\n\n\n\n\nAbove: Screenshot of Surface Search Dialog - OpenStudio 0.6.0\n\n\n\n\n\n\n\n\n\n\n\n\nInformation Tool\n\n\nThe OpenStudio Information Tool activates a cursor that, when placed over a model surface, shows the EnergyPlus or OpenStudio object attributes for that surface. The status bar shows the position of the cursor in world coordinates. The Information Tool is render mode aware and offers different data depending on your current render mode. The following screenshots and captions show the available data for the different render modes.\n\n\nRender by Surface Type and Render by Boundary condition offer a variety of data. Hold down the shift, control, or shift+control keys while hovering over a surface. Modifier keys are shown by the appropriate captions.\n\n\n(No Modifier Key)\n\n\n\n\nAbove: Screenshot of Information Tool in Render by Surface Type Mode Showing Surface Data\n\n\nThe same data are displayed while in Render by Boundary Condition mode.\n\n\n(\"Shift\" Modifier Key)\n\n\n\n\nAbove: Screenshot of Information Tool in Render by Surface Type Mode Showing Construction Data\n\n\nThe same data are displayed while in Render by Boundary Condition mode\n\n\n(\"Ctrl\" Modifier Key)\n\n\n\n\nAbove: Screenshot of Information Tool in Render by Surface Type Mode Showing Material Data\n\n\nThe same data are displayed while in Render by Boundary Condition mode\n\n\n(\"Shift + Ctrl\" Modifier Key)\n\n\n\n\nAbove: Screenshot of Information Tool in Render by Surface Type Mode Showing Space Data\n\n\nThe same data are displayed while in Render by Boundary Condition mode\n\n\n(No Modifier Key)\n\n\n\n\nAbove: Screenshot of Information Tool in Render by Construction Mode Showing Construction Data\n\n\n(No Modifier Key)\n\n\n\n\nAbove: Screenshot of Information Tool in Render by Space Type Mode Showing Space Type Data\n\n\n(No Modifier Key)\n\n\n\n\nAbove: Screenshot of Information Tool in Render by Thermal Zone Mode Showing Thermal Zone Data\n\n\n(No Modifier Key)\n\n\n\n\nAbove: Screenshot of Information Tool in Render by Story Mode Showing Building Story Data\n\n\n(No Modifier Key)\n\n\n\n\nAbove: Screenshot of Information Tool in Render by Data Mode Showing Time Series Simulation Results Data. These data will change as you adjust the time of day or time of year. This example shows exterior surface temperature, but it can be any zone or surface variable that has been requested as part of your simulation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpenStudio Errors and Warnings\n\n\nThe Input File Errors and Warnings dialog automatically opens when there is an error or warning when opening or importing a file. Many common geometry errors (upside-down floor or roof, inside-out window, non-coplanar surfaces, etc.) are fixed automatically when you open the input file. This dialog will also report unsupported IDF objects on import.\n\n\n\n\nAbove: Screenshot of Errors and Warnings Dialog Box\n\n\n\n\n\n\n\n\n\n\nRendering Modes\n\n\nThis toolbar contains render modes that are used to change how heat transfer, shading, and interior partition surfaces are rendered.\n\n\n\n\n\n\n\nIcons\n\n\nFunctionality\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRender by Surface Type\n\n\nThe OpenStudio Render by Surface Type mode will render walls, roofs, windows, doors, floors, shading surfaces, and interior partition surfaces with unique colors. When you create new geometry, it will be automatically classified and rendered. If you try to assign a color yourself, the application will override you. You never need to use the paint bucket tool in this render mode.\n\n\nIf you set a surface construction to \"Air Boundary,\" it will be rendered as a translucent checkerboard pattern. This construction is intended to represent thermal zone boundaries that do not represent physical walls in the building.\n\n\n\n\nAbove: Screenshot of Model in Render by Surface Type Mode\n\n\n\n\n\n\n\n\n\n\n\n\nRender by Outside Boundary Condition\n\n\nThe OpenStudio Render by Outside Boundary Condition mode will render surfaces by their outside boundary conditions. Only space surfaces have boundary conditions, so only they will be rendered with a color. Shading and interior partition surfaces will be white. This is a good rendering mode to diagnose problems with your model. It provides a quick way to globally look at boundary conditions throughout your model. You never need to use the paint bucket tool in this render mode. In the screenshot below, a section cut has been drawn to reveal the inside of the model, making the boundary condition of surfaces easy to see.\n\n\nIf you set a surface construction to \"Air Boundary\", it will be rendered as a translucent checkerboard pattern. This construction is intended to represent thermal zone boundaries that do not represent physical walls in the building.\n\n\n\n\nAbove: Screenshot of Model in Render by Boundary Condition Mode\n\n\nThe most common boundary conditions you will see are \"Outdoors, Surface, and Ground\", but there are actually 9 basic boundary modes, with a number of subsets within some conditions. For \"Outdoors\" there are also unique color variations to indicate if there is sun and or wind exposure. The following image shows the SketchUp materials for the various boundary conditions.\n\n\n\n\nAbove: Render by Outside Boundary Condition Color Palette\n\n\n\n\n\n\n\n\n\n\n\n\nRender by Construction\n\n\nThe OpenStudio Render by Construction mode renders surfaces by their construction. Although this seems similar to Render by Surface Type, there are a number of differences:\n\n\nThe Inspector Window is divided into three main areas:\n\n\n\n\nIn Render by Construction mode, surfaces are rendered by their construction, so if two windows do not have the same construction they will not have the same render color. The same logic is applied to other surface types.\n\n\nShading surfaces and interior partitions can have constructions assigned. If they do have constructions, they will be rendered just as space surfaces are.\n\n\nConstruction properties of a surface can be applied directly to a surface, or they can be inherited from other objects (space, space type, story, or building). The first time you click the render by construction button, it shows hard assigned and inherited constructions. If you click it again, it shows only hard assigned constructions. Other surfaces do not have a render color. Clicking the render button again returns you to the default mode where hard assigned and inherited constructions are shown.\n\n\n\n\nAs a note, this is not a render by material mode, so two constructions that have the same outside material, will have unique render colors. However, in this render mode you can set render color using either the SketchUp paint bucket or the Inspector. To use the Inspector, select the construction object and set the RGB values. These color settings are part of the OpenStudio model and will be maintained the next time you open the model.\n\n\n\n\nAbove: Screenshot of Model in Render by Construction Mode\n\n\n\n\n\n\n\n\n\n\n\n\nRender by Space Type\n\n\nThe OpenStudio Render by Space Type mode renders each space based on the Space Type assigned to it. This is a two state button. The first time you click it, hard assigned and inherited space types are rendered. If you click it again, only hard assigned space types are given a render color. Space types can be assigned to a space or inherited from the building object. You can assign space types to a space by using the \"Set Attributes for Selected Spaces\" tool or the OpenStudio Inspector. The installed templates have preassigned colors for each space type, but you can use SketchUp's paint bucket tool or the OpenStudio Inspector to change the colors. These changes are saved as part of your OpenStudio model.\n\n\n\n\nAbove: Screenshot of Model in Render by Space Type Mode\n\n\n\n\n\n\n\n\n\n\n\n\nRender by Thermal Zone\n\n\nThe OpenStudio Render by Thermal Zone mode renders each space based on the thermal zone assigned to it. You can assign a thermal zone to a space using the \"Set Attributes for Selected Spaces\" tool or the OpenStudio Inspector. When a new thermal zone is made, a color will be assigned to it. You can change that color using SketchUp's paint bucket tool or the OpenStudio Inspector. These changes are saved as part of your OpenStudio model.\n\n\n\n\nAbove: Screenshot of Model in Render by Thermal Zone Mode\n\n\n\n\n\n\n\n\n\n\n\n\nRender by Building Story\n\n\nThe OpenStudio Render by Building Story mode renders each space based on the building story assigned to it. You can assign a building story to a space using the \"Set Attributes for Selected Spaces\" tool or the OpenStudio Inspector. When a new story is made, a color will be assigned to it. You can change that color by using SketchUp's paint bucket tool or the OpenStudio Inspector. These changes are saved as part of your OpenStudio model.\n\n\nWhen you use the \"Create Spaces from Diagram\" tool to generate a multistory building the stories are assigned as part of that process. There is also a user script that can infer building stories from a model that has none assigned.\n\n\n\n\nAbove: Screenshot of Model in Render by Building Story Mode\n\n\n\n\n\n\n\n\n\n\n\n\nRender by Layer\n\n\nThe Render by Layer is a standard SketchUp feature. It will render content by layer. You can create layers to represent anything you want to track. For example, to organize your project by space types you can create or move zones to specific layers. Keep in mind that the layer structure isn't saved with the OSM file, so any layers you setup are just for your current session.\n\n\n\n\nAbove: Screenshot of Model in Render By Layer mode\n\n\n\n\n\n\n\n\n\n\n\n\nRender by Surface Normal\n\n\nThe Render by Surface Normal mode is built on the SketchUp face setting where faces are rendered with the default front and back colors as opposed to their assigned materials. The outside face of a heat transfer surface will render white and the inside face will render red. This works as a quick diagnostic tool to look for reversed faces. In a clean model you shouldn't see red from the outside. Shading surfaces are an exception to this where you will see red on one of the two sides of each shading surface.\n\n\n\n\nAbove: Screenshot of Model in Render By Surface Normal mode\n\n\n\n\n\n\n\n\n\n\nIntegration with Other OpenStudio Resources\n\n\nThis set contains tools integration for other OpenStudio applications and resources.\n\n\n\n\n\n\n\nIcons\n\n\nFunctionality\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLaunch Current Model in OpenStudio Application\n\n\nThe Launch Current Model in OpenStudio Application button will launch your model in OpenStudio. The model will also stay open in the SketchUp Plug-in. If you make changes and save them in the OpenStudio application, be sure to reload the model in the SketchUp Plug-in before you make any changes in SketchUp.\n\n\nYou should also reload the model in the OpenStudio application if you have made additional changes in SketchUp.\n\n\n\n\n\n\n\n\n\n\n\nHelp\n\n\nThis takes you to the online help for the OpenStudio SketchUp Plug-in, where you are now.\n\n\n\n\n\n\n\n\n\nAdditional OpenStudio Plug-in Tools\n\n\nAbout OpenStudio\n\n\nFor information on the SketchUp Plug-in version go to \nPlugins-\nOpenStudio-\nAbout OpenStudio\n.\n\n\n\n\nAbove: Screenshot of SketchUp showing the about dialog path and window\n\n\nPreferences\n\n\nFor information on the SketchUp Plug-in version go to \nPlugins-\nOpenStudio-\nPreferences\n.\n\n\n\n\nAbove: The Preferences dialog enables you to set options related to updates, new thermal zone creation, user scripts, text editor, template OSM files, and the EnergyPlus engine.\n\n\nCheck for Update\n\n\nCheck to see if you are using the most current release of the OpenStudio SketchUp Plugin by going to \nPlugins-\nOpenStudio-\nCheck For Update\n.\n\n\n\n\nAbove: Screenshot of Update Dialog Box\n\n\nHelpful SketchUp Tools\n\n\n\n\n\n\n\n\nIcons\n\n\nFunctionality\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHide Rest of Model\n\n\nThis activates SketchUp's native view function to hide everything but your currently open group or component. Isolating your current zone make is much easier to work on inter-zone geometry.\n\n\n\n\nAbove: Screenshot of Model with rest of model visible\n\n\n\n\nAbove: Screenshot of model with rest of model hidden\n\n\n\n\n\n\n\n\n\n\n\n\nView Hidden Geometry\n\n\nThis activates SketchUp's native view function to view hidden geometry. This is particularly useful if you have used OpenStudio's Surface Search tool and you need to see the rest of the model to get your bearings.\n\n\n\n\nAbove: Screenshot of model in with View Hidden Geometry active\n\n\n\n\n\n\n\n\n\n\n\n\nView Model in X-Ray Mode\n\n\nThis activates SketchUp's native face style setting to render all surfaces translucently. This allows you to quickly see internal model elements without having to create section cuts or hide parts of the model.\n\n\n\n\nAbove: Screenshot of model with X-ray Rendering active\n\n\n\n\n\n\n\n\n\n\n\n\nShadow Settings\n\n\nThis opens SketchUp's native Shadow Settings window. The Shadow Settings window does a few things. First, it can turn SketchUp's shadow display on and off. It can also alter how shadows are rendered. Most important to OpenStudio users is that it can set the time of day and time of year for the current display. SketchUp uses this along with the model's geo-location to set the shadow orientation and length. OpenStudio leverages this data to inform time-series render modes. Currently, this includes the Render by Data render mode which displays post simulation results from an external SQL file. Moving the date or time slider will alter the surface or zone variable values rendered to the model.\n\n\n\n\nAbove: Screenshot of SketchUp Shadow Setting Window", 
            "title": "SketchUp Plug-in Interface Guide"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#file-management", 
            "text": "Tools in this set create, open, save, import, or export data to or from your model. Some have toolbar icons; some do not. These functions are also located the OpenStudio Plug-in menu.    Icons  Functionality", 
            "title": "File Management"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#new-openstudio-model", 
            "text": "This tool closes your current OpenStudio model and creates a new one. On a Mac it creates an empty model and you have to go under the menu item  Extentions/OpenStudio User Scripts/On-Demand Template Generators/Space Type and Construction Set Wizard  to add template items like constructions, schedules, and space types. On a PC the template dialog will be available once and you can choose templates. If you want to add additional template types you must go to the  Extentions/OpenStudio User Scripts/On-Demand Template Generators/Space Type and Construction Set Wizard .", 
            "title": "New OpenStudio Model"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#open-openstudio-model", 
            "text": "Use this feature to close your current OpenStudio model and open an OpenStudio file (.osm). It does not close your current SketchUp file, but loads a different OpenStudio model into it. OpenStudio 0.6.0 introduced an updated OSM format. It will not open OSM files created with OpenStudio 0.4.4 or earlier, and may not open some files created with OpenStudio 0.5.0.", 
            "title": "Open OpenStudio Model"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#save-openstudio-model", 
            "text": "Saves your OpenStudio Model as an OpenStudio file (.osm). If you save your OSM file and then save your SketchUp model, the SketchUp model will maintain a link to the OSM model. If you close and reopen your linked SketchUp file (.skp), it will reload the content from the OSM file. All the energy model content is saved in the OSM file, not in the SketchUp file.  The benefit of having a link to a SketchUp file is to maintain a relationship with non-OpenStudio content that you may have in your model, such as a base plan or base model. A linked SketchUp file also has saved scenes, drawing styles, and section cut location. When saving your OpenStudio model, make sure your filename ends with the \".osm\" extension. If it does not have that extension, OpenStudio will not open the file. If you have files without this extension, you can manually rename them; they should open.", 
            "title": "Save OpenStudio Model"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#save-as-openstudio-model", 
            "text": "Using this feature saves your OpenStudio model as a new OSM file and updates the SketchUp file to link to the newly saved OSM file.  When saving your OpenStudio model, make sure your filename ends with the \".osm\" extension. If it does not have this extension, OpenStudio will not open the file. If you have files without this extension, you can manually rename them; they should open.", 
            "title": "Save As OpenStudio Model"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#import-energyplus-input-data-file-idf", 
            "text": "This feature functions similarly to the Import OpenStudio Model tool. If you import an entire IDF model, your current OSM model is closed and a new one is created from your IDF. When you import and then save an IDF model, you will be prompted to save it as an OSM file. If you want to keep it as an IDF file, you can choose the Export EnergyPlus Input Data File tool instead of the Save OSM tool. If you have added geometry or other objects, such as interior partitions that are unique to an OpenStudio model, you will lose or alter those objects when you export back to an IDF file.  Like the Import OpenStudio Model tool, the Import EnergyPlus Input Data File tool can be used to import additional content into your model. In this import workflow, your OSM model stays open and the import tool adds additional content from a previously saved IDF file.  Content types that can be imported from an IDF file:   Constructions (including materials)  Schedules   You can access these features under the Plugins/OpenStudio menu or the  File- Import  menu.  Space Loads  are unique to an OSM, so they cannot be imported from an IDF file.   Above: Import dialog allows you to import OpenStudio models, constructions, schedules, and space loads. You can also import IDF files through this menu.", 
            "title": "Import EnergyPlus Input Data File (IDF)"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#export-energyplus-input-data-file", 
            "text": "Use this tool when exporting an IDF file from an OSM model. This can be useful if you need an IDF file to use in an application that does not support the new OSM format. Some model data may be lost when exporting to an IDF because the OSM file format supports many objects, such as interior partition groups and surfaces, that are not in EnergyPlus. If you export an OSM model with unsupported elements to an IDF file, and then reimport it into OpenStudio, the unsupported elements will be gone.  Good practice for a typical workflow is to always use your OSM file as the working file. You can run simulations in EnergyPlus directly from an OSM file by using the OpenStudio RunManager application as a stand-alone application or through the OpenStudio SketchUp Plug-in interface.  When exploring an IDF file, make sure your file name ends with the \".idf\" extension. If it does not have this extension, EnergyPlus and other applications may not open the file. If you have files without this extension, you can manually rename them; they should open.", 
            "title": "Export EnergyPlus Input Data File"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#import-openstudio-model", 
            "text": "This tool can function similarly to the Open OpenStudio Model tool. If you import an entire model, your current model is closed and a new one loaded. When you import an OSM model and then save the OSM model, you will be prompted for a new filename. This prevents you from accidentally overwriting your original file.  The Import OpenStudio Model tool can also be used to import additional content into your model. In this import workflow, your OSM model stays open and the import tool adds content from a previously saved OSM file (see the Import dialog image above.) Content types that can be imported from an OSM file follow:   Constructions (including construction sets, constructions, and materials)  Schedules  Space loads", 
            "title": "Import OpenStudio Model"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#export-openstudio-model", 
            "text": "This tool prompts you for a new filename for your saved file. As you continue to work, you alter your original file instead of the exported file.", 
            "title": "Export OpenStudio Model"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#importing-gbxml-files", 
            "text": "There is no toolbar icon to use for importing gbXML (Green Building XML) files; this functionality is available through the  Plugins- OpenStudio- Import- Import gbXML Model  menu item only. If you import a gbXML model, your current OSM model is closed and a new one is created from your gbXML. When you import a gbXML model and then save the model, you will be prompted to save it as an OSM file. Currently, there is no export of gbXML from OpenStudio.   Above: Import dialog allows you to import gbXML files.  The following gbXML element types are imported from gbXML to the OpenStudio Model:   Construction  Material  ScheduleDay  ScheduleWeek  Schedule  Campus  Building  Space  Surface  SubSurface    Above: Screenshot of Import gbXML Model result", 
            "title": "Importing gbXML Files"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#export-untranslated-energyplus-idf", 
            "text": "When an IDF file is imported into the SketchUp Plug-in, a translation between EnergyPlus IDF and OpenStudio OSM occurs. OpenStudio does not yet support translation of all objects from EnergyPlus IDF to OpenStudio OSM. To support users with workflows that switch between IDF and OSM, the SketchUp Plug-in allows users to export IDF objects that were not translated during the import. These objects are written to a plain text IDF file so the user may then reintegrate these untranslated objects with the IDF produced by the OpenStudio OSM to EnergyPlus IDF translation. After importing an EnergyPlus IDF, a prompt will alert the user about the objects that could not be translated to OpenStudio OSM.   Above: User Prompt on EnergyPlus IDF Import  To save untranslated EnergyPlus IDF objects, select the menu item \"Plugins- OpenStudio- Export- Export Untranslated EnergyPlus Idf\".   Above: Export menu available through Plugins menu", 
            "title": "Export Untranslated EnergyPlus IDF"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#modeling-tools", 
            "text": "Tools in this set create new zones, groups, and geometry.    Icons  Functionality", 
            "title": "Modeling Tools"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#new-space", 
            "text": "You can use the New Space tool to create a new OpenStudio space. Activate the tool and then click where you want your zone origin to be. An OpenStudio space is a top-level object in your SketchUp workspace. If you want to draw in the space, you first need to enter into the space through one of the following methods:   Double-click on the space while it is selected (this may be difficult if other model objects get in the way)  While the space is selected, right-click and choose \"Edit Group\" from the contextual menu (You can also go to the edit menu under \"group\" or \"solid group\")  Select the object by name from SketchUp's Outliner window and then double-click or right-click and choose \"Edit Group\"  You can set up a keyboard shortcut that will take you into the selected group. A tutorial will be added to the documentation that shows you how to add your own shortcuts or load some preconfigured OpenStudio shortcuts   Once you are inside a space, you can draw surfaces. You can also add shading groups, interior partition groups, daylighting control points, luminance maps, and luminaire objects. An alternate method to make new spaces is to copy and paste a space.   Above: Screenshot of OpenStudio Inspector with an OpenStudio space selected   Above: Screenshot of OpenStudio Inspector with an OpenStudio surface selected   Above: Screenshot of OpenStudio Inspector with an OpenStudio subsurface selected", 
            "title": "New Space"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#new-shading-surface-group", 
            "text": "The New Shading Surface Group tool is used to create a new EnergyPlus shading group. Activate the tool and then click where you want your shading group origin to be. An EnergyPlus shading group can be a top-level object in your SketchUp workspace, or it can be placed within a space. If you want to draw in the group, you first need to enter into the group through one of the following methods:   Double-click on the space while it is selected (this may be difficult if other model objects get in the way)  While the space is selected, right-click and choose \"Edit Group\" from the contextual menu (You can also go to the edit menu under \"group\" or \"solid group\")  Select the object by name from SketchUp's Outliner window and then double-click or right-click and choose \"Edit Group\"  You can set up a keyboard shortcut that will take you into the selected group. A tutorial will be added to the documentation that shows you how to add your own shortcuts or load some preconfigured OpenStudio shortcuts   You can create shading surface groups within or outside a space. Once you enter into a shading surface group, you can draw shading surfaces. An alternate method to make new shading groups is to copy and paste a group.   Above: Screenshot of OpenStudio Inspector with an OpenStudio subsurface selected", 
            "title": "New Shading Surface Group"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#new-interior-partition-surface-group", 
            "text": "The New Interior Partition Surface Group tool is used to create a new OpenStudio Interior Partition Group. Activate the tool and then click where you want your interior partition group origin to be. If you want to draw in the group, you first need to enter into the group through one of the following methods:   Double-click on the space while it is selected (this may be difficult if other model objects get in the way)  While the space is selected, right-click and choose \"Edit Group\" from the contextual menu (You can also go to the edit menu under \"group\" or \"solid group\")  Select the object by name from SketchUp's Outliner window and then double-click or right-click and choose \"Edit Group\"  You can set up a keyboard shortcut that will take you into the selected group. A tutorial will be added to the documentation that shows you how to add your own shortcuts or load some preconfigured OpenStudio shortcuts   You can create interior partition groups within a space only. Once you enter into an interior partition group, you can draw interior partition surfaces. An alternate method to make new interior partition groups is to copy and paste a group. Interior partition surfaces are not used as heat transfer surfaces, but they still have an associated construction. This construction, along with the surface area, is used to create internal mass that is used to run simulations and create objects for IDF export. In the future, interior partition surfaces and their constructions will be used by other processes.   Screenshot of OpenStudio Inspector With an Interior Partition Group Selected   Screenshot of OpenStudio Inspector With an Interior Partition Surface Selected", 
            "title": "New Interior Partition Surface Group "
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#new-daylighting-control-object", 
            "text": "The New Daylighting Control Object tool creates a new OpenStudio Daylighting Control object. This consists of a single sensor, which by default will be placed 30 inches above the surface you click on. You can move the object with the SketchUp Move tool or via the Object Inspector, and you can set many attributes that feed information to EnergyPlus and Radiance. The Glare Calculation Azimuth Angle of View Direction also changes the appearance of the object in OpenStudio. To report data from the sensors in EnergyPlus, you also need to include light objects in your model. Most space types in the template files already include a light object.  You can create a Daylighting Control object from within a space, or you can copy and paste one from ne space to another.   Above: Screenshot of Daylighting Controls Objects Inside a Space   Above: Screenshot of Daylighting Controls Inspector  To associate a daylighting control object with a thermal zone, select the desired thermal zone object and then choose a primary (and optionally a secondary) daylighting control object.  NOTE : Secondary daylighting control objects are not supported by Radiance at this time, they (and the percentage of load controlled by them) are ignored.   Above: Screenshot of OpenStudio Inspector with a Thermal Zone selected", 
            "title": "New Daylighting Control Object"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#new-illuminance-map", 
            "text": "The New Illuminance Map tool creates a new OpenStudio Illuminance Map object. This consists of a rectangle with a grid representing map data points. By default it will be placed 30 inches above the surface you click on. You can move and resize the Illuminance Map with the SketchUp Move and Scale Tool and through the Object Inspector. To obtain data reported for the map in EnergyPlus, you also need to include a Daylighting Controls Object and lights. Most space types in the template files already include a light object.  You can create an illuminance map from  within a space, or you can copy and paste the map into a different space. You can have multiple illuminance maps in a space.   Above: Screenshot of Illuminance Map Object Inside a Space.   Above: Screenshot of OpenStudio Inspector With an Illuminance Map Object Selected  To associate an illuminance map with a thermal zone, select the desired thermal zone object and then choose an illuminance map object.   Above: Screenshot of OpenStudio Inspector With a Thermal Zone Selected", 
            "title": "New Illuminance Map"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#new-luminaire-tool", 
            "text": "The New Luminaire tool creates a new OpenStudio Luminaire object. This object is used to represent a single lighting fixture; power used by this object is represented in EnergyPlus and this object will eventually be used in electric lighting simulations using Radiance. The object is represented by a rectangle with a red triangle on top. The shorter edge of the red triangle goes from the center of the rectangle to the edge in the positive x direction; the longer edge goes out in the positive y direction.   Above: Detail of Luminaire Object   Above: Luminaire placed within Space in model  When a luminaire is placed it must refer to an OS:Luminaire:Definition object to define its power usage and photometric description. If no luminaire definition objects exist when the luminaire is placed, a new one will be created. If one or more luminaire definition objects exist, a dialog will prompt you to select a definition to use or to make a new one.   Above: Luminaire Definition Prompt", 
            "title": "New Luminaire Tool"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#new-glare-sensor", 
            "text": "The New Glare Sensor Object tool is a new addition to OpenStudio 0.9.0. It creates a new OpenStudio Glare Sensor that supports Radiance simulations. Unlike the Illuminance Map and Daylighting Control Point, the Glare Sensor has no connection to a Thermal Zone. The default placement of the sensor is 30 inches above the surface you click on. You can move the object with the SketchUp move tool or through the Object Inspector, and you can set many attributes that feed information to Radiance.  You can create a Glare Sensor object from within a space, or you can copy and paste one into a different space.   Above: Screenshot of OpenStudio Inspector Glare Sensor selected", 
            "title": "New Glare Sensor"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#surface-matching", 
            "text": "The Surface Matching tool is used to automatically set outside boundary conditions for space surfaces and assign the appropriate outside boundary object in adjacent spaces when \"surface\" is the outside boundary condition. The Surface Matching tool can match or unmatch surfaces in your selection or for the entire model.   Above: Screenshot of Surface Matching Dialog Box", 
            "title": "Surface Matching"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#set-space-attributes", 
            "text": "The Space Attributes Tool can be used to set attributes for one or more selected spaces in your OpenStudio model. The first four pull-down menus (Space Type, Building Story, Construction Set, and Thermal Zone) set attributes of the selected space objects. The last two pull-down menus set attributes in the thermal zone associated with the selected spaces. Most of the menus allow you to choose from a list populated by the appropriate model objects or one of the following options: No Change, Clear Field, or Make a new Object. The exception is the ideal air loads, which has a \"no change\" option, or yes/no. The Thermostat menu is similar to the others, but does not offer the option to create a new thermostat. You can create a new thermostat from the inspector.   Above: Screenshot of Space Attributes Dialog Box  The following image shows the model after a new space type is applied to two selected spaces. The render mode is set to render by space type.   Above: Screenshot of Space Attributes Dialog Box", 
            "title": "Set Space Attributes"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#create-spaces-from-diagrams", 
            "text": "The Space Diagram Tool allows you to use native SketchUp tools to draw a space diagram representing your building's floor plan. After drawing the diagram, you can select the surfaces and create a single-story or multistory building based on the diagram. Your model will have one space for each surface in your diagram for each floor. You can use this tool multiple times. If you want to create a new diagram with a unique floor for higher floors, just repeat the steps you used for the original diagram.  Surfaces that are not horizontal will be ignored; surfaces with improper surface normals will be flipped over. Once made, the spaces are like any other OpenStudio space. You can enter the space and alter or extend your geometry to refine it beyond the basic geometry created by the space diagram tool.   Above: Screenshot of Space Diagram Dialog Box  The following image shows the resulting model after using the Space Diagram Tool. The loose geometry of the diagram will be saved onto a layer in SketchUp named \"OpenStudio - Space Diagrams\". Although the resulting spaces are saved in your OpenStudio model (OSM file), the diagram is not. If you want to keep the diagram, you can save the SketchUp file as well. Even if you do not save the SketchUp file you will still have access to the diagram until you quit. If you want to make a change to the diagram, you can delete the spaces, alter the diagram, and re-project them.   Above: Screenshot of Model After Using Space Diagram Tool", 
            "title": "Create Spaces from Diagrams"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#project-loose-geometry", 
            "text": "The Project Loose Geometry Tool allows you to use the native SketchUp tools to draw loose geometry onto surfaces of your building envelope. When you are ready to project these surfaces into the spaces of your model, you can open this tool and run it across all loose geometry or the selected loose geometry. Although this is often used to create fenestration, it can also be used to split a base surface into two base surfaces. For example, you can create a line 3 feet above the ground representing a change in construction from concrete block to brick. The advantage of this tool--versus the traditional method of entering and drawing within a space--is that you can quickly create surfaces across many spaces without having to ever enter those spaces.  If some of the surfaces you have selected are not in the same plane as a building surface, they will be ignored.   Above: Screenshot of Project Loose Geometry Dialog Box  The image below shows the resulting model after you have projected selected loose geometry. The loose geometry used for the projection operation will be moved to a layer in SketchUp named \"OpenStudio - Loose Geometry\". While the surfaces made in the spaces by the projection are saved in your OpenStudio Model (OSM file), the loose geometry is not saved in the OpenStudio Model. If you want to save this for future use, you can save the SketchUp file as well.   Above: Screenshot after Projecting Loose Geometry", 
            "title": "Project Loose Geometry"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#information-tools", 
            "text": "Tools in this set are generally for viewing model attributes, however some editing may be done as well.    Icons  Functionality", 
            "title": "Information Tools"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#openstudio-inspector", 
            "text": "The OpenStudio Inspector displays information about your currently open OpenStudio model. This replaces the Object Information Window found in older versions.  The Inspector Window is divided into three main areas:   The top left is the \"Select Type\" pane. This has a partial list of OpenStudio object types and identifies how many objects of a specific type are in your model.  The bottom left pane is the \"Select Object\" pane. If you select a \"Type\" in the type pane, a list of objects of that type will be displayed in the \"Select Object\" pane. The objects listed in the \"Select Object\" pane have a number to indicate how many objects in the model refer to this object. Below the list are several buttons. The plus button to create a new object of this type, a copy button to copy the selected object, a minus button to delete the selected object, and a purge button to purge unused objects of this type. For some object types, one or more of these buttons may be disabled.  The third and last pane of the Inspector is the \"Edit Object\" pane at the right. This displays the fields for the currently selected object in the \"Select Object\" pane. Some fields accept a string; others are edited via a pull-down list. For some object types, some fields may be hidden from the Inspector or locked from editing. This is by design.   OpenStudio 0.9.0 adds a render mode aware inspector. If you are in a render by class or render by boundary condition and use the SketchUp select tool to select a space, the OpenStudio space will be selected in the Inspector. If, however, you are in render by space type, thermal zone, or story mode, a space type, thermal zone, or story will be selected in the Inspector. This is assuming that the space is an assigned space type, thermal zone, or story. The construction render mode is similar, but you need to select a surface versus a space to select a construction object in the Inspector. Currently, if you select a thermal zone, space type, or construction object in the Inspector, it will not make a selection in the SketchUp model that correlates to this object.  The Inspector cannot select multiple objects at once. So if you select multiple spaces or surfaces in SketchUp, only one will be active in the Inspector. Similarly, you cannot use the Inspector to batch change the attributes for multiple objects at once.  The  Set Space Attributes for Selected Spaces  tool on the OpenStudio toolbar does allow batch changes for space objects, and to a limited extent for zones that parent the spaces.   Above: Screenshot of OpenStudio Inspector With a Space Object Selected  Screenshots of the OpenStudio Inspector with other object types selected are shown under the individual pages for those object types.", 
            "title": "OpenStudio Inspector"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#surface-search", 
            "text": "The OpenStudio Surface Search Tool enables you to search your model for surfaces with specific attributes. You can select the search results and visually isolate them by hiding all other surfaces. When you are finished, click \"Unhide All\" on the Surface Search Dialog to unhide the rest of the surfaces. Before searching on a large IDF, close SketchUp's Outliner Window to expedite the surface searching. While surfaces are hidden you can also use SketchUp's built-in \"View Hidden Geometry\" to quickly view all hidden surfaces.  New to the Surface Search Tool with OpenStudio 0.5 and later is the ability to search based on Surface Orientation. You can set both \"from\" and \"to\" to a single value if you want to find surfaces that face a specific direction, or you can set unique values to show surfaces within a range of angles. The \"Exclude Horizontal Surfaces\" is generally intended to be used along with Surface Orientation search to hide surfaces with no azimuth. There are also check boxes to limit search results to non-convex surfaces or to surfaces with more than a set number of vertices. Once your search is complete, the resulting surfaces are selected in SketchUp. You can use this selection for other operations or scripts.   Above: Screenshot of Surface Search Dialog - OpenStudio 0.6.0", 
            "title": "Surface Search"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#information-tool", 
            "text": "The OpenStudio Information Tool activates a cursor that, when placed over a model surface, shows the EnergyPlus or OpenStudio object attributes for that surface. The status bar shows the position of the cursor in world coordinates. The Information Tool is render mode aware and offers different data depending on your current render mode. The following screenshots and captions show the available data for the different render modes.  Render by Surface Type and Render by Boundary condition offer a variety of data. Hold down the shift, control, or shift+control keys while hovering over a surface. Modifier keys are shown by the appropriate captions.  (No Modifier Key)   Above: Screenshot of Information Tool in Render by Surface Type Mode Showing Surface Data  The same data are displayed while in Render by Boundary Condition mode.  (\"Shift\" Modifier Key)   Above: Screenshot of Information Tool in Render by Surface Type Mode Showing Construction Data  The same data are displayed while in Render by Boundary Condition mode  (\"Ctrl\" Modifier Key)   Above: Screenshot of Information Tool in Render by Surface Type Mode Showing Material Data  The same data are displayed while in Render by Boundary Condition mode  (\"Shift + Ctrl\" Modifier Key)   Above: Screenshot of Information Tool in Render by Surface Type Mode Showing Space Data  The same data are displayed while in Render by Boundary Condition mode  (No Modifier Key)   Above: Screenshot of Information Tool in Render by Construction Mode Showing Construction Data  (No Modifier Key)   Above: Screenshot of Information Tool in Render by Space Type Mode Showing Space Type Data  (No Modifier Key)   Above: Screenshot of Information Tool in Render by Thermal Zone Mode Showing Thermal Zone Data  (No Modifier Key)   Above: Screenshot of Information Tool in Render by Story Mode Showing Building Story Data  (No Modifier Key)   Above: Screenshot of Information Tool in Render by Data Mode Showing Time Series Simulation Results Data. These data will change as you adjust the time of day or time of year. This example shows exterior surface temperature, but it can be any zone or surface variable that has been requested as part of your simulation.", 
            "title": "Information Tool"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#openstudio-errors-and-warnings", 
            "text": "The Input File Errors and Warnings dialog automatically opens when there is an error or warning when opening or importing a file. Many common geometry errors (upside-down floor or roof, inside-out window, non-coplanar surfaces, etc.) are fixed automatically when you open the input file. This dialog will also report unsupported IDF objects on import.   Above: Screenshot of Errors and Warnings Dialog Box", 
            "title": "OpenStudio Errors and Warnings"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#rendering-modes", 
            "text": "This toolbar contains render modes that are used to change how heat transfer, shading, and interior partition surfaces are rendered.    Icons  Functionality", 
            "title": "Rendering Modes"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#render-by-surface-type", 
            "text": "The OpenStudio Render by Surface Type mode will render walls, roofs, windows, doors, floors, shading surfaces, and interior partition surfaces with unique colors. When you create new geometry, it will be automatically classified and rendered. If you try to assign a color yourself, the application will override you. You never need to use the paint bucket tool in this render mode.  If you set a surface construction to \"Air Boundary,\" it will be rendered as a translucent checkerboard pattern. This construction is intended to represent thermal zone boundaries that do not represent physical walls in the building.   Above: Screenshot of Model in Render by Surface Type Mode", 
            "title": "Render by Surface Type"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#render-by-outside-boundary-condition", 
            "text": "The OpenStudio Render by Outside Boundary Condition mode will render surfaces by their outside boundary conditions. Only space surfaces have boundary conditions, so only they will be rendered with a color. Shading and interior partition surfaces will be white. This is a good rendering mode to diagnose problems with your model. It provides a quick way to globally look at boundary conditions throughout your model. You never need to use the paint bucket tool in this render mode. In the screenshot below, a section cut has been drawn to reveal the inside of the model, making the boundary condition of surfaces easy to see.  If you set a surface construction to \"Air Boundary\", it will be rendered as a translucent checkerboard pattern. This construction is intended to represent thermal zone boundaries that do not represent physical walls in the building.   Above: Screenshot of Model in Render by Boundary Condition Mode  The most common boundary conditions you will see are \"Outdoors, Surface, and Ground\", but there are actually 9 basic boundary modes, with a number of subsets within some conditions. For \"Outdoors\" there are also unique color variations to indicate if there is sun and or wind exposure. The following image shows the SketchUp materials for the various boundary conditions.   Above: Render by Outside Boundary Condition Color Palette", 
            "title": "Render by Outside Boundary Condition"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#render-by-construction", 
            "text": "The OpenStudio Render by Construction mode renders surfaces by their construction. Although this seems similar to Render by Surface Type, there are a number of differences:  The Inspector Window is divided into three main areas:   In Render by Construction mode, surfaces are rendered by their construction, so if two windows do not have the same construction they will not have the same render color. The same logic is applied to other surface types.  Shading surfaces and interior partitions can have constructions assigned. If they do have constructions, they will be rendered just as space surfaces are.  Construction properties of a surface can be applied directly to a surface, or they can be inherited from other objects (space, space type, story, or building). The first time you click the render by construction button, it shows hard assigned and inherited constructions. If you click it again, it shows only hard assigned constructions. Other surfaces do not have a render color. Clicking the render button again returns you to the default mode where hard assigned and inherited constructions are shown.   As a note, this is not a render by material mode, so two constructions that have the same outside material, will have unique render colors. However, in this render mode you can set render color using either the SketchUp paint bucket or the Inspector. To use the Inspector, select the construction object and set the RGB values. These color settings are part of the OpenStudio model and will be maintained the next time you open the model.   Above: Screenshot of Model in Render by Construction Mode", 
            "title": "Render by Construction"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#render-by-space-type", 
            "text": "The OpenStudio Render by Space Type mode renders each space based on the Space Type assigned to it. This is a two state button. The first time you click it, hard assigned and inherited space types are rendered. If you click it again, only hard assigned space types are given a render color. Space types can be assigned to a space or inherited from the building object. You can assign space types to a space by using the \"Set Attributes for Selected Spaces\" tool or the OpenStudio Inspector. The installed templates have preassigned colors for each space type, but you can use SketchUp's paint bucket tool or the OpenStudio Inspector to change the colors. These changes are saved as part of your OpenStudio model.   Above: Screenshot of Model in Render by Space Type Mode", 
            "title": "Render by Space Type"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#render-by-thermal-zone", 
            "text": "The OpenStudio Render by Thermal Zone mode renders each space based on the thermal zone assigned to it. You can assign a thermal zone to a space using the \"Set Attributes for Selected Spaces\" tool or the OpenStudio Inspector. When a new thermal zone is made, a color will be assigned to it. You can change that color using SketchUp's paint bucket tool or the OpenStudio Inspector. These changes are saved as part of your OpenStudio model.   Above: Screenshot of Model in Render by Thermal Zone Mode", 
            "title": "Render by Thermal Zone"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#render-by-building-story", 
            "text": "The OpenStudio Render by Building Story mode renders each space based on the building story assigned to it. You can assign a building story to a space using the \"Set Attributes for Selected Spaces\" tool or the OpenStudio Inspector. When a new story is made, a color will be assigned to it. You can change that color by using SketchUp's paint bucket tool or the OpenStudio Inspector. These changes are saved as part of your OpenStudio model.  When you use the \"Create Spaces from Diagram\" tool to generate a multistory building the stories are assigned as part of that process. There is also a user script that can infer building stories from a model that has none assigned.   Above: Screenshot of Model in Render by Building Story Mode", 
            "title": "Render by Building Story"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#render-by-layer", 
            "text": "The Render by Layer is a standard SketchUp feature. It will render content by layer. You can create layers to represent anything you want to track. For example, to organize your project by space types you can create or move zones to specific layers. Keep in mind that the layer structure isn't saved with the OSM file, so any layers you setup are just for your current session.   Above: Screenshot of Model in Render By Layer mode", 
            "title": "Render by Layer"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#render-by-surface-normal", 
            "text": "The Render by Surface Normal mode is built on the SketchUp face setting where faces are rendered with the default front and back colors as opposed to their assigned materials. The outside face of a heat transfer surface will render white and the inside face will render red. This works as a quick diagnostic tool to look for reversed faces. In a clean model you shouldn't see red from the outside. Shading surfaces are an exception to this where you will see red on one of the two sides of each shading surface.   Above: Screenshot of Model in Render By Surface Normal mode", 
            "title": "Render by Surface Normal"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#integration-with-other-openstudio-resources", 
            "text": "This set contains tools integration for other OpenStudio applications and resources.    Icons  Functionality", 
            "title": "Integration with Other OpenStudio Resources"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#launch-current-model-in-openstudio-application", 
            "text": "The Launch Current Model in OpenStudio Application button will launch your model in OpenStudio. The model will also stay open in the SketchUp Plug-in. If you make changes and save them in the OpenStudio application, be sure to reload the model in the SketchUp Plug-in before you make any changes in SketchUp.  You should also reload the model in the OpenStudio application if you have made additional changes in SketchUp.", 
            "title": "Launch Current Model in OpenStudio Application"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#help", 
            "text": "This takes you to the online help for the OpenStudio SketchUp Plug-in, where you are now.", 
            "title": "Help"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#additional-openstudio-plug-in-tools", 
            "text": "", 
            "title": "Additional OpenStudio Plug-in Tools"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#about-openstudio", 
            "text": "For information on the SketchUp Plug-in version go to  Plugins- OpenStudio- About OpenStudio .   Above: Screenshot of SketchUp showing the about dialog path and window", 
            "title": "About OpenStudio"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#preferences", 
            "text": "For information on the SketchUp Plug-in version go to  Plugins- OpenStudio- Preferences .   Above: The Preferences dialog enables you to set options related to updates, new thermal zone creation, user scripts, text editor, template OSM files, and the EnergyPlus engine.", 
            "title": "Preferences"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#check-for-update", 
            "text": "Check to see if you are using the most current release of the OpenStudio SketchUp Plugin by going to  Plugins- OpenStudio- Check For Update .   Above: Screenshot of Update Dialog Box", 
            "title": "Check for Update"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#helpful-sketchup-tools", 
            "text": "Icons  Functionality", 
            "title": "Helpful SketchUp Tools"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#hide-rest-of-model", 
            "text": "This activates SketchUp's native view function to hide everything but your currently open group or component. Isolating your current zone make is much easier to work on inter-zone geometry.   Above: Screenshot of Model with rest of model visible   Above: Screenshot of model with rest of model hidden", 
            "title": "Hide Rest of Model"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#view-hidden-geometry", 
            "text": "This activates SketchUp's native view function to view hidden geometry. This is particularly useful if you have used OpenStudio's Surface Search tool and you need to see the rest of the model to get your bearings.   Above: Screenshot of model in with View Hidden Geometry active", 
            "title": "View Hidden Geometry"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#view-model-in-x-ray-mode", 
            "text": "This activates SketchUp's native face style setting to render all surfaces translucently. This allows you to quickly see internal model elements without having to create section cuts or hide parts of the model.   Above: Screenshot of model with X-ray Rendering active", 
            "title": "View Model in X-Ray Mode"
        }, 
        {
            "location": "/reference/sketchup_plugin_interface/#shadow-settings", 
            "text": "This opens SketchUp's native Shadow Settings window. The Shadow Settings window does a few things. First, it can turn SketchUp's shadow display on and off. It can also alter how shadows are rendered. Most important to OpenStudio users is that it can set the time of day and time of year for the current display. SketchUp uses this along with the model's geo-location to set the shadow orientation and length. OpenStudio leverages this data to inform time-series render modes. Currently, this includes the Render by Data render mode which displays post simulation results from an external SQL file. Moving the date or time slider will alter the surface or zone variable values rendered to the model.   Above: Screenshot of SketchUp Shadow Setting Window", 
            "title": "Shadow Settings"
        }, 
        {
            "location": "/reference/command_line_interface/", 
            "text": "OpenStudio Command Line Interface\n\n\n\nThe OpenStudio Command Line Interface (CLI) is a self-contained executable which includes everything needed to apply OpenStudio Measures to an OpenStudio Model and run an EnergyPlus simulation.  The CLI is only avaiable in OpenStudio version 2.0 and higher. The CLI contains a full OpenStudio Ruby environment, the list of Ruby Gems available in each version of OpenStudio can be found \nhere\n.  \n\n\nThis document provides an overview of the most important features of the CLI, it is not meant to be an exhaustive reference.  For an exhaustive list of features available in the CLI please refer to the command line output of the \n--help\n command.  For a complete list of the properties available in the OSW file format please refer to the \nOSW JSON schema\n.  For a complete description of the WorkflowJSON class please refer to the \ndocumentation\n.  \n\n\nCommand Overview\n\n\nThe CLI is executed by calling the OpenStudio executable from the command line with a set of command line arguments.  Calling the CLI with no arguments (such as when double-clicking the executable) causes the CLI to print a help message and then exit.  Several switches which control program behavior may be passed immediately following the OpenStudio executable.  Switches often have both a short form and a long form for convienence. Multiple program level switches may be combined.  Program level switches include:\n\n\nThe \n-h\n or \n--help\n switches print the help message:\n\n\nopenstudio.exe --include /path/to/add/ --include /another/path/to/add\n\n\n\n\nThe \n-I\n or \n--include\n switches can be used to add additional directories to the Ruby $LOAD_PATH (this switch may be used more than once):\n\n\nopenstudio.exe --include /path/to/add/ --include /another/path/to/add\n\n\n\n\nThe \n--gem_path\n switch can be used to load gems from a location on the user's disk (this switch may be used more than once):\n\n\nopenstudio.exe --gem_path /home/gems1 --include /home/gems2\n\n\n\n\nThe \n--gem_home\n switch can be used to set the directory to install gems to (note that the \ngem_install\n command does not yet work):\n\n\nopenstudio.exe --gem_home /home/gems\n\n\n\n\nThe \n--verbose\n switch can be used to print additional information for debugging:\n\n\nopenstudio.exe --verbose\n\n\n\n\nProgram level switches (if any) are followed by a subcommand which directs the program to perform a particular function.  These subcommands are explained in further detail below.\n\n\nMeasure Subcommand\n\n\nThe \nmeasure\n subcommand is used to query OpenStudio Measures on disk.  The following arguments may be passed to the \nmeasure\n subcommand. \n\n\nThe \n-h\n switch prints help specific to the \nmeasure\n subcommand:\n\n\nopenstudio.exe measure -h\n\n\n\n\nThe \n-t\n or \n--update_all\n switches process all measures in a given directory and updates their measure.xml files if updates to their content are detected.  Information about the measures is printed to standard out in JSON format:\n\n\nopenstudio.exe measure --update_all /path/to/measures/\n\n\n\n\nThe \n-u\n or \n--update\n switches process a single measure in a given directory and updates its measure.xml file if updates to the content are detected. Information about the measure is printed to standard out in JSON format:\n\n\nopenstudio.exe measure --update /path/to/measure/\n\n\n\n\nThe \n-a\n or \n--compute_arguments\n switches process a single measure in a given directory and updates its measure.xml file if updates to the content are detected. Information about the measure, including model specific arguments, is printed to standard out in JSON format:\n\n\nopenstudio.exe measure --compute_arguments /path/to/model.osm /path/to/measure/\n\n\n\n\nor for an EnergyPlus Measure:\n\n\nopenstudio.exe measure --compute_arguments /path/to/model.idf /path/to/measure/\n\n\n\n\nRun Subcommand\n\n\nThe \nrun\n subcommand is used to load an OpenStudio Model, apply a series of OpenStudio Model Measures, translate to EnergyPlus IDF, apply a series of OpenStudio EnergyPlus Measures, run an EnergyPlus simulation on the resulting model, and finally apply a series of OpenStudio Reporting Measures. The OpenStudio Workflow (OSW) file format is used to describe which OpenStudio Measures to apply to the model and what arguments to pass to each measure.  The OSW format is explained in the following section.\n\n\nThe \n-h\n switch prints help specific to the \nrun\n subcommand:\n\n\nopenstudio.exe run -h\n\n\n\n\nThe \n-w\n or \n--workflow\n switches run the complete simulation workflow as described in an OSW file:\n\n\nopenstudio.exe run --workflow /path/to/workflow.osw\n\n\n\n\nThe \n--debug\n switch can be used to include additional outputs for debugging failing workflows and does not clean up the run directory:\n\n\nopenstudio.exe run --debug --workflow /path/to/workflow.osw\n\n\n\n\nThe \n-m\n or \n--measures_only\n switches run only the OpenStudio Model and EnergyPlus Measures but do not run the EnergyPlus simulation or OpenStudio Reporting Measures in an OSW file:\n\n\nopenstudio.exe run --measures_only /path/to/workflow.osw\n\n\n\n\nThe \n-p\n or \n--postprocess_only\n switches do not run the OpenStudio Modelm EnergyPlus Measures, or EnergyPlus simulation in an OSW file.  Existing simulation results are loaded and only OpenStudio Reporting Measures are run, this is useful for generating new reports without re-running simulations:\n\n\nopenstudio.exe run --postprocess_only /path/to/workflow.osw\n\n\n\n\nOSW Structure\n\n\nThe OpenStudio Workflow (OSW) format is a JSON file format that describes a simulation workflow.  In an OpenStudio Workflow, a seed OpenStudio Model is loaded.  OpenStudio Model Measures are applied to the seed model.  After these measures, the OpenStudio Model is translated to EnergyPlus IDF format.  Once in EnergyPlus IDF format, OpenStudio EnergyPlus Measures are applied.  After these measures, the EnergyPlus simulation is executed.  Once the EnergyPlus simulation is complete, OpenStudio Reporting Measures are applied which generate reports.  An error at any point in the workflow will halt the workflow.  Once the workflow is completed (successfully or unsuccessfully) an output OSW file is written which contains output related to running the workflow.\n\n\nAn example OSW project is included in the OpenStudio installer under './Examples/compact_osw'. To run this example, copy it to a user writable location and then:\n\n\n/path/to/openstudio.exe run -w /path/to/compact.osw\n\n\nThe OSW file format is described in JSON schema format \nhere\n.\n\n\nThe OpenStudio API includes the class \nWorkflowJSON\n which is able read, modify, and write the OSW file format.  The WorkflowJSON class also includes features for finding measures and files associated with a simulation workflow.\n\n\nThe WorkflowJSON associated with an OpenStudio Model can be accessed using \nmodel.workflowJSON\n.  The WorkflowJSON object can also be accessed from the OSRunner object within a measure using \nrunner.workflow\n.  Within the context of a measure, the WorkflowJSON object can be used to find files and measures associated with the simulation.  It can also be used to tell which OpenStudio Measures will be run during the workflow, what arguments they will be passed, and capture output from previously run measures.  However, during the course of a simulation workflow the OSW associated with an OpenStudio Model or OSRunner cannot be altered.\n\n\nAn example OSW is shown below, the meaning of key terms is explained in more detail later in this section:\n\n\n{\n  \nseed_file\n: \nbaseline.osm\n,\n  \nweather_file\n: \nUSA_CO_Golden-NREL.724666_TMY3.epw\n,\n  \nsteps\n: [\n    {\n      \nmeasure_dir_name\n: \nIncreaseWallRValue\n,\n      \narguments\n: {}\n    },\n    {\n      \nmeasure_dir_name\n: \nIncreaseRoofRValue\n,\n      \narguments\n: {\n        \nr_value\n: 45\n      }\n    },\n    {\n      \nmeasure_dir_name\n: \nSetEplusInfiltration\n,\n      \narguments\n: {\n        \nflowPerZoneFloorArea\n: 10.76\n      }\n    },\n    {\n      \nmeasure_dir_name\n: \nDencityReports\n,\n      \narguments\n: {\n        \noutput_format\n: \nCSV\n\n      }\n    }\n  ]\n}\n\n\n\n\nSeed File\n\n\nThe seed file is the file name of the OpenStudio Model to be loaded at the beginning of the simulation workflow.  The seed model may be empty or the memeber may be missing, in this case a newly constructed OpenStudio Model is passed to the first OpenStudio Model Measure.  The seed model is found using the logic documented for \nWorkflowJSON::findFile\n.\n\n\nWeather File\n\n\nThe weather file is the file name of the EnergyPlus Weather (EPW) file loaded at the beginning of the simulation workflow.  The weather file may be empty or the memeber may be missing.  The weather file is found using the logic documented for \nWorkflowJSON::findFile\n.  The following logic applies to the weather file during a simulation workflow:\n\n\n\n\nIf a weather file is specified in the OSW, that file replaces any weather file specified in the seed OpenStudio Model before measure processing begins.\n\n\nDuring OpenStudio Model Measure processing, the weather file may be changed by altering the WeatherFile object in the OpenStudio Model.\n\n\nOn translation to EnergyPlus, the weather file referenced in the OSM is found using WorkflowJSON.findFile and copied to in.epw in the run directory.\nEnergyPlus measures may change the weather file by copying files on top of in.epw.\n\n\n\n\nWorkflow Steps\n\n\nEach step listed in the OSW file describes an OpenStudio Measure to apply.  Measures are applied in order and must progress from OpenStudio Model Measures to OpenStudio EnergyPlus Measures to OpenStudio Reporting Measures.  Each step lists a \nmeasure_dir_name\n which is the directory name of an OpenStudio Measure to apply. Measures are found at run time according to logic in \nWorkflowJSON::findMeasure\n.  Each step specifies arguments to be passed to the measure, the measure argument's name is the key and the value to pass is the measure.  Optional arguments may be ommitted, default values will be used in this case.  The value passed to choice arguments may be either a valid choice value or a valid choice value display name.\n\n\nEnvironment Variables\n\n\nThe OpenStudio Command Line Interface can be configured with several environment variables.  In cases where a value can be configured with either a command line switch or an environment variable, the command line switch will take precedence. Custom environment variables configurations do not impact local or remote PAT runs.\n\n\nThe \nENERGYPLUS_EXE_PATH\n environment variable can be used to configure the CLI to use a different version of the EnergyPlus engine than the one OpenStudio is installed with:\n\n\nWindows\n\n\nset ENERGYPLUS_EXE_PATH=/path/to/EnergyPlus.exe\n\n\n\n\nUnix\n\n\nexport ENERGYPLUS_EXE_PATH=/path/to/energyplus\n\n\n\n\nThe \nRUBYLIB\n environment variable can be used to configure the CLI to require Ruby files from locations on the user's disk. Locations passed using the \n--include\n switch take precedence over the paths found in this environment variable:\n\n\nWindows\n\n\nset RUBYLIB=/home/git/project;/home/git/project/app/helpers\n\n\n\n\nUnix\n\n\nexport RUBYLIB=/home/git/project:/home/git/project/app/helpers\n\n\n\n\nThe \nGEM_PATH\n environment variable can be used to configure the CLI to load gems from a location on the user's disk. Locations passed using the \n--gem_path\n switch take precedence over the paths found in this environment variable:\n\n\nWindows\n\n\nset GEM_PATH=/home/gems1;/home/gems2\n\n\n\n\nUnix\n\n\nexport GEM_PATH=/home/gems1:/home/gems2\n\n\n\n\nThe \nGEM_HOME\n environment variable can be used to configure the CLI to install gems to a location on the user's disk. The location passed using the \n--gem_home\n switch takes precedence over the path found in this environment variable (note that the \ngem_install\n command does not yet work):\n\n\nWindows\n\n\nset GEM_HOME=/home/gems\n\n\n\n\nUnix\n\n\nexport GEM_HOME=/home/gems\n\n\n\n\nThese same environment variables apply when requiring \nopenstudio.rb\n from system ruby.  Note, that requiring \nopenstudio.rb\n from system ruby does not bring in any of the default gems that are embedded inside the CLI (i.e. the \nopenstudio-standards\n gem).  You must install these gems separately to ensure they are available when using system ruby.  The standard way to do this is with \nBundler\n.  A Gemfile is included in the Ruby directory of the OpenStudio installation, this can be used as a reference when setting up your own Gemfile to ensure that gems are compatible with the version of OpenStudio.\n\n\nLoading Custom Gems\n\n\nDevelopers commonly need to be able to override the version of a gem embedded in the OpenStudio CLI with one that they are working on.  Additionally, measure writers may wish to use gems that are not distributed with the OpenStudio CLI.  Neither of these use cases are an issue when using system ruby as the OpenStudio ruby bindings (i.e. \nopenstudio.rb\n) do not have embedded gems, bundler can be used to specify gem versions in this case.  When using the CLI there are two ways to override an embedded gem or provide access to another gem.  The first is to use the \n--include\n switch to add the directory containing the primary gem file (e.g. the directory containing \nopenstudio-standards.rb\n) to the ruby load path. The second is to install the gem to your system location, then use the \n--gem_path\n switch to include this location (e.g. \nC:\\ruby-2.2.4-x64-mingw32\\lib\\ruby\\gems\\2.2.0\\\n). Note that the gem path directory should have \nspecifications\n, \ngems\n, and other subdirectories in it.  Also, note that when using this second approach, a system gem will only override the embedded gem if the version is equal or greater to the embedded gem.  It can be useful to use the \n--verbose\n and \n-e\n switches to print some information that can verify the correct version of the gem is being loaded:\n\n\nopenstudio --verbose -I \\openstudio-standards\\openstudio-standards\\lib\\ -e \nrequire 'openstudio-standards'\n -e \nputs OpenstudioStandards::VERSION\n\n\n\n\n\nopenstudio --verbose --gem_path C:\\ruby-2.2.4-x64-mingw32\\lib\\ruby\\gems\\2.2.0\\ -e \nrequire 'openstudio-standards'\n -e \nputs OpenstudioStandards::VERSION", 
            "title": "Command Line Interface"
        }, 
        {
            "location": "/reference/command_line_interface/#command-overview", 
            "text": "The CLI is executed by calling the OpenStudio executable from the command line with a set of command line arguments.  Calling the CLI with no arguments (such as when double-clicking the executable) causes the CLI to print a help message and then exit.  Several switches which control program behavior may be passed immediately following the OpenStudio executable.  Switches often have both a short form and a long form for convienence. Multiple program level switches may be combined.  Program level switches include:  The  -h  or  --help  switches print the help message:  openstudio.exe --include /path/to/add/ --include /another/path/to/add  The  -I  or  --include  switches can be used to add additional directories to the Ruby $LOAD_PATH (this switch may be used more than once):  openstudio.exe --include /path/to/add/ --include /another/path/to/add  The  --gem_path  switch can be used to load gems from a location on the user's disk (this switch may be used more than once):  openstudio.exe --gem_path /home/gems1 --include /home/gems2  The  --gem_home  switch can be used to set the directory to install gems to (note that the  gem_install  command does not yet work):  openstudio.exe --gem_home /home/gems  The  --verbose  switch can be used to print additional information for debugging:  openstudio.exe --verbose  Program level switches (if any) are followed by a subcommand which directs the program to perform a particular function.  These subcommands are explained in further detail below.", 
            "title": "Command Overview"
        }, 
        {
            "location": "/reference/command_line_interface/#measure-subcommand", 
            "text": "The  measure  subcommand is used to query OpenStudio Measures on disk.  The following arguments may be passed to the  measure  subcommand.   The  -h  switch prints help specific to the  measure  subcommand:  openstudio.exe measure -h  The  -t  or  --update_all  switches process all measures in a given directory and updates their measure.xml files if updates to their content are detected.  Information about the measures is printed to standard out in JSON format:  openstudio.exe measure --update_all /path/to/measures/  The  -u  or  --update  switches process a single measure in a given directory and updates its measure.xml file if updates to the content are detected. Information about the measure is printed to standard out in JSON format:  openstudio.exe measure --update /path/to/measure/  The  -a  or  --compute_arguments  switches process a single measure in a given directory and updates its measure.xml file if updates to the content are detected. Information about the measure, including model specific arguments, is printed to standard out in JSON format:  openstudio.exe measure --compute_arguments /path/to/model.osm /path/to/measure/  or for an EnergyPlus Measure:  openstudio.exe measure --compute_arguments /path/to/model.idf /path/to/measure/", 
            "title": "Measure Subcommand"
        }, 
        {
            "location": "/reference/command_line_interface/#run-subcommand", 
            "text": "The  run  subcommand is used to load an OpenStudio Model, apply a series of OpenStudio Model Measures, translate to EnergyPlus IDF, apply a series of OpenStudio EnergyPlus Measures, run an EnergyPlus simulation on the resulting model, and finally apply a series of OpenStudio Reporting Measures. The OpenStudio Workflow (OSW) file format is used to describe which OpenStudio Measures to apply to the model and what arguments to pass to each measure.  The OSW format is explained in the following section.  The  -h  switch prints help specific to the  run  subcommand:  openstudio.exe run -h  The  -w  or  --workflow  switches run the complete simulation workflow as described in an OSW file:  openstudio.exe run --workflow /path/to/workflow.osw  The  --debug  switch can be used to include additional outputs for debugging failing workflows and does not clean up the run directory:  openstudio.exe run --debug --workflow /path/to/workflow.osw  The  -m  or  --measures_only  switches run only the OpenStudio Model and EnergyPlus Measures but do not run the EnergyPlus simulation or OpenStudio Reporting Measures in an OSW file:  openstudio.exe run --measures_only /path/to/workflow.osw  The  -p  or  --postprocess_only  switches do not run the OpenStudio Modelm EnergyPlus Measures, or EnergyPlus simulation in an OSW file.  Existing simulation results are loaded and only OpenStudio Reporting Measures are run, this is useful for generating new reports without re-running simulations:  openstudio.exe run --postprocess_only /path/to/workflow.osw", 
            "title": "Run Subcommand"
        }, 
        {
            "location": "/reference/command_line_interface/#osw-structure", 
            "text": "The OpenStudio Workflow (OSW) format is a JSON file format that describes a simulation workflow.  In an OpenStudio Workflow, a seed OpenStudio Model is loaded.  OpenStudio Model Measures are applied to the seed model.  After these measures, the OpenStudio Model is translated to EnergyPlus IDF format.  Once in EnergyPlus IDF format, OpenStudio EnergyPlus Measures are applied.  After these measures, the EnergyPlus simulation is executed.  Once the EnergyPlus simulation is complete, OpenStudio Reporting Measures are applied which generate reports.  An error at any point in the workflow will halt the workflow.  Once the workflow is completed (successfully or unsuccessfully) an output OSW file is written which contains output related to running the workflow.  An example OSW project is included in the OpenStudio installer under './Examples/compact_osw'. To run this example, copy it to a user writable location and then:  /path/to/openstudio.exe run -w /path/to/compact.osw  The OSW file format is described in JSON schema format  here .  The OpenStudio API includes the class  WorkflowJSON  which is able read, modify, and write the OSW file format.  The WorkflowJSON class also includes features for finding measures and files associated with a simulation workflow.  The WorkflowJSON associated with an OpenStudio Model can be accessed using  model.workflowJSON .  The WorkflowJSON object can also be accessed from the OSRunner object within a measure using  runner.workflow .  Within the context of a measure, the WorkflowJSON object can be used to find files and measures associated with the simulation.  It can also be used to tell which OpenStudio Measures will be run during the workflow, what arguments they will be passed, and capture output from previously run measures.  However, during the course of a simulation workflow the OSW associated with an OpenStudio Model or OSRunner cannot be altered.  An example OSW is shown below, the meaning of key terms is explained in more detail later in this section:  {\n   seed_file :  baseline.osm ,\n   weather_file :  USA_CO_Golden-NREL.724666_TMY3.epw ,\n   steps : [\n    {\n       measure_dir_name :  IncreaseWallRValue ,\n       arguments : {}\n    },\n    {\n       measure_dir_name :  IncreaseRoofRValue ,\n       arguments : {\n         r_value : 45\n      }\n    },\n    {\n       measure_dir_name :  SetEplusInfiltration ,\n       arguments : {\n         flowPerZoneFloorArea : 10.76\n      }\n    },\n    {\n       measure_dir_name :  DencityReports ,\n       arguments : {\n         output_format :  CSV \n      }\n    }\n  ]\n}", 
            "title": "OSW Structure"
        }, 
        {
            "location": "/reference/command_line_interface/#seed-file", 
            "text": "The seed file is the file name of the OpenStudio Model to be loaded at the beginning of the simulation workflow.  The seed model may be empty or the memeber may be missing, in this case a newly constructed OpenStudio Model is passed to the first OpenStudio Model Measure.  The seed model is found using the logic documented for  WorkflowJSON::findFile .", 
            "title": "Seed File"
        }, 
        {
            "location": "/reference/command_line_interface/#weather-file", 
            "text": "The weather file is the file name of the EnergyPlus Weather (EPW) file loaded at the beginning of the simulation workflow.  The weather file may be empty or the memeber may be missing.  The weather file is found using the logic documented for  WorkflowJSON::findFile .  The following logic applies to the weather file during a simulation workflow:   If a weather file is specified in the OSW, that file replaces any weather file specified in the seed OpenStudio Model before measure processing begins.  During OpenStudio Model Measure processing, the weather file may be changed by altering the WeatherFile object in the OpenStudio Model.  On translation to EnergyPlus, the weather file referenced in the OSM is found using WorkflowJSON.findFile and copied to in.epw in the run directory.\nEnergyPlus measures may change the weather file by copying files on top of in.epw.", 
            "title": "Weather File"
        }, 
        {
            "location": "/reference/command_line_interface/#workflow-steps", 
            "text": "Each step listed in the OSW file describes an OpenStudio Measure to apply.  Measures are applied in order and must progress from OpenStudio Model Measures to OpenStudio EnergyPlus Measures to OpenStudio Reporting Measures.  Each step lists a  measure_dir_name  which is the directory name of an OpenStudio Measure to apply. Measures are found at run time according to logic in  WorkflowJSON::findMeasure .  Each step specifies arguments to be passed to the measure, the measure argument's name is the key and the value to pass is the measure.  Optional arguments may be ommitted, default values will be used in this case.  The value passed to choice arguments may be either a valid choice value or a valid choice value display name.", 
            "title": "Workflow Steps"
        }, 
        {
            "location": "/reference/command_line_interface/#environment-variables", 
            "text": "The OpenStudio Command Line Interface can be configured with several environment variables.  In cases where a value can be configured with either a command line switch or an environment variable, the command line switch will take precedence. Custom environment variables configurations do not impact local or remote PAT runs.  The  ENERGYPLUS_EXE_PATH  environment variable can be used to configure the CLI to use a different version of the EnergyPlus engine than the one OpenStudio is installed with:  Windows  set ENERGYPLUS_EXE_PATH=/path/to/EnergyPlus.exe  Unix  export ENERGYPLUS_EXE_PATH=/path/to/energyplus  The  RUBYLIB  environment variable can be used to configure the CLI to require Ruby files from locations on the user's disk. Locations passed using the  --include  switch take precedence over the paths found in this environment variable:  Windows  set RUBYLIB=/home/git/project;/home/git/project/app/helpers  Unix  export RUBYLIB=/home/git/project:/home/git/project/app/helpers  The  GEM_PATH  environment variable can be used to configure the CLI to load gems from a location on the user's disk. Locations passed using the  --gem_path  switch take precedence over the paths found in this environment variable:  Windows  set GEM_PATH=/home/gems1;/home/gems2  Unix  export GEM_PATH=/home/gems1:/home/gems2  The  GEM_HOME  environment variable can be used to configure the CLI to install gems to a location on the user's disk. The location passed using the  --gem_home  switch takes precedence over the path found in this environment variable (note that the  gem_install  command does not yet work):  Windows  set GEM_HOME=/home/gems  Unix  export GEM_HOME=/home/gems  These same environment variables apply when requiring  openstudio.rb  from system ruby.  Note, that requiring  openstudio.rb  from system ruby does not bring in any of the default gems that are embedded inside the CLI (i.e. the  openstudio-standards  gem).  You must install these gems separately to ensure they are available when using system ruby.  The standard way to do this is with  Bundler .  A Gemfile is included in the Ruby directory of the OpenStudio installation, this can be used as a reference when setting up your own Gemfile to ensure that gems are compatible with the version of OpenStudio.", 
            "title": "Environment Variables"
        }, 
        {
            "location": "/reference/command_line_interface/#loading-custom-gems", 
            "text": "Developers commonly need to be able to override the version of a gem embedded in the OpenStudio CLI with one that they are working on.  Additionally, measure writers may wish to use gems that are not distributed with the OpenStudio CLI.  Neither of these use cases are an issue when using system ruby as the OpenStudio ruby bindings (i.e.  openstudio.rb ) do not have embedded gems, bundler can be used to specify gem versions in this case.  When using the CLI there are two ways to override an embedded gem or provide access to another gem.  The first is to use the  --include  switch to add the directory containing the primary gem file (e.g. the directory containing  openstudio-standards.rb ) to the ruby load path. The second is to install the gem to your system location, then use the  --gem_path  switch to include this location (e.g.  C:\\ruby-2.2.4-x64-mingw32\\lib\\ruby\\gems\\2.2.0\\ ). Note that the gem path directory should have  specifications ,  gems , and other subdirectories in it.  Also, note that when using this second approach, a system gem will only override the embedded gem if the version is equal or greater to the embedded gem.  It can be useful to use the  --verbose  and  -e  switches to print some information that can verify the correct version of the gem is being loaded:  openstudio --verbose -I \\openstudio-standards\\openstudio-standards\\lib\\ -e  require 'openstudio-standards'  -e  puts OpenstudioStandards::VERSION   openstudio --verbose --gem_path C:\\ruby-2.2.4-x64-mingw32\\lib\\ruby\\gems\\2.2.0\\ -e  require 'openstudio-standards'  -e  puts OpenstudioStandards::VERSION", 
            "title": "Loading Custom Gems"
        }, 
        {
            "location": "/reference/parametric_studies/", 
            "text": "Parametric Analysis Tool (PAT) Interface Guide\n\n\n\nPAT removes the need to hand edit each model to try out different architectures, energy efficiency measures, and mechanical systems. PAT applies scripts to your baseline model and lets you quickly compare many alternatives. OpenStudio has developed a workflow that allows energy modelers to create and run a customized parametric analysis using commercially available cloud computing services. This workflow will enable anyone to perform powerful parametric studies in a reasonable time for a relatively low cost.\n\n\n\n\nCreating a Project\n\n\nThe \nParametric Analysis Tool Quick Start Guide (PDF)\n provides an introduction to the interface and workflow for creating multiple design alternatives from a seed model.\n\n\nWhen you first open PAT you will see the screen below. It shows the workflow:\n\n\n\n\nOrganize and edit measures for project\n\n\nSelect measures and create design alternatives\n\n\nRun simulations\n\n\nCreate and view reports\n\n\n\n\n\n\nAbove: This is the opening screen for PAT. It gives you an overview of the workflow.\n\n\nYou can move through the four vertical tabs on the left navigation by working in order from top to bottom.\n\n\nTo create a project use the menu item \nFile-\nNew Project\n\n\n\n\nAbove: The file menu provides new, open, save as, and other functionality.\n\n\n\n\nAbove: The dialog takes you to a window to save your new project.\n\n\n\n\n\nAbove: The video above shows the creation of a new project and gives a short introduction to the interface.\n\n\n\n\nLoading a Baseline Model\n\n\nSelect your baseline model by hitting the browse button or typing in a path to your baseline OSM (OpenStudio Model) file. The weather file must be set on the baseline model before assigning it as the baseline in PAT.\n\n\n\n\nAbove: The dialog takes you to a window to save your new project.\n\n\n\n\nOrganize and Edit Measures for Project\n\n\nTo add measures to your project, drag measures from the library to the central panel.\n\n\nIf you want to learn more about measures, check out the \nAbout Measures\n section.\n\n\nThere are three types of measures:\n\n\n\n\nOpenStudio measures\n are run on the OSM model before it is converted to an IDF.\n\n\nEnergyPlus measures\n can be run on the IDF file before it is handed to EnergyPlus.\n\n\nReporting measures\n produce reports to chart results, provide quality assurance, and quality control on models.\n\n\n\n\nDrag measures from the library onto a drop zone in the middle panel. You must choose the right type of measure and the way you want it applied. Choose the \nAlways Run Measures\n if you want the measure to run on every design alternative. Or, choose a \nMeasure Group\n for measures you do not want to run on every model. Usually, measure groups contain one type of measure with different parameters, because only one measure from a measure group can be applied to each design alternative.\n\n\nThe measures are applied to the model in order from top to bottom. You can reorder measure groups and always apply measures by using the gray arrows on the right.\n\n\n\n\nAbove: The \"Set Window to Wall Ratio by Facade Group 1\" contains 3 versions of the same measure with different parameter settings. The next section will show how to set measure parameters.\n\n\nCheck out the \nMeasure Writing Guide\n and start writing your own custom measures.\n\n\n\n\n\nAbove: Adding measures to your project and editing the parameters\n\n\nDefining Measures\n\n\nYou can edit the measure parameters and names by selecting the measure in the central panel. The measure will be highlighted with orange and the right panel will go to the \"Edit\" tab.\n\n\n\n\nAbove: Select a measure in the central panel and view the fields available for editing in the \"Edit\" panel on the right.\n\n\n\n\nAbove: A warning icon will be next to the measure if a required field is empty. Go to the \"Edit\" tab on the right panel and look for the red text.\n\n\nDownloading Measures from the Building Component Library\n\n\nBefore you can download measures from BCL, you will need an API key. Follow the instructions in the \nGetting Started section\n to get your key.\n\n\nFrom the \"Measures\" menu and \"Find Measures\" along the top or the \"Find Measures on BCL\" button at the bottom of the \"Library\" you can access the BCL.\n\n\nThe \"Sync Project Measures with Library\" will updated any older measures in your project to the latest versions.\n\n\n\n\nAbove: One of the ways to access the BCL measures is through the menu.\n\n\nSearch for specific measures or browse through the categories.\n\n\nThe \"Check All\" button can be used to select all the measures on a page view. If you already have a measure in your library the check box will be grayed out and checked.\n\n\n\n\nAbove: Browse categories or search for measures to download.\n\n\nYou can also search and browse measures on the \nBuilding Component Library site.\n\n\nDuplicating and Creating New Measures\n\n\nIf you cannot find the measure you need, you can duplicate a measure and adjust it or you can write a custom measure. Learn more about writing measures in the \nMeasure Writing Guide\n\n\n\n\nAbove: Create your own measures with the features provided on the bottom of the right panel.\n\n\nHit the \"New Measure\" icon to open a dialog to create your own measure. Write a descriptive title, more detailed descriptions, and select the measure type and taxonomy.\n\n\nDuplicating a measure opens up a similar dialog, but the name of the measure will have \"copy\" added at the end.\n\n\nThe \nMeasure Writing Guide\n will guide you through this process and provide best practices.\n\n\n\n\nAbove: The dialog for creating your new measure is shown above.\n\n\nThe Modeler Description is meant to assist the energy modeler. It should explain in some detail how the measure manipulates the model and, where appropriate, what model objects are being added or altered. It should offer any special guidance that the measure writer wants to communicate to people using the measure.\n\n\n\n\nSelect Measures and Create Design Alternatives\n\n\n\n\nAbove: This video shows you how to create design alternatives in an OpenStudio Parametric Analysis Tool Project.\n\n\n\n\nRun Simulations\n\n\nSelect the design alternative you want to run. Selected alternatives turn the yellow-orange. Hit the run button to start the simulations.\n\n\nIf you want to run a daylighting analysis with Radiance, select that option here.\n\n\nYou must select the design alternatives you want to run before hitting the run buttons. Selected items have an orange highlight.\n\n\n\n\nAbove: Screenshot of the \"Run\" tab with design alternatives selected.\n\n\n\n\n\nAbove: Running your simulations.\n\n\n\n\nCreate and View Reports\n\n\n\n\nAbove: This video shows the simulation results of a parametric analysis and then shows you how to inspect a specific design alternative in the SketchUp Plugin.\n\n\n\n\n\n\n\nRunning on the Cloud\n\n\nThere are a few things to do before you click the \"Turn on Cloud\" button. First, fill out the Cloud Settings dialogs from the Cloud menu, run your baseline model locally, and then make sure you have selected all of the design alternatives that you want to run. Choosing \"Select All\" will select all jobs that have not already been run locally, or on a previous cloud session.\n\n\nSelect your baseline model, then run locally before you start the cloud to confirm that it is valid and will run properly. To do this you can deselect all other design alternatives, and then select the baseline only.\n\n\n\n\nAbove: Get to the Cloud Settings at any time from the \"Cloud\" menu.\n\n\nAdd information on your Amazon EC2 account and agree to the terms on the first screen. Get an Amazon EC2 account and learn more about using Amazon cloud at \naws.amazon.com\n. Use the AWS Console to monitor your account charges. \nNot monitoring your account carefully can result in unexpected charges.\n\n\nCurrently only Amazon EC2 is available through PAT.\n\n\n\n\nAbove: Fill out the first screen and agree to terms before continuing to the second screen.\n\n\nOn the second screen of the \"Cloud Settings\" dialog, confirm that you have chosen the desired server, worker, and number of workers.\n\n\nAs soon as you hit the \"Turn on Cloud\" button you will start incurring charges, and the smallest increment is one hour. If you have to cancel and re-start it you will be charged again.\n\n\nReview Amazon pricing at \nhttp://aws.amazon.com/ec2/pricing/\n.\n\n\n\n\nAbove: Fill out the first screen and agree to terms before continuing to the second screen.\n\n\n\n\n\nAbove: The video above demonstrates running simulations on the cloud.\n\n\nThe \"Monitor Use\" dialog under the Cloud menu will show you how many instances you have in your current project as well as other projects. If your \"Total Instances Running\" is more than 0, and you don't know why, you can go to the EC2 Console website to terminate them. The \"Estimated EC2 Charges\" value is directly from Amazon, but may be up to 24 hours delayed. As a result you won't see this change on the fly as you are working on a project, you will typically see it the next day.\n\n\n\n\nAbove: Open this dialog from the \"Cloud\" menu.\n\n\nThe \"Turn on the Cloud\" button has several states to let you know the status of the cloud.\n\n\n\n\nAbove: The states of the cloud button are shown.\n\n\nYou can download standard or detailed results from your runs. If you want detailed results, click on the download button in the table. You can choose to download all of the results in detail but it may be a large download.\n\n\n\n\nAbove: The states of the cloud download button are shown.\n\n\nWhile your project is running on the cloud, you can choose the design alternative and select \"Download Detailed Results for Selected File\" button if you want more detailed data on some of the options.\n\n\nQuitting PAT while the cloud is on will not close the EC2 instances. If you Launch PAT again but open a different project it may look like the cloud is off, but that is only relevant for that current project.\n\n\nTo properly end the cloud session in PAT, re-open the PAT project (if you have closed it) and then click the button to stop the cloud. For a few minutes you will see \"Stopping Cloud.\"\n\n\nOnce you stop the cloud you will no longer be able to download detailed simulation results.\n If this happens and you want to get one, you can always run that job locally. It is generally not recommended to download detailed results for all design alternatives, as that will use a lot of hard drive space and network bandwidth.\n\n\nIt is always a good idea to go to the EC2 website to confirm that the instances have shut down. To view your EC2 web console, click the \"Manage all Projects with AWS Console\" in the \"Monitor Use\" dialog or \"AWS Management Console\" in the \"Cloud Settings\" dialog. It will take you to this address \nhttp://aws.amazon.com/console/\n.  Click \"Sign in to the AWS Console\"\n\n\n\n\nAbove: Check your status on AWS and terminate sessions if you have problems in PAT.\n\n\nOpenStudio Cloud Management Console\n\n\nWhile your runs are completing on the cloud and after they are finished, you can explore your results with the OpenStudio Cloud Management Console.\n\n\n\n\nAbove: This pie chart shows the progress of the runs. Select \"View Analysis\" to explore results.\n\n\n\n\nAbove: The red boxes added to the screenshot above shows where you can select charts and download results in different formats:\n\n\n\n\nList of Measures\n\n\nList of Variables\n\n\nView Parallel Coordinates Plot\n\n\nView Scatter Plot\n\n\nView XY Plot\n\n\nInteractive XY Plot\n\n\nDownload CSV\n\n\nDownload R Data Frame\n\n\nDebug Log\n\n\n\n\nViewing Results\n\n\nYou can open individual design alternative reports (.html files) in your browser. EnergyPlus and standard and calibration OpenStudio reports can be found by right clicking on a design alternative, on the Results tab, and selecting the results you want to view.\n\n\n\n\nAbove: Right click on design alternative to get these options. If your model includes calibration reports, the calibration button at the top of the results will display those in a table format in the application.\n\n\nPublications\n\n\nA Parametric Analysis Tool for Building Energy Design Workflows: Application to a Utility Design Assistance Incentive Program (PDF)", 
            "title": "Parametric Analysis Tool (PAT) Interface Guide"
        }, 
        {
            "location": "/reference/parametric_studies/#creating-a-project", 
            "text": "The  Parametric Analysis Tool Quick Start Guide (PDF)  provides an introduction to the interface and workflow for creating multiple design alternatives from a seed model.  When you first open PAT you will see the screen below. It shows the workflow:   Organize and edit measures for project  Select measures and create design alternatives  Run simulations  Create and view reports    Above: This is the opening screen for PAT. It gives you an overview of the workflow.  You can move through the four vertical tabs on the left navigation by working in order from top to bottom.  To create a project use the menu item  File- New Project   Above: The file menu provides new, open, save as, and other functionality.   Above: The dialog takes you to a window to save your new project.   Above: The video above shows the creation of a new project and gives a short introduction to the interface.", 
            "title": "Creating a Project"
        }, 
        {
            "location": "/reference/parametric_studies/#loading-a-baseline-model", 
            "text": "Select your baseline model by hitting the browse button or typing in a path to your baseline OSM (OpenStudio Model) file. The weather file must be set on the baseline model before assigning it as the baseline in PAT.   Above: The dialog takes you to a window to save your new project.", 
            "title": "Loading a Baseline Model"
        }, 
        {
            "location": "/reference/parametric_studies/#organize-and-edit-measures-for-project", 
            "text": "To add measures to your project, drag measures from the library to the central panel.  If you want to learn more about measures, check out the  About Measures  section.  There are three types of measures:   OpenStudio measures  are run on the OSM model before it is converted to an IDF.  EnergyPlus measures  can be run on the IDF file before it is handed to EnergyPlus.  Reporting measures  produce reports to chart results, provide quality assurance, and quality control on models.   Drag measures from the library onto a drop zone in the middle panel. You must choose the right type of measure and the way you want it applied. Choose the  Always Run Measures  if you want the measure to run on every design alternative. Or, choose a  Measure Group  for measures you do not want to run on every model. Usually, measure groups contain one type of measure with different parameters, because only one measure from a measure group can be applied to each design alternative.  The measures are applied to the model in order from top to bottom. You can reorder measure groups and always apply measures by using the gray arrows on the right.   Above: The \"Set Window to Wall Ratio by Facade Group 1\" contains 3 versions of the same measure with different parameter settings. The next section will show how to set measure parameters.  Check out the  Measure Writing Guide  and start writing your own custom measures.   Above: Adding measures to your project and editing the parameters", 
            "title": "Organize and Edit Measures for Project"
        }, 
        {
            "location": "/reference/parametric_studies/#defining-measures", 
            "text": "You can edit the measure parameters and names by selecting the measure in the central panel. The measure will be highlighted with orange and the right panel will go to the \"Edit\" tab.   Above: Select a measure in the central panel and view the fields available for editing in the \"Edit\" panel on the right.   Above: A warning icon will be next to the measure if a required field is empty. Go to the \"Edit\" tab on the right panel and look for the red text.", 
            "title": "Defining Measures"
        }, 
        {
            "location": "/reference/parametric_studies/#downloading-measures-from-the-building-component-library", 
            "text": "Before you can download measures from BCL, you will need an API key. Follow the instructions in the  Getting Started section  to get your key.  From the \"Measures\" menu and \"Find Measures\" along the top or the \"Find Measures on BCL\" button at the bottom of the \"Library\" you can access the BCL.  The \"Sync Project Measures with Library\" will updated any older measures in your project to the latest versions.   Above: One of the ways to access the BCL measures is through the menu.  Search for specific measures or browse through the categories.  The \"Check All\" button can be used to select all the measures on a page view. If you already have a measure in your library the check box will be grayed out and checked.   Above: Browse categories or search for measures to download.  You can also search and browse measures on the  Building Component Library site.", 
            "title": "Downloading Measures from the Building Component Library"
        }, 
        {
            "location": "/reference/parametric_studies/#duplicating-and-creating-new-measures", 
            "text": "If you cannot find the measure you need, you can duplicate a measure and adjust it or you can write a custom measure. Learn more about writing measures in the  Measure Writing Guide   Above: Create your own measures with the features provided on the bottom of the right panel.  Hit the \"New Measure\" icon to open a dialog to create your own measure. Write a descriptive title, more detailed descriptions, and select the measure type and taxonomy.  Duplicating a measure opens up a similar dialog, but the name of the measure will have \"copy\" added at the end.  The  Measure Writing Guide  will guide you through this process and provide best practices.   Above: The dialog for creating your new measure is shown above.  The Modeler Description is meant to assist the energy modeler. It should explain in some detail how the measure manipulates the model and, where appropriate, what model objects are being added or altered. It should offer any special guidance that the measure writer wants to communicate to people using the measure.", 
            "title": "Duplicating and Creating New Measures"
        }, 
        {
            "location": "/reference/parametric_studies/#select-measures-and-create-design-alternatives", 
            "text": "Above: This video shows you how to create design alternatives in an OpenStudio Parametric Analysis Tool Project.", 
            "title": "Select Measures and Create Design Alternatives"
        }, 
        {
            "location": "/reference/parametric_studies/#run-simulations", 
            "text": "Select the design alternative you want to run. Selected alternatives turn the yellow-orange. Hit the run button to start the simulations.  If you want to run a daylighting analysis with Radiance, select that option here.  You must select the design alternatives you want to run before hitting the run buttons. Selected items have an orange highlight.   Above: Screenshot of the \"Run\" tab with design alternatives selected.   Above: Running your simulations.", 
            "title": "Run Simulations"
        }, 
        {
            "location": "/reference/parametric_studies/#create-and-view-reports", 
            "text": "Above: This video shows the simulation results of a parametric analysis and then shows you how to inspect a specific design alternative in the SketchUp Plugin.", 
            "title": "Create and View Reports"
        }, 
        {
            "location": "/reference/parametric_studies/#running-on-the-cloud", 
            "text": "There are a few things to do before you click the \"Turn on Cloud\" button. First, fill out the Cloud Settings dialogs from the Cloud menu, run your baseline model locally, and then make sure you have selected all of the design alternatives that you want to run. Choosing \"Select All\" will select all jobs that have not already been run locally, or on a previous cloud session.  Select your baseline model, then run locally before you start the cloud to confirm that it is valid and will run properly. To do this you can deselect all other design alternatives, and then select the baseline only.   Above: Get to the Cloud Settings at any time from the \"Cloud\" menu.  Add information on your Amazon EC2 account and agree to the terms on the first screen. Get an Amazon EC2 account and learn more about using Amazon cloud at  aws.amazon.com . Use the AWS Console to monitor your account charges.  Not monitoring your account carefully can result in unexpected charges.  Currently only Amazon EC2 is available through PAT.   Above: Fill out the first screen and agree to terms before continuing to the second screen.  On the second screen of the \"Cloud Settings\" dialog, confirm that you have chosen the desired server, worker, and number of workers.  As soon as you hit the \"Turn on Cloud\" button you will start incurring charges, and the smallest increment is one hour. If you have to cancel and re-start it you will be charged again.  Review Amazon pricing at  http://aws.amazon.com/ec2/pricing/ .   Above: Fill out the first screen and agree to terms before continuing to the second screen.   Above: The video above demonstrates running simulations on the cloud.  The \"Monitor Use\" dialog under the Cloud menu will show you how many instances you have in your current project as well as other projects. If your \"Total Instances Running\" is more than 0, and you don't know why, you can go to the EC2 Console website to terminate them. The \"Estimated EC2 Charges\" value is directly from Amazon, but may be up to 24 hours delayed. As a result you won't see this change on the fly as you are working on a project, you will typically see it the next day.   Above: Open this dialog from the \"Cloud\" menu.  The \"Turn on the Cloud\" button has several states to let you know the status of the cloud.   Above: The states of the cloud button are shown.  You can download standard or detailed results from your runs. If you want detailed results, click on the download button in the table. You can choose to download all of the results in detail but it may be a large download.   Above: The states of the cloud download button are shown.  While your project is running on the cloud, you can choose the design alternative and select \"Download Detailed Results for Selected File\" button if you want more detailed data on some of the options.  Quitting PAT while the cloud is on will not close the EC2 instances. If you Launch PAT again but open a different project it may look like the cloud is off, but that is only relevant for that current project.  To properly end the cloud session in PAT, re-open the PAT project (if you have closed it) and then click the button to stop the cloud. For a few minutes you will see \"Stopping Cloud.\"  Once you stop the cloud you will no longer be able to download detailed simulation results.  If this happens and you want to get one, you can always run that job locally. It is generally not recommended to download detailed results for all design alternatives, as that will use a lot of hard drive space and network bandwidth.  It is always a good idea to go to the EC2 website to confirm that the instances have shut down. To view your EC2 web console, click the \"Manage all Projects with AWS Console\" in the \"Monitor Use\" dialog or \"AWS Management Console\" in the \"Cloud Settings\" dialog. It will take you to this address  http://aws.amazon.com/console/ .  Click \"Sign in to the AWS Console\"   Above: Check your status on AWS and terminate sessions if you have problems in PAT.", 
            "title": "Running on the Cloud"
        }, 
        {
            "location": "/reference/parametric_studies/#openstudio-cloud-management-console", 
            "text": "While your runs are completing on the cloud and after they are finished, you can explore your results with the OpenStudio Cloud Management Console.   Above: This pie chart shows the progress of the runs. Select \"View Analysis\" to explore results.   Above: The red boxes added to the screenshot above shows where you can select charts and download results in different formats:   List of Measures  List of Variables  View Parallel Coordinates Plot  View Scatter Plot  View XY Plot  Interactive XY Plot  Download CSV  Download R Data Frame  Debug Log", 
            "title": "OpenStudio Cloud Management Console"
        }, 
        {
            "location": "/reference/parametric_studies/#viewing-results", 
            "text": "You can open individual design alternative reports (.html files) in your browser. EnergyPlus and standard and calibration OpenStudio reports can be found by right clicking on a design alternative, on the Results tab, and selecting the results you want to view.   Above: Right click on design alternative to get these options. If your model includes calibration reports, the calibration button at the top of the results will display those in a table format in the application.", 
            "title": "Viewing Results"
        }, 
        {
            "location": "/reference/parametric_studies/#publications", 
            "text": "A Parametric Analysis Tool for Building Energy Design Workflows: Application to a Utility Design Assistance Incentive Program (PDF)", 
            "title": "Publications"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/", 
            "text": "Parametric Analysis Tool 2.1.0 (PAT) Interface Guide\n\n\n\nOpenStudio's PAT allows you to quickly try out and compare manually specified combinations of measures, optimize designs, calibrate models, perform parametric sensitivity analysis, and much more.  Manually specified combinations of measures may be run locally on your computer.  Algorithmic analyses (e.g. optimization, design of experiments, etc) can be run by connecting to a separately provisioned instance of the OpenStudio server.\n\n\n\n\nCreate a Project\n\n\nWhen you launch PAT you have the option to create a new project or open an existing project.\n\n\n\n\n\n\nTo create a new project :\n\n\n\n\nClick the \"Make New Project\" button.\n\n\nType the name for the project, and click \"Continue.\"  \nNote that project names should not include spaces.\n\n\n\n\n\n\n\n\nBrowse to the directory where you want the project saved, and click the \"Open\" button.  \nPAT will create a new directory for your project at this location.\n\n\n\n\n\n\n\n\n\n\nOpen an Existing Project\n\n\nYou can open an existing PAT project when you first launch PAT or from the file menu. In either case a dialog will open to find the path where you created your Project. There is no file to select, just browse to the top level project directory.\n\n\n\n\n\n\n\n\nInterface Overview\n\n\nPAT 2.1.0 functionality is broken down into six tabs along the left side of the window:\n\n\n\n\nSpecify analysis mode (manual or algorithmic), seed models, weather files, measures, and measure options.\n\n\nManually create design alternatives \n(Not used for algorithmic analysis)\n\n\nSpecify outputs for algorithm-based analysis \n(Not used for manual analysis)\n\n\nRun an analysis and manage the analysis server\n\n\nView reports\n\n\nView the server\n\n\n\n\nIn general, a PAT workflow moves through the six vertical tabs from top to bottom.  PAT allows the user to specify design alternatives manually or automate the process using a selection of algorithms - e.g. sampling, optimization, etc.  The analysis mode is selected at the top of tab one, and dictates whether tabs two or three are used along with the types of computing resources (local or cloud) that can be selected on tab four.  The video below shows the creation of a new project and walks through the workflow to create and run a \nmanual\n analysis.\n\n\n\n\n\nAbove: PAT 2.0.0 introduction video for manual analysis mode\n\n\n\n\n\n\nLoad a Seed Model and Weather File\n\n\nSelect your seed model, the model that will serve as the basis for creating design alternatives, by clicking the folder symbol for the \"Default Seed Model\". Select your weather file by clicking the folder symbol for the \"Default Weather File.\"\n\n\n\n\n\n\nNote: PAT 2.1.0 allows the user to specify multiple seed and weather files that may all be used within a project.\n\n\n\n\nAdd Measures and Create Measure Options\n\n\nIf you want to learn more about measures, check out the \nAbout Measures\n section.\n\nCheck out the \nMeasure Writing Guide\n to start writing your own custom measures.\n\n\nPAT works with three classes of measures:\n\n\n\n\nOpenStudio measures\n operate on the OpenStudio model (.osm) before it is converted to an EnergyPlus input file (.idf).\n\n\nEnergyPlus measures\n operate on the .idf file just before it is simulated in EnergyPlus.\n\n\nReporting measures\n run after the simulation has been performed and are used to produce postprocess results, automate quality checks, and create custom reports and chart.\n\n\n\n\nClick the \"Add Measure\" buttons by the OpenStudio, EnergyPlus, or Reporting measure text to add measures of that type to your project. The Building Component Library (BCL) dialog that opens after clicking the buttons allows you to add measures stored on your computer or to find new measures from the online BCL.\n\n\nDownload Measures From the Building Component Library (BCL)\n\n\nThe Building Component Library dialog allows you to filter by measure location, measure type, measure category, and  measures sub-category. When it first opens it will have all locations checked except for BCL (Online). It will also have only one measure type checked, based on which button you clicked in the measures tab. Nothing is checked by default in the \"Category\" section which has the effect of all categories showing. Once you check one or more categories or sub-categories only those will be shown. That filter will remain in place when you come back to this dialog in the future. So if you don't see the measure you expect, make sure the category filters are setup correctly.\n\n\nPAT keeps track of four distinct measure locations:\n\n\n\n\nMy Project\n - includes measures that have already been added to your current PAT project.\n\n\nMeasure Directory\n - shows measures you have stored in a user configurable \"MyMeasures\" directory on your computer.  A best practice is to only create or modify measures in your \"MyMeasures\" directory.\n\n\nLocal \n - includes any BCL measures you may have already downloaded to your computer.\n\n\nBCL (Online)\n  - contains all publicly available measures located in the online BCL. To use add these to a project they must first be downloaded, which copies them to your local library.\n\n\n\n\n\n\nNote: In rare instances, the BCL dialog may appear empty even when local content exists or the online BCL has been added to the filter.  This can happen when OpenStudio's \"measure manager\" process is not halted normally.  The issue is easily resolved by quitting PAT, and using your computer's task manager to look for an \"openstudio\" process.  Halting this process enables the BCL dialog to work normally again.\n\n\n\n\nTo download measures:\n\n\n\n\nCheck the \"BCL (Online)\" box\n under filter options to show BCL content.\n\n\nCheck filters\n to narrow down the list of measures by type, category, and subcategory.\n\n\nClick the black arrow\n in the \"Edit/Copy\" column of the grid once you've found a measure you're interested in.\n\n\n\n\nWhen the symbol changes from a black download arrow to the green document symbol the measure has been downloaded and added to your local library.  Clicking the green document symbol will create a copy of the measure in your \"MyMeasures\" directory.  This is useful when creating variations of existing measures.\n\n\nOnce downloaded, PAT will continue to check to see if an updated version is available in the BCL.  Available updates will be indicated with a symbol in the \n\"updates\" column.  Simply click the symbol to download the latest version to your local library.\n\n\nAdd Measures to the Project\n\n\nClicking the blue plus will add a measure from your local library or \"MyMeasures\" directory to your project.  Measures with a gray plus have not yet been downloaded from the BCL, and cannot be added.\n\n\n\n\nAbove: Filtered View showing Online BCL OpenStudio Fenestration measures. The \"Set Window to Wall Ratio\" measure has been downloaded from the BCL but not yet added to the project.\n\n\n\nAfter adding a measure to your project the blue plus will change to a green check mark. \n\n\n\n\n\nAfter closing the BCL dialog, measures are now loaded into the project.  In this example, two measures have been added.\n\n\n\n\nThe ordering of measures in PAT matters.\n  Measures run from top to bottom in the user interface, and they may be reordered using the up or down arrows at the right.  The \"x,\" also at the right, may be used to delete a measure from the project. \n\n\nNote that each measure also has an arrow just to its left.  This arrow is used to expand and collapse the measure, allowing the user to specify variables, arguments, and more.\n\n\n\n\n\nCreate Measure Options and Define Variables\n\n\nEvery measure in the manual analysis project needs at least one measure \"option.\"  An option describes a measure and particular set of measure arguments that will be applied to create a specific design alternative.  For example, a generic fan efficiency measure would likely have an efficiency argument.  Applying that generic measure with a specific value for efficiency would constitute an option representing a specific fan product.\n\n\nClicking the \n\"Add Measure Option\"\n button adds a column to the right side of the grid for the measure.  Newly created options have a generic option name, description, and inherit any default values specified by the measure.\n\n\n\n\n\nThe variable column and associated checkboxes are used to specify which arguments will vary across design options.  Each option must be given a unique (and meaningful) name that will be referenced when constructing design alternatives.  The option description field is free-form, and can be used to capture notes regarding the option that may be used by reporting measures.  In this example, three design options have been created with variable window to wall ratios.\n\n\n\n\n\nAdd the OpenStudio Results Reporting Measure to the Project\n\n\nThe standard OpenStudio Results measure \nmust\n be added to every project as an option for each design alternative.  Manual project reports and most algorithmic workflows rely on outputs defined by this measure to work properly.  PAT will run without this measure and an associated measure option, but results will not appear correctly.\n\n\n\n\n\n\n\n\nCreate Design Alternatives\n\n\nThe second tab is used to create design alternatives.  Buttons can be used to create and copy individual alternatives or create one alternative for each measure option in the project.  Design alternatives appear in a simple grid that allows rapid \"pull down menu\" selection of seed model, weather file, and measure options.  Design alternative name and description fields are free form.  It is considered a best practice to enter meaningful descriptions in these fields to document the project.\n\n\n\n\nDesign alternatives may be deleted using the \"x\" button on the left side of the screen.  Rows may be rearranged manually using the up and down arrows to the left, or sorted alphabetically by clicking the grid headings.  The order of design alternatives on this tab has no bearing on simulation order or results reporting.\n\n\nNote: Recall from the previous section that each design alternative must have an OpenStudio Results measure option.  A useful tip for accomplishing this quickly is to highlight the first option cell in the OpenStudio Results column, type the first letter of your Option (the letter O in this example), tap the down arrow, and repeat.\n\n\n\n\n\n\nAdding Outputs in Manual Mode\n\n\nThis tab is unused in manual mode, and is revisted later in this document when discussing algorithmic workflows.\n\n\n\n\n\n\nRunning an Analysis Locally\n\n\nPAT 2.1.0 configures a \"mini server\" on your computer to perform local analysis.  This is essentially the same server that is used to run large-scale cloud analyses, enabling projects to scale and migrate between computing systems easily.  The local server begins to start up as soon as you launch PAT, and is usually ready to perform analysis within a minute.  This is indicated by a server status green checkmark at the top of the screen.\n\n\n\n\nClicking the Run Entire Workflow button starts an analysis.\n\n\n\n\nAs simulation results are completed, PAT's status will update to appraise you of progress.  Changing tabs during active simulation is prevented to avoid accidentally altering an analysis mid-run.\n\n\n\n\nCompleted design alternatives may be expanded to view measure or simulation log messages. The OpenStudio standard report, EnergyPlus output, results from any other reporting measure options may be viewed by clicking the graph symbol and selecting the report of interest.\n\n\n\n\n\n\n\n\nView Analysis Reports\n\n\nPAT 2.1.0 includes three built-in reports that help the user compare design alternatives.\n\n\nThe default summary table compares consumption, demand, and economic metrics for all of the design alternatives. A selection field near the top of the table allows the user to specify which of the alternatives is to be used as the datum for performance comparison.  Analysis results shown in subsequent rows are relative to the datum's modeled values. \n\n\n\n\n\nThe reports selection field at the top of the window may also be used to produce end use stacked bar charts broken down by fuel type.\n\n\n\n\n\nThe third default report is intended for use by modelers working with utility design assistance programs and the Energy Design Assistance Project Tracker (EDAPT). This report is used to generate data for upload to EDAPT.\n\n\n\n\n\n\n\n\nView OpenStudio Server\n\n\nThe final tab provides a view into PAT's OpenStudio server, and will not be necessary for users performing manual analyses.  It is of greater importance when performing algorithmic analysis, and will be discussed later in this document.\n\n\n\n\n\n\n\n\nMenu Bar Functions\n\n\nThe File menu allows you to create a new project, open an existing project, save a project, or save a copy of a project under a new name.  Saving a copy of a project creates a new directory structure including copies of seed models, weather files, project measures, etc.\n\n\nThe Windows menu allows the user to open the BCL dialog, set the location of the \"MyMeasures\" directory, and open up a set of server troubleshooting tools that may be helpful for advanced users.\n\n\n\n\n\n\n\n\nAlgorithmic Mode\n\n\nSetting Up an Algorithm with the Measures Tab\n\n\nPAT 2.1.0 has also been designed to enable large-scale exploration of design spaces using a range of sampling, optimization, and machine learning algorithms.  Switching from \"Manual\" to \"Algorithmic\" in the Analysis selection field of tab one alters PAT's interface and functionality in a number of ways.\n\n\nThe first distinction is the addition of \"sampling method\" as a selection field near the top of tab one.  This field includes a number of methods.\n\n\n\n\nIn this example, Latin Hypercube Sampling (LHS) is selected as the algorithm that will be used to guide exploration of the design space.  Immediately below the sampling method field are collapsable sections for algorithm settings, supplementary analysis files, and server scripts.  A documentation button provides guidance relevant to each algorithm and its settings.\n\n\n\n\nAlgorithmic mode significantly alters the measure section of tab one.  The concept of manual mode's measure \"option\" no longer applies and variable checkboxes now become selection fields that allow the user to specify the nature of measure quantities.\n\n\n\n\nArgument\n - Fixes the quanity as a static value for the analysis.\n\n\nContinuous\n - Assigns a continuous probability density function to a variable.  Available distributions include uniform, triangular, normal, and log normal.\n\n\nDiscrete\n - Allows the user to specify a specific set of distinct values with associated weights.\n\n\nPivot\n - Forces the entire analysis to be performed against each specified value.  \ne.g. An analysis problem with 25 samples and 3 pivots would create a total of 75 data points.\n \n\n\n\n\n\n\nAbove: A measure contains both continuous and discrete variables.\n\n\n\n\nAbove: The DOE Prototype Measure is applied to an empty seed model with three pivots: SmallOffice, MediumOffice, and LargeOffice.  Subsequent measures will be applied to each of these building types, perhaps creating an office-centric technology potential analysis.  This project is available as the Office Study example \nhere\n.\n\n\nThe Design Alternatives Tab in Algorithmic Mode\n\n\nSince the algorithm is specifying the design algorithms, there is no need to use the second tab.\n\n\n\n\nThe Outputs Tab in Algorithmic Mode\n\n\nAnalysis via algorithm tends to produce very large data sets.  As such, the methods for visualizing results and teasing out valuable insights differ from the simple table views available in manual mode.  In addition, some algorithms (e.g. optimizers) are goal seeking, and require specification of performance metrics to function properly.  PAT's outputs tab is designed to specify key simulation outputs for use in post-processing large sets of simulation results or in forming performance objective functions.\n\n\nBy default the outputs tab expects the OpenStudio Results measure to be available to provide a nominal set of outputs, although additional reporting measures can be used to add more outputs.\n\n\n\n\nPressing the \"Select Outputs\" button brings up a dialog of all measures specified by the reporting measure.  The user can choose to select all of the outputs, or individual outputs.\n\n\n\n\nSelected outputs appear in the outputs tab along with additional fields.\n\n\n\n\nVisualize\n - Should be set to true for any variables the user wishes to examine via interactive visualizations, spreadsheet, or R dataframe export.\n\n\nObjective Function\n - Should be set to true for any variables that will be used by a goal-seeking algorithm as part of an objective function.\n\n\nTarget Value\n - The target value for the output variable that will be sought by the goal-seeking algorithm.\n\n\nWeighting Factor\n - A multiplier used to create linear combinations of error functions in multi-objective optimization problems.\n\n\n\n\n\n\nThe Run Tab in Algorithmic Mode\n\n\nThe size of algorithm-based analysis problems generally exceeds the computational capability of a personal computer.  PAT 2.1.0 has been designed to run these sorts of analysis in the cloud or on dedicated servers.  While PAT's \"mini-server\" still launches in the background, the application does not currently support simulation using local computing resources.\n\n\n\n\nInstead, PAT expects the user to select \"Run on Cloud\" as the Run option.  This selection produces a dialog that enables the user to specify either an \"Existing Remote Server\" or Amazon Cloud.  Provisioning a dedicated server with OpenStudio Server is beyond the scope of this tutorial.  Interested users are referred to the    \nOpenStudio-Server GitHub repository\n for further guidance on the topic.\n\n\nAmazon Web Service (AWS) has been pre-provisioned with Amazon Machine Images (AMIs) for OpenStudio Server that enable users to leverage large-scale computing with minimal effort and cost.  New users will need to establish an \naccount\n.  Once created, use your AWS account to generate an Access and Secret key pair.\n\n\n\n\nIn the PAT Run Tab, select \"Run on Cloud\" with \"Amazon Cloud\" as the server type.\n\n\nPress the New Cluster button and choose a cluster name to store your AWS cluster settings.\n\n\nPress the New AWS Credentials button and follow the prompts to enter your Access and Secret Keys.  Like the Cluster name, the AWS credential name is used by PAT to help you manage multiple cluster or credential configurations.\n\n\n\n\n\n\nA field labeled \"AMI Name\" is used to specify the version of OpenStudio that the server and worker nodes will be provisioned with.  The specific version of OpenStudio and the Standards Gem are listed next to this field once selected.\n\n\nThe user is referred to AWS documentation related to server and worker options.  The PAT UI provides an a brief description of the compute node configuration and approximate cost/hour.  A PAT analysis requires a server and a minimum of one worker.\n\n\n\n\nOnce configured, the user should press the start button next to the Cluster Status indicator on the right side of the UI.  A dialog explaining the user's responsibility to monitor and manage AWS computing resources appears and must be acknowledge before proceeding.\n\n\n\n\nAt this point, the server and worker provisioning process begins.  As the dialog states, this process can take many minutes.  Clicking on the View AWS Console button allows the user to monitor the process.\n\n\n\n\nOnce the server is running, clicking the \"Run Entire Workflow\" button starts the analysis.  Progress can be monitored within PAT or via the OpenStudio server.  One notable difference between running in manual mode with local computing resources and on the server is that detailed simulations are not automatically downloaded.  These files can be quite large.  Clicking on the blue \"OSM\" or \"Results\" cloud next to a data point will download the OpenStudio model or completed data point zip file. The cloud buttons appear as green checkmarks when a download has occurred.  Data point files are lost when the server shuts down, so it is important to download results that may be of particular interest.\n\n\n\n\nExploring Algorithm Results with OpenStudio Server\n\n\nThe OpenStudio Server tab is of much greater importance with algorithmic workflows.  This same content may also be accessed through any web browser by clinking PAT's \"View Server\" button in the run tab or manually directing a web browser to http://\nyourserverurl\n:8080.  The top level view of OpenStudio server provides a summary of completed or in-progress projects and analyses along with navigation options.\n\n\n\n\nThe top level of an analysis (a specific run of a project) provides a high level summary of the project, links to more detail about the analysis, and status updates for all data points that have been completed, queued for simulation, or are in process.  Important links on this page include:\n\n\n\n\nProject JSON\n - The JSON link near the top left of this screen is the OpenStudio Analysis (OSA) JSON that PAT produces for the Server.  It is a complete definition of the analysis to be performed including SEED models, weather files, measures, arguments \n variables, outputs, algorithms, etc.\n\n\nProject Log\n - Immediately next to the Project JSON is a log file, which can be helpful in debugging failed analyses.\n\n\nDownloads\n - These links download high level meta data and simulation results as CSV or R Data Frames for subsequent analysis.  These results include only analysis inputs and outputs that have been defined in PAT.  Detailed simulation results associated with individual data points must be downloaded in PAT or via individual data point web links.\n\n\nData points\n - The bottom of the analysis page includes a snapshot of all data points along with their status, run times, and data point-specific links including the data point JSON file (OSW) and the data point zip file.\n\n\nData and Visualizations\n - A number of useful project summaries and interactive visualization tools are built into OpenStudio server.  One of these, the parallel coordinate plot, is described in further detail below.\n\n\n\n\n\n\nThe variables link near the top center of the analysis web page provides a concise summary of variables and arguments utilized by the analysis' algorithm.  While any applicable measures are summarized in an adjacent page, this section provides more detail about how data points have been generated.  In the example below, three building types form the core of the analysis.  A five level \"Design of Experiments\" with lighting power density reduction percentage and window to wall ratio variables complete the study space.  Other sampling methods (e.g. LHS) include thumbail graphics illustrating variable distributions.\n\n\n\n\nParallel coordinate plots provide an interactive means of exploring large data sets and teasing out valuable insights.  OpenStudio enables the user to select inputs and outputs that have been pre-defined in PAT's measures and outputs tabs.  Checkboxes turn inputs on and off, and the individual plot axes can be re-ordered via drag and drop.  In this first example, LHS is used to sample the parameter space for lighting power density, window to wall ratio, and the facade on which windows are placed.  Energy Use Intensity (EUI) is selected as the output of interest.\n\n\n\n\nExample Projects\n\n\nSeveral sample PAT projects may be found \nhere\n.  Both the Office_Hvac and Office_Study projects are configured to run in manual model using local computing resources.  The remaining \"SEB\" projects pertain to NREL's Site Entrance Building (SEB), and demonstrate the various algorithms available for use in the cloud.  Several of the SEB projects are also notable as examples of performing sampling or optimization-based calibrations of a model using Actual Meteorlogic Year (AMY) and consumption data.\nThe \"AddMonthlyJSONUtilityData\" measure is used to add electric and gas consumption data to the model.  The \"CalibrationReportsEnhanced20\" reporting measure is used to create analysis outputs and charts that describe the calibration's \"goodness of fit.\"\n\n\nA Model Calibration Example\n\n\nAs a closing example, consider the SEB \"PSO_2013\" project.  This project utilizes the particle swarm algorithm to explore variations of the SEB seed model.  OpenStudio Server's parallel coordinate plot is a convenient means of interacting with the large number of solutions generated during the analysis.  Input or output coordinate ranges may be selected using the mouse to filter out solutions of interest - in this case, data points with low Coefficient of Variation of the Root Mean Squared Error (CVRMSE) and Net Mean Bias Error (NMBE) for both gas and electricity consumption.  Data points which fall within the filtered ranges (indicated in blue) are provided as links below the plot.\n\n\n\n\nClicking on one of these data points allows us to see the specific measure variable values that define the data point.  This page also allows convenient download of the specific OpenStudio Workflow (OSW) that generate the point, the resulting model, simulation results, and associated reports.\n\n\n\n\nOutput from the Enhanced Calibration Report for this data point is one of the available report links, and allows us to quickly visualize the performance of this particular model variant relative to the building's original measured consumption data.", 
            "title": "Parametric Analysis Tool Version 2 (PAT) Interface Guide"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#create-a-project", 
            "text": "When you launch PAT you have the option to create a new project or open an existing project.    To create a new project :   Click the \"Make New Project\" button.  Type the name for the project, and click \"Continue.\"   Note that project names should not include spaces.     Browse to the directory where you want the project saved, and click the \"Open\" button.   PAT will create a new directory for your project at this location.", 
            "title": "Create a Project"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#open-an-existing-project", 
            "text": "You can open an existing PAT project when you first launch PAT or from the file menu. In either case a dialog will open to find the path where you created your Project. There is no file to select, just browse to the top level project directory.", 
            "title": "Open an Existing Project"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#interface-overview", 
            "text": "PAT 2.1.0 functionality is broken down into six tabs along the left side of the window:   Specify analysis mode (manual or algorithmic), seed models, weather files, measures, and measure options.  Manually create design alternatives  (Not used for algorithmic analysis)  Specify outputs for algorithm-based analysis  (Not used for manual analysis)  Run an analysis and manage the analysis server  View reports  View the server   In general, a PAT workflow moves through the six vertical tabs from top to bottom.  PAT allows the user to specify design alternatives manually or automate the process using a selection of algorithms - e.g. sampling, optimization, etc.  The analysis mode is selected at the top of tab one, and dictates whether tabs two or three are used along with the types of computing resources (local or cloud) that can be selected on tab four.  The video below shows the creation of a new project and walks through the workflow to create and run a  manual  analysis.   Above: PAT 2.0.0 introduction video for manual analysis mode", 
            "title": "Interface Overview"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#load-a-seed-model-and-weather-file", 
            "text": "Select your seed model, the model that will serve as the basis for creating design alternatives, by clicking the folder symbol for the \"Default Seed Model\". Select your weather file by clicking the folder symbol for the \"Default Weather File.\"    Note: PAT 2.1.0 allows the user to specify multiple seed and weather files that may all be used within a project.", 
            "title": "Load a Seed Model and Weather File"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#add-measures-and-create-measure-options", 
            "text": "If you want to learn more about measures, check out the  About Measures  section. Check out the  Measure Writing Guide  to start writing your own custom measures.  PAT works with three classes of measures:   OpenStudio measures  operate on the OpenStudio model (.osm) before it is converted to an EnergyPlus input file (.idf).  EnergyPlus measures  operate on the .idf file just before it is simulated in EnergyPlus.  Reporting measures  run after the simulation has been performed and are used to produce postprocess results, automate quality checks, and create custom reports and chart.   Click the \"Add Measure\" buttons by the OpenStudio, EnergyPlus, or Reporting measure text to add measures of that type to your project. The Building Component Library (BCL) dialog that opens after clicking the buttons allows you to add measures stored on your computer or to find new measures from the online BCL.", 
            "title": "Add Measures and Create Measure Options"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#download-measures-from-the-building-component-library-bcl", 
            "text": "The Building Component Library dialog allows you to filter by measure location, measure type, measure category, and  measures sub-category. When it first opens it will have all locations checked except for BCL (Online). It will also have only one measure type checked, based on which button you clicked in the measures tab. Nothing is checked by default in the \"Category\" section which has the effect of all categories showing. Once you check one or more categories or sub-categories only those will be shown. That filter will remain in place when you come back to this dialog in the future. So if you don't see the measure you expect, make sure the category filters are setup correctly.  PAT keeps track of four distinct measure locations:   My Project  - includes measures that have already been added to your current PAT project.  Measure Directory  - shows measures you have stored in a user configurable \"MyMeasures\" directory on your computer.  A best practice is to only create or modify measures in your \"MyMeasures\" directory.  Local   - includes any BCL measures you may have already downloaded to your computer.  BCL (Online)   - contains all publicly available measures located in the online BCL. To use add these to a project they must first be downloaded, which copies them to your local library.    Note: In rare instances, the BCL dialog may appear empty even when local content exists or the online BCL has been added to the filter.  This can happen when OpenStudio's \"measure manager\" process is not halted normally.  The issue is easily resolved by quitting PAT, and using your computer's task manager to look for an \"openstudio\" process.  Halting this process enables the BCL dialog to work normally again.   To download measures:   Check the \"BCL (Online)\" box  under filter options to show BCL content.  Check filters  to narrow down the list of measures by type, category, and subcategory.  Click the black arrow  in the \"Edit/Copy\" column of the grid once you've found a measure you're interested in.   When the symbol changes from a black download arrow to the green document symbol the measure has been downloaded and added to your local library.  Clicking the green document symbol will create a copy of the measure in your \"MyMeasures\" directory.  This is useful when creating variations of existing measures.  Once downloaded, PAT will continue to check to see if an updated version is available in the BCL.  Available updates will be indicated with a symbol in the \n\"updates\" column.  Simply click the symbol to download the latest version to your local library.", 
            "title": "Download Measures From the Building Component Library (BCL)"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#add-measures-to-the-project", 
            "text": "Clicking the blue plus will add a measure from your local library or \"MyMeasures\" directory to your project.  Measures with a gray plus have not yet been downloaded from the BCL, and cannot be added.   Above: Filtered View showing Online BCL OpenStudio Fenestration measures. The \"Set Window to Wall Ratio\" measure has been downloaded from the BCL but not yet added to the project.  \nAfter adding a measure to your project the blue plus will change to a green check mark.    \nAfter closing the BCL dialog, measures are now loaded into the project.  In this example, two measures have been added.   The ordering of measures in PAT matters.   Measures run from top to bottom in the user interface, and they may be reordered using the up or down arrows at the right.  The \"x,\" also at the right, may be used to delete a measure from the project.   Note that each measure also has an arrow just to its left.  This arrow is used to expand and collapse the measure, allowing the user to specify variables, arguments, and more.", 
            "title": "Add Measures to the Project"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#create-measure-options-and-define-variables", 
            "text": "Every measure in the manual analysis project needs at least one measure \"option.\"  An option describes a measure and particular set of measure arguments that will be applied to create a specific design alternative.  For example, a generic fan efficiency measure would likely have an efficiency argument.  Applying that generic measure with a specific value for efficiency would constitute an option representing a specific fan product.  Clicking the  \"Add Measure Option\"  button adds a column to the right side of the grid for the measure.  Newly created options have a generic option name, description, and inherit any default values specified by the measure.   \nThe variable column and associated checkboxes are used to specify which arguments will vary across design options.  Each option must be given a unique (and meaningful) name that will be referenced when constructing design alternatives.  The option description field is free-form, and can be used to capture notes regarding the option that may be used by reporting measures.  In this example, three design options have been created with variable window to wall ratios.", 
            "title": "Create Measure Options and Define Variables"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#add-the-openstudio-results-reporting-measure-to-the-project", 
            "text": "The standard OpenStudio Results measure  must  be added to every project as an option for each design alternative.  Manual project reports and most algorithmic workflows rely on outputs defined by this measure to work properly.  PAT will run without this measure and an associated measure option, but results will not appear correctly.", 
            "title": "Add the OpenStudio Results Reporting Measure to the Project"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#create-design-alternatives", 
            "text": "The second tab is used to create design alternatives.  Buttons can be used to create and copy individual alternatives or create one alternative for each measure option in the project.  Design alternatives appear in a simple grid that allows rapid \"pull down menu\" selection of seed model, weather file, and measure options.  Design alternative name and description fields are free form.  It is considered a best practice to enter meaningful descriptions in these fields to document the project.   Design alternatives may be deleted using the \"x\" button on the left side of the screen.  Rows may be rearranged manually using the up and down arrows to the left, or sorted alphabetically by clicking the grid headings.  The order of design alternatives on this tab has no bearing on simulation order or results reporting.  Note: Recall from the previous section that each design alternative must have an OpenStudio Results measure option.  A useful tip for accomplishing this quickly is to highlight the first option cell in the OpenStudio Results column, type the first letter of your Option (the letter O in this example), tap the down arrow, and repeat.", 
            "title": "Create Design Alternatives"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#adding-outputs-in-manual-mode", 
            "text": "This tab is unused in manual mode, and is revisted later in this document when discussing algorithmic workflows.", 
            "title": "Adding Outputs in Manual Mode"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#running-an-analysis-locally", 
            "text": "PAT 2.1.0 configures a \"mini server\" on your computer to perform local analysis.  This is essentially the same server that is used to run large-scale cloud analyses, enabling projects to scale and migrate between computing systems easily.  The local server begins to start up as soon as you launch PAT, and is usually ready to perform analysis within a minute.  This is indicated by a server status green checkmark at the top of the screen.   Clicking the Run Entire Workflow button starts an analysis.   As simulation results are completed, PAT's status will update to appraise you of progress.  Changing tabs during active simulation is prevented to avoid accidentally altering an analysis mid-run.   Completed design alternatives may be expanded to view measure or simulation log messages. The OpenStudio standard report, EnergyPlus output, results from any other reporting measure options may be viewed by clicking the graph symbol and selecting the report of interest.", 
            "title": "Running an Analysis Locally"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#view-analysis-reports", 
            "text": "PAT 2.1.0 includes three built-in reports that help the user compare design alternatives.  The default summary table compares consumption, demand, and economic metrics for all of the design alternatives. A selection field near the top of the table allows the user to specify which of the alternatives is to be used as the datum for performance comparison.  Analysis results shown in subsequent rows are relative to the datum's modeled values.    \nThe reports selection field at the top of the window may also be used to produce end use stacked bar charts broken down by fuel type.   \nThe third default report is intended for use by modelers working with utility design assistance programs and the Energy Design Assistance Project Tracker (EDAPT). This report is used to generate data for upload to EDAPT.", 
            "title": "View Analysis Reports"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#view-openstudio-server", 
            "text": "The final tab provides a view into PAT's OpenStudio server, and will not be necessary for users performing manual analyses.  It is of greater importance when performing algorithmic analysis, and will be discussed later in this document.", 
            "title": "View OpenStudio Server"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#menu-bar-functions", 
            "text": "The File menu allows you to create a new project, open an existing project, save a project, or save a copy of a project under a new name.  Saving a copy of a project creates a new directory structure including copies of seed models, weather files, project measures, etc.  The Windows menu allows the user to open the BCL dialog, set the location of the \"MyMeasures\" directory, and open up a set of server troubleshooting tools that may be helpful for advanced users.", 
            "title": "Menu Bar Functions"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#algorithmic-mode", 
            "text": "", 
            "title": "Algorithmic Mode"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#setting-up-an-algorithm-with-the-measures-tab", 
            "text": "PAT 2.1.0 has also been designed to enable large-scale exploration of design spaces using a range of sampling, optimization, and machine learning algorithms.  Switching from \"Manual\" to \"Algorithmic\" in the Analysis selection field of tab one alters PAT's interface and functionality in a number of ways.  The first distinction is the addition of \"sampling method\" as a selection field near the top of tab one.  This field includes a number of methods.   In this example, Latin Hypercube Sampling (LHS) is selected as the algorithm that will be used to guide exploration of the design space.  Immediately below the sampling method field are collapsable sections for algorithm settings, supplementary analysis files, and server scripts.  A documentation button provides guidance relevant to each algorithm and its settings.   Algorithmic mode significantly alters the measure section of tab one.  The concept of manual mode's measure \"option\" no longer applies and variable checkboxes now become selection fields that allow the user to specify the nature of measure quantities.   Argument  - Fixes the quanity as a static value for the analysis.  Continuous  - Assigns a continuous probability density function to a variable.  Available distributions include uniform, triangular, normal, and log normal.  Discrete  - Allows the user to specify a specific set of distinct values with associated weights.  Pivot  - Forces the entire analysis to be performed against each specified value.   e.g. An analysis problem with 25 samples and 3 pivots would create a total of 75 data points.      Above: A measure contains both continuous and discrete variables.   Above: The DOE Prototype Measure is applied to an empty seed model with three pivots: SmallOffice, MediumOffice, and LargeOffice.  Subsequent measures will be applied to each of these building types, perhaps creating an office-centric technology potential analysis.  This project is available as the Office Study example  here .", 
            "title": "Setting Up an Algorithm with the Measures Tab"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#the-design-alternatives-tab-in-algorithmic-mode", 
            "text": "Since the algorithm is specifying the design algorithms, there is no need to use the second tab.", 
            "title": "The Design Alternatives Tab in Algorithmic Mode"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#the-outputs-tab-in-algorithmic-mode", 
            "text": "Analysis via algorithm tends to produce very large data sets.  As such, the methods for visualizing results and teasing out valuable insights differ from the simple table views available in manual mode.  In addition, some algorithms (e.g. optimizers) are goal seeking, and require specification of performance metrics to function properly.  PAT's outputs tab is designed to specify key simulation outputs for use in post-processing large sets of simulation results or in forming performance objective functions.  By default the outputs tab expects the OpenStudio Results measure to be available to provide a nominal set of outputs, although additional reporting measures can be used to add more outputs.   Pressing the \"Select Outputs\" button brings up a dialog of all measures specified by the reporting measure.  The user can choose to select all of the outputs, or individual outputs.   Selected outputs appear in the outputs tab along with additional fields.   Visualize  - Should be set to true for any variables the user wishes to examine via interactive visualizations, spreadsheet, or R dataframe export.  Objective Function  - Should be set to true for any variables that will be used by a goal-seeking algorithm as part of an objective function.  Target Value  - The target value for the output variable that will be sought by the goal-seeking algorithm.  Weighting Factor  - A multiplier used to create linear combinations of error functions in multi-objective optimization problems.", 
            "title": "The Outputs Tab in Algorithmic Mode"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#the-run-tab-in-algorithmic-mode", 
            "text": "The size of algorithm-based analysis problems generally exceeds the computational capability of a personal computer.  PAT 2.1.0 has been designed to run these sorts of analysis in the cloud or on dedicated servers.  While PAT's \"mini-server\" still launches in the background, the application does not currently support simulation using local computing resources.   Instead, PAT expects the user to select \"Run on Cloud\" as the Run option.  This selection produces a dialog that enables the user to specify either an \"Existing Remote Server\" or Amazon Cloud.  Provisioning a dedicated server with OpenStudio Server is beyond the scope of this tutorial.  Interested users are referred to the     OpenStudio-Server GitHub repository  for further guidance on the topic.  Amazon Web Service (AWS) has been pre-provisioned with Amazon Machine Images (AMIs) for OpenStudio Server that enable users to leverage large-scale computing with minimal effort and cost.  New users will need to establish an  account .  Once created, use your AWS account to generate an Access and Secret key pair.   In the PAT Run Tab, select \"Run on Cloud\" with \"Amazon Cloud\" as the server type.  Press the New Cluster button and choose a cluster name to store your AWS cluster settings.  Press the New AWS Credentials button and follow the prompts to enter your Access and Secret Keys.  Like the Cluster name, the AWS credential name is used by PAT to help you manage multiple cluster or credential configurations.    A field labeled \"AMI Name\" is used to specify the version of OpenStudio that the server and worker nodes will be provisioned with.  The specific version of OpenStudio and the Standards Gem are listed next to this field once selected.  The user is referred to AWS documentation related to server and worker options.  The PAT UI provides an a brief description of the compute node configuration and approximate cost/hour.  A PAT analysis requires a server and a minimum of one worker.   Once configured, the user should press the start button next to the Cluster Status indicator on the right side of the UI.  A dialog explaining the user's responsibility to monitor and manage AWS computing resources appears and must be acknowledge before proceeding.   At this point, the server and worker provisioning process begins.  As the dialog states, this process can take many minutes.  Clicking on the View AWS Console button allows the user to monitor the process.   Once the server is running, clicking the \"Run Entire Workflow\" button starts the analysis.  Progress can be monitored within PAT or via the OpenStudio server.  One notable difference between running in manual mode with local computing resources and on the server is that detailed simulations are not automatically downloaded.  These files can be quite large.  Clicking on the blue \"OSM\" or \"Results\" cloud next to a data point will download the OpenStudio model or completed data point zip file. The cloud buttons appear as green checkmarks when a download has occurred.  Data point files are lost when the server shuts down, so it is important to download results that may be of particular interest.", 
            "title": "The Run Tab in Algorithmic Mode"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#exploring-algorithm-results-with-openstudio-server", 
            "text": "The OpenStudio Server tab is of much greater importance with algorithmic workflows.  This same content may also be accessed through any web browser by clinking PAT's \"View Server\" button in the run tab or manually directing a web browser to http:// yourserverurl :8080.  The top level view of OpenStudio server provides a summary of completed or in-progress projects and analyses along with navigation options.   The top level of an analysis (a specific run of a project) provides a high level summary of the project, links to more detail about the analysis, and status updates for all data points that have been completed, queued for simulation, or are in process.  Important links on this page include:   Project JSON  - The JSON link near the top left of this screen is the OpenStudio Analysis (OSA) JSON that PAT produces for the Server.  It is a complete definition of the analysis to be performed including SEED models, weather files, measures, arguments   variables, outputs, algorithms, etc.  Project Log  - Immediately next to the Project JSON is a log file, which can be helpful in debugging failed analyses.  Downloads  - These links download high level meta data and simulation results as CSV or R Data Frames for subsequent analysis.  These results include only analysis inputs and outputs that have been defined in PAT.  Detailed simulation results associated with individual data points must be downloaded in PAT or via individual data point web links.  Data points  - The bottom of the analysis page includes a snapshot of all data points along with their status, run times, and data point-specific links including the data point JSON file (OSW) and the data point zip file.  Data and Visualizations  - A number of useful project summaries and interactive visualization tools are built into OpenStudio server.  One of these, the parallel coordinate plot, is described in further detail below.    The variables link near the top center of the analysis web page provides a concise summary of variables and arguments utilized by the analysis' algorithm.  While any applicable measures are summarized in an adjacent page, this section provides more detail about how data points have been generated.  In the example below, three building types form the core of the analysis.  A five level \"Design of Experiments\" with lighting power density reduction percentage and window to wall ratio variables complete the study space.  Other sampling methods (e.g. LHS) include thumbail graphics illustrating variable distributions.   Parallel coordinate plots provide an interactive means of exploring large data sets and teasing out valuable insights.  OpenStudio enables the user to select inputs and outputs that have been pre-defined in PAT's measures and outputs tabs.  Checkboxes turn inputs on and off, and the individual plot axes can be re-ordered via drag and drop.  In this first example, LHS is used to sample the parameter space for lighting power density, window to wall ratio, and the facade on which windows are placed.  Energy Use Intensity (EUI) is selected as the output of interest.", 
            "title": "Exploring Algorithm Results with OpenStudio Server"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#example-projects", 
            "text": "Several sample PAT projects may be found  here .  Both the Office_Hvac and Office_Study projects are configured to run in manual model using local computing resources.  The remaining \"SEB\" projects pertain to NREL's Site Entrance Building (SEB), and demonstrate the various algorithms available for use in the cloud.  Several of the SEB projects are also notable as examples of performing sampling or optimization-based calibrations of a model using Actual Meteorlogic Year (AMY) and consumption data.\nThe \"AddMonthlyJSONUtilityData\" measure is used to add electric and gas consumption data to the model.  The \"CalibrationReportsEnhanced20\" reporting measure is used to create analysis outputs and charts that describe the calibration's \"goodness of fit.\"", 
            "title": "Example Projects"
        }, 
        {
            "location": "/reference/parametric_analysis_tool_2/#a-model-calibration-example", 
            "text": "As a closing example, consider the SEB \"PSO_2013\" project.  This project utilizes the particle swarm algorithm to explore variations of the SEB seed model.  OpenStudio Server's parallel coordinate plot is a convenient means of interacting with the large number of solutions generated during the analysis.  Input or output coordinate ranges may be selected using the mouse to filter out solutions of interest - in this case, data points with low Coefficient of Variation of the Root Mean Squared Error (CVRMSE) and Net Mean Bias Error (NMBE) for both gas and electricity consumption.  Data points which fall within the filtered ranges (indicated in blue) are provided as links below the plot.   Clicking on one of these data points allows us to see the specific measure variable values that define the data point.  This page also allows convenient download of the specific OpenStudio Workflow (OSW) that generate the point, the resulting model, simulation results, and associated reports.   Output from the Enhanced Calibration Report for this data point is one of the available report links, and allows us to quickly visualize the performance of this particular model variant relative to the building's original measured consumption data.", 
            "title": "A Model Calibration Example"
        }, 
        {
            "location": "/reference/model_objects/", 
            "text": "OpenStudio Model Objects Overview\n\n\n\nOne of the advantages of OpenStudio is that it adds modern object-oriented software concepts such as relationships and inheritance to EnergyPlus. This makes it much easier to add new functionality to tools or write measures that can quickly manipulate energy models. From a practitioner's perspective, inheritance makes it very easy to quickly create new models. \nWhen you are using OpenStudio templates to define building and space types, you are using this capability to avoid specifying the hundreds or thousands of pieces of information EnergyPlus requires to create a detailed simulation.\n\n\nRelationship Diagram\n\n\nThe diagram below shows the OpenStudio 0.6.0 Model Objects Hierarchical Relationships. This is not a comprehensive diagram, but rather focuses on the building envelope (external loads) and building activity (internal loads). It is a good reference to understand where objects reside in the model, and what other objects they impact and are impacted by.\n\n\n\n\nAbove: Click to view a larger diagram of model relationships.\n\n\nInheritance\n\n\nThe diagram below shows the OpenStudio 0.6.0 Model Objects Inheritance Relationships. Again, this is not a comprehensive diagram, but focuses on some of the more commonly used objects. The red dot in each column represents the first place our OSM to IDF translator looks when converting an OSM object to an IDF object or objects. If the field value is blank where the red dot is, the translator looks at the object where the yellow circle is, and continues this until the end of the path. The ability for objects to inherit values from elsewhere in the model allows for quick global changes, and for customization of any individual object in the model.\n\n\n\n\nAbove: Click to view a larger diagram of model inheritance.", 
            "title": "OpenStudio Model Objects Overview"
        }, 
        {
            "location": "/reference/model_objects/#relationship-diagram", 
            "text": "The diagram below shows the OpenStudio 0.6.0 Model Objects Hierarchical Relationships. This is not a comprehensive diagram, but rather focuses on the building envelope (external loads) and building activity (internal loads). It is a good reference to understand where objects reside in the model, and what other objects they impact and are impacted by.   Above: Click to view a larger diagram of model relationships.", 
            "title": "Relationship Diagram"
        }, 
        {
            "location": "/reference/model_objects/#inheritance", 
            "text": "The diagram below shows the OpenStudio 0.6.0 Model Objects Inheritance Relationships. Again, this is not a comprehensive diagram, but focuses on some of the more commonly used objects. The red dot in each column represents the first place our OSM to IDF translator looks when converting an OSM object to an IDF object or objects. If the field value is blank where the red dot is, the translator looks at the object where the yellow circle is, and continues this until the end of the path. The ability for objects to inherit values from elsewhere in the model allows for quick global changes, and for customization of any individual object in the model.   Above: Click to view a larger diagram of model inheritance.", 
            "title": "Inheritance"
        }, 
        {
            "location": "/reference/measure_writing_guide/", 
            "text": "OpenStudio Measure Writer's Reference Guide\n\n\n\nThis OpenStudio Measure Writer's Reference Guide is an in-depth resource regarding the authoring, testing, and distribution of OpenStudio Measures. The primary purposes of an OpenStudio measure are to: inspect, and optionally make some change/addition to, an OpenStudio model; validate model input; and report model input and output. \n\n\nWhere applicable, the reader is directed to other resources, such as the \nOpenStudio SDK documentation\n, and many of the other references found at the \nOpenStudio Documentation Home\n. \n\n\nIntroduction\n\n\nIn its most basic form, an OpenStudio measure (henceforth referred to as a \"measure\") is a program (or 'script', or 'macro', if you like) that can access and leverage the OpenStudio model and API to create or make changes to a building energy model, as defined by an OpenStudio model (.osm). Typically, a measure modifies an existing .osm in order to implement a given \nenergy conservation measure\n (ECM). For example, a measure might change the insulation rating of the exterior walls, change the window-to-wall ratio of a specific facade, or modify operational or occupancy schedules. Measures may also generate reports on the input and output of a given energy model; as such, these are referred to as \nreporting measures\n. \n\n\nMeasures may be linked together in a workflow in order to implement complex ECMs, or to repeatably implement ECMs across building types or climate zones; measures can even generate entire -- code-compliant and climate-zone specific -- building models soley from user inputs. \n\n\nMeasures are written in Ruby, which allows the measure author to access OpenStudio directly as well as through the SketchUp plugin. Measures can be created from scratch, but existing measures may also be used as a starting basis (recommended).\n\n\n\n\n\nBest Practices\n\n\nFor general Ruby coding and style advice (formatting, variable names, etc.), we recommend following the guidance of the \nRuby Style Guide\n. \n\n\nFor simple (short) measures, a text editor is all that is necessary. More extensive measures and resource files may benefit from the use of a proper IDE such as \nRubyMine\n.\n\n\nWe cannot stress enough the importance of version control and backup. The OpenStudio dev team relies on Git for version control, and \nGitHub\n for hosting all code repositories.\n\n\nWriting Measures\n\n\nFile Structure\n\n\nEvery OpenStudio measure is comprised of a program and metadata, and optionally includes additional resources (e.g. libraries, helper functions) and tests. These are all contained in a single directory, generally named after the measure itself. A typical measure directory structure is as follows:\n\n\n\n\n\n\n\nMeasure Program File - measure.rb\n\n\nThe file 'measure.rb' is the main measure program. It may contain the entire program or may rely on additional functionality defined in one or more resource files, located in the 'resources' directory. \n\n\nInitialization\n\n\nOpenStudio measures are instantiated by creating a class based on the OpenStudio \nModelUserScript\n object:\n\n\nclass AddContinuousInsulationToWalls \n OpenStudio::Measure::ModelMeasure\n  ...\nend\n\n\n\n\n...and instantiating thusly:\n\n\nAddContinuousInsulationToWalls.new.registerWithApplication\n\n\n\n\nPlease note the original measure instantiantiation syntax, \nOpenStudio::Ruleset::ModelUserScript\n, is deprecated. \n\n\nClass naming convention shall follow \nRuby best practices\n. \n\n\nMeasure Elements\n\n\nEvery measure requires the following elements, defined as functions of the main program: \n\n\n\n\nname\n\n\ndescription\n\n\nmodeler_description\n\n\narguments\n\n\nrun\n\n\n\n\nName\n\n\nThe measure name is the first contact a user has with the measure; it is also shared throughout the measure workflow, visible in the OpenStudio Application, PAT, Server Management Consoles, and in output reports. As such, measure names should clearly describe the measure's function, while remaining general in nature.\n\n\nExample Measure Names\n\n\n\n\n\n\n\n\nGood\n\n\n\n\nPoor\n\n\n\n\n\n\n\n\n\n\nReplace HVAC System with DX and Natural Gas AHUs\n\n\n\n\nDX and Natural Gas AHUs\n\n\n\n\n\n\nSet Interior Walls to Selected Construction\n\n\n\n\nInsulate Walls\n\n\n\n\n\n\nRemove all Electrical Equipment in Specified Space Types\n\n\n\n\nModify Electric Equipment\n\n\n\n\n\n\n\n\nUsage:\n\n\ndef name\n  return \nAdd Continuous Insulation to Walls\n\nend\n\n\n\n\nDescription\n\n\nThe measure description is intended for a general audience and should not assume that the reader is familiar with the design and construction practices suggested by the measure. Thus, the description should include general details about how the measure would be implemented, along with explanations of associated qualitative benefits thereof. It is good practice to include citations in the description if the measure's intended effect is grounded in published work.\n\n\nUsage:\n\n\ndef description\n  return \nAdd a layer of continuous insulation between the framing members and exterior cladding. This insulation layer is in addition to any bat insulation installed between framing members. Continuous insulation must be installed without thermal bridges other than fasteners and service openings, adding continuous insulation to a design may require longer fasteners. For more information please see \na href='http://fsc.americanchemistry.com/Exterior-Walls/Continuous-Insulation-Educational-Presentation.pdf'\nhere\n/a\n.\n\nend\n\n\n\n\nModeler Description\n\n\nThe modeler description is intended for the energy modeler using the measure. It should explain the measure's intent, and include any requirements about how the baseline model must be set up, major assumptions made by the measure, and relevant citations or references to applicable modeling resources. The energy modeler should be able to read this description and understand the changes the measure make to the model and why. \n\n\nTIP: This description could be used in automatically generated reports, e.g. in an appendix describing the modeling approach of each measure considered for an energy savings study.\n\n\nUsage:\n\n\ndef modeler_description\n  return \nThis measure will select all constructions used on exterior walls. For each construction found, if the second material layer is of type OS:Material:NoMass, then that layer will be assumed to be existing continuous insulation and will be replaced by the material layer user-specified by this measure. If the second layer is not of type OS:Material:NoMass, then a new material layer will be inserted at the second material layer position. If any non-exterior wall surfaces use this construction, it will be cloned before being altered and the altered construction will be hard assigned to the appropriate exterior wall surfaces.\n\nend\n\n\n\n\nArguments\n\n\nMeasure arguments define which -- if any -- input parameters the user may set before running the measure. In our example measure \"Add Continuous Insulation to Walls\", the thickness of the insulation, and the R-value per inch of thickness, are the user-definable arguments. The measure arguments make a general meaure, specific. Further, these arguments become the variables in a parametric analysis that are passed to PAT, or the OpenStudio Analysis Spreadsheet.\n\n\nUsage:\n\n\nWe define a user argument vector and create a single argument for insulation thickness, provide the user a single argument, insulation thickness, along with a few argument parameters. Note we pass the entire model to the function, in case any arguments presented to the user are model dependent:\n\n\ndef arguments(model)\n    args = OpenStudio::Ruleset::OSArgumentVector.new\n    insl_thckn = OpenStudio::Ruleset::makeDoubleArgument('insl_thckn',true)\n    insl_thckn.setDisplayName('Insulation Thickness (in)')\n    insl_thckn.setDefaultValue(1.5)\n    args \n insl_thckn\n    return args\nend\n\n\n\n\nThere is a statement to create a new argument of the type \"double\" and assign it to the variable \"insl_thckn\". The \"true\" at the end of this line indicates that the argument is required. The next line defines the display name of the argument; the user will see this in the GUI (recommended practice dictates we identify the units for the argument inside parentheses at the end of the display name). Lastly, we specify the default value for the argument. This default value is presented initially to the user, but the user can change the value in the GUI.\n\n\nArgument Types\n\n\nValid argument types are as follows:\n\n\nDouble\n - any real number e.g. 1.0, -1.5, 50.5\n\n\nv1 = OpenStudio::Ruleset::OSArgument::makeDoubleArgument('v1', false)\n\n\n\n\nInteger\n - any whole number e.g. 1, -2, 51\n\n\nv2 = OpenStudio::Ruleset::OSArgument::makeIntegerArgument('v2', false)\n\n\n\n\nBoolean (Bool)\n - logical (true/false) choice option\n\n\nv3 = OpenStudio::Ruleset::OSArgument::makeBoolArgument('v3', false)\n\n\n\n\nString\n - for accepting text input\n\n\nv4 = OpenStudio::Ruleset::OSArgument::makeStringArgument('v4', false)\n\n\n\n\nChoice\n - a vector of list options. For the choice argument, the measure author creates the options and passes them to the argument, e.g.:\n\n\nchs = OpenStudio::StringVector.new\nchs \n \nOption 1\n\nchs \n \nOption 2\n\nv5 = OpenStudio::Ruleset::OSArgument::makeChoiceArgument('v5', chs, true)\n\n\n\n\nPossible values for the choice arguments may also be extracted from the model. For example, the following would give the user a choice of any zones in the model, sorted by zone name.\n\n\nv6 = OpenStudio::Ruleset::makeChoiceArgumentOfWorkspaceObjects\n          (\nv6\n,\nOS_Thermal_Zone\n.to_IddObjectType,model,true)\n\n\n\n\nRun\n\n\nThe run method is the container for the main measure code -- your program -- and is formatted as follows:\n\n\ndef run(model, runner, user_arguments)\n  super(model, runner, user_arguments)\n  ...\n  return true\nend\n\n\n\n\nThe template above will define your measure as \"runnable\" to the OpenStudio API. super() tells the code to call the base class \nModelUserScript::run\n method. Ruby best practice calls for the \"return true\" line, for proper exit status reporting.\n\n\nLog Messages\n\n\nLog messages may be directed to the GUI, the command line interface, and/or to log streams. The OpenStudio GUI supports three log levels: \nInfo\n, \nWarning\n, and \nError\n.\n\n\nInfo (runner.registerInfo)\n\n\nInfo messages just that, informative in nature. Generally used for passing status or non-failure events to the user, info messages do not cause the measure to fail or stop running. In the \"Add Continuous Insulation to Walls\" measure example, a successful application of the measure would affect a number of surfaces in the model; the number of surfaces affected could be communicated to the user via an info message. \n\n\nrunner.registerInfo(\nAdded insulation to #{num_surfaces} surfaces.\n)\n\n\n\n\nWarning (runner.registerWarning)\n\n\nWarning messages should inform the user about something that may be critical to the assumptions or that significantly affects how the measure runs. Warning messages do not cause the measure to stop running. e.g., to warn the user of an out of bounds insulation thickness (e.g. \n 12) in our example measure:\n\n\nif insul_thckns \n 12\n  runner.registerWarning(\nInsulation thickness (#{insul_thckns}) beyond normal range.\n\nend\n\n\n\n\nError (runner.registerError)\n\n\nError messages are used when the measure issued a faulty instruction or otherwise cannot continue. Error messages stop the measure from running, and should inform the user of what caused the error condition. For example, if we assume that \nv1\n is a fractional value:\n\n\nif !glass_type\n  runner.registerError(\nGlazing Type not selected, cannot continue.\n)\n  return false\nend\n\n\n\n\nBeyond the standard info, warning, and error messages, three other measure-specific log messages may be issued:  the \ninitial condition\n, the \nfinal condition\n, and whether the measure was applicable to this particular model (\nNotAplicable\n).\n\n\nInitial Condition (runner.registerInitialCondition)\n\n\nThe initial condition gives the user a \"before\" snapshot of the model with respect to what the measure will change.\n\n\nrunner.registerInitialCondition(\nInput model had #{num_flrs} floors\n)\n\n\n\n\nFinal Condition (runner.registerFinalCondition)\n\n\nThe final condition gives the user an \"after\" snapshot of the model with respect to what the measure changed. Reporting the final condition is optional, but is good practice. \n\n\nReporting the initial and final conditions is optional, but is recommended practice. These messages together can be used in reporting measures to explain the specific changes the a measure made to a model.\n\n\nrunner.registerFinalCondition(\nModel currently has #{num_flrs} floors\n)\n\n\n\n\nNot Applicable (runner.registerAsNotApplicable)\n\n\nNot all measures are applicable to all models. For example, a measure called \"Replace all windows with triple-paned windows\" would not be applicable to a building with no windows. This log message simply allows the measure author to register the fact that a measure ran successfully, but made no changes to the model.\n\n\nrunner.registerAsNotApplicable(\nMeasure not applicable because [logic!]\n)\nreturn true\n\n\n\n\nExtended Log Message Example\n\n\nThis example shows how the initial condition, final condition, and applicability messages can be used.\n\n\ndef run(model, runner, user_arguments)\n  super(model,runner,user_arguments)\n  spaces = model.getSpaces\n\n  num_spcs_with_tz = 0\n  num_spcs_no_tz = 0\n  num_tzs_created = 0\n\n  spaces.each do |space|\n    if space.thermalZone.empty?\n      num_spcs_no_tz += 1\n      new_thermal_zone = OpenStudio::Model::ThermalZone.new(model)\n      num_tzs_created += 1\n      space.setThermalZone(new_thermal_zone)\n      runner.registerInfo(\nSpace #{space.name} didn't have a thermal zone,\n                          so a new thermal zone was created and assigned.\n)\n    else\n      num_spcs_with_tz += 1\n    end\n  end\n\n  runner.registerInitialCondition(\nThe model had #{num_spcs_with_tz}\n                                  spaces with a thermal zone and\n                                 #{num_spcs_no_tz} without a thermal zone\n)\n\n  runner.registerFinalCondition(\n#{num_tzs_created} thermal zones were\n                                 created. All spaces now have a thermal\n                                 zone\n)\n\n  if num_tzs_created == 0\n    runner.registerAsNotApplicable(\nNot applicable because all spaces\n                                    already had thermal zones\n)\n  end\n\n  return true\nend\n\n\n\n\nInput Validation\n\n\nMeasure authors are engouraged to perform some degree of validation of the user arguments, and the OpenStudio API includes methods for this. Every required argument must have a value, and be of the right type. This is easily accomplished via the validateUserArguments() method:\n\n\nif not runner.validateUserArguments(arguments(model), user_arguments)\n  return false\nend\n\n\n\n\nFor additional robustness, authors may ensure that values make sense in the context of the script (e.g., '-2' is not a valid number of chillers in a building). The first step in this type of input validation is to pull the values from the \"user_arguments\" variable and assign them to variables in the run method. Best practice is to use the same variable names in the arguments method and the run method:\n\n\nv1 = runner.getDoubleArgumentValue('v1',user_arguments)\nv2 = runner.getIntegerArgumentValue('v2',user_arguments)\nv3 = runner.getBoolArgumentValue('v3',user_arguments)\nv4 = runner.getStringArgumentValue('v4',user_arguments)\nv5 = runner.getStringArgumentValue('v5',user_arguments)\nv6 = runner.getOptionalWorkspaceObjectChoiceValue('v6',user_arguments, model)\n\n\n\n\nUpon assignment to variables, the author may apply logical tests to each user argument for validity. For example, we assume that \nv1\n is a fractional value, and must be between 0 and 1. The following example will test the variable for validity; the measure will exit and inform the user if the test fails:\n\n\nif v1 \n 0 or v1 \n 1\n  runner.registerError(\nFractional input 'v1' is #{v1}; must be between 0 and 1 inclusive.\n)\n  return false\nend\n\n\n\n\nInput validation can be as simple or as detailed as required, or as defined by the measure author. The goal is to increase the utility, accuracy, and user-friendliness of the measure.\n\n\nMeasure Writing\n\n\nThis section provides a few examples of partial and complete measures, and pointers on where to find details on OpenStudio objects and methods -- the building blocks of Measures -- so that you can begin writing your own. The run() and super() methods are now familiar, as are the user arguments and validation thereof. The examples here are the \"main\" elements of a typical measure.\n\n\nExample: Check Spaces for Thermal Zone Assignment\n\n\nThis first example is essentially a \nvalidation\n, or \nquality assurance/quality control\n (QAQC) measure; the measure validates the model input and takes corrective action if needed.\n\n\nThe Task\n\n\n\"Loop through all the spaces in the model and check whether each space is assigned to a thermal zone (a required input). If a space is not assigned to a thermal zone, create a new one, and assign to the space.\"\n\n\ndef run(model, runner, user_arguments)\n  super(model,runner,user_arguments)\n  spaces = model.getSpaces\n\n  spaces.each do |space|\n    if space.thermalZone.empty?\n      new_thermal_zone = OpenStudio::Model::ThermalZone.new(model)\n      space.setThermalZone(new_thermal_zone)\n      runner.registerInfo(\nSpace #{space.name} did not have a thermal zone; \n      a new thermal zone was created and assigned.\n)\n    end\n  end\nend\n\n\n\n\nWhile not intended as a Ruby programming tutorial, let's break down the preceding code snippet, as it uses some fundamental elements of the OpenStudio API:\n\n\nspaces = model.getSpaces\n retrieves all the spaces in the model, and stores them in an array called \nspaces\n. Measure authors can use this syntax to retrieve a vector of many objects from a model (e.g., \n.getThermalZones\n, \n.getSpaces\n, etc.). \n\n\nThe next line starts an iterator on spaces. Within this loop, the next command checks to see if the space has a thermal zone assigned (\n.thermalZone.empty?\n). If there is no thermal zone assigned, a new one is created (\nnew_thermal_zone = OpenStudio::Model::ThermalZone.new(model)\n), and assigned (\nspace.setThermalZone(new_thermal_zone)\n). \n\n\nOpenStudio Measures and the \nboost::optional\n Type\n\n\nOpenStudio leverages the \nBoost libraries\n quite a bit, making repeated use of the \nboost::optional\n type. In Ruby, this type requires a slightly different approach to accessing object classes and their methods than typical. In short, calling \n.get\n on an \nempty\n \nboost::optional\n object will cause the program to crash, so one must make a precautionary inspection of several objects (the OpenStudio \nSpace\n is but one) prior to attempting to use their methods. \n\n\nIn the online \ndocumentation\n for the \nSpace\n class, the method \n.thermalZone\n is defined as:\n\n\nboost::optional\n ThermalZone \n thermalZone () const\n\n\nCalling \nspace.thermalZone\n returns a \nboost::optional\n ThermalZone \n not a \nThermalZone\n. To determine whether the \noptional\n points to an \nactual\n \nThermalZone\n you must use the \n.empty?\n method. If the result is empty, it does not point to an actual \"ThermalZone\" and cannot be used. \n\n\nIf the example: \nif space.thermalZone.empty?\n evaluates \"true\", the space has no thermal zone. Again, calling \n.get\n on this empty object \nwould crash a measure\n. Conversely, if \nif \"space.thermalZone.empty?\n were false, then the program could leverage all the object's methods:\n\n\nif not space.thermalZone.empty?\n  thermal_zone = space.thermalZone.get\nend\n\n\n\n\nThe OpenStudio API has many places where optional results are returned. The API documentation can be very helpful for determining the type of result a given method returns. Several methods in OpenStudio return a \"ModelObject\" (\".clone\", \".optionalWorkspaceObjectChoiceValue\", etc.). This is fine for many purposes; however, if you want to test if the object returned is of a particular type (e.g., is it a Space or a SpaceType), you will have to try converting the object to those types using the \".to_#{ClassName}\"  (\".to_Space\", \".to_SpaceType\", etc). Those methods will return an optional result, which will be empty if the conversion failed and will contain the value if it succeeded. If the conversion was successful, you can use all the methods of that type on the result.\n\n\nnew_object = old_object.clone(model)\nif not new_object.to_LightsDefinition.empty?\n  #what you cloned was a LightsDefinition\n  new_light_def = new_object.to_LightsDefinition.get\nelse\n  #what you cloned was not a LightsDefinition\nend\n\n\n\n\nExample: Update Lighting Power Density\n\n\nThis next example illustrates the process of going from an idea for a measure through writing the measure, leveraging the OpenStudio API to accomplish the goal.\n\n\nThe Task\n\n\n\"Write a measure that will remove all lights objects currently in the \"Enclosed Office\" space type and replace them with new lights objects that have a lighting power density (LPD) of 10 W/m2.\"\n\n\nFiguring Out the Modeling Approach\n\n\nThe first thing to do is understand how the measure would be modeled in OpenStudio, and make a list of the objects involved. The easiest way to do this is to open the OpenStudio Application and look through the GUI. In this case, we'll start on the \"Space Types\" tab.\n\n\n\n\nOn this tab, first click on the first object (in the left column) is \"Space Type.\"  Inside the Space Type, next to the lights icon, the term \"Definition\" appears. The name of this particular definition is \"ASHRAE_90.1-2004_Office_LPD.\"  To learn more about this definition, go to the \"Loads\" tab.\n\n\n\n\nOn the left side under the \"Loads\" tab is a category called \"Lights Definitions.\"  Under this category is the definition \"ASHRAE_90.1-2004_Office_LPD\" that was referenced on the \"Space Types\" tab. One field is titled \"Energy Per Space Floor Area\" with units of \"W/ft2.\"  Although the GUIs may show IP units, the methods of the OpenStudio model are all written in SI units.\n\n\nThe Task, in OpenStudio Terms\n\n\n\"Find the \nSpaceType\n called \"\nEnclosed Office\n\". Replace any \nLightsDefinitions\n referenced by \nLights\n in this \nSpaceType\n with a new \nLightsDefinition\n, where \"Energy Per Space Floor Area\" = 10 W/m2.\n\"\n\n\nFinding the OpenStudio Methods: Using the Documentation\n\n\nFor this example and all your measure writing work, the \nOpenStudio API documentation\n is the principal resource.\n\n\n\n\nClick on the \nmodel\n link to explore.\n\n\n\n\nThis will take you to the OpenStudio Model Overview page.\n\n\n\n\nSelect the \"Objects/Objects List\" to find more information on individual model objects.\n\n\n\nClicking \"\nSpaceType\n\" takes you to the class reference for that object:\n\n\n\n\nThis is the documentation for the SpaceType class. The methods are generally split into four categories: Constructors and Destructors, Getters, Setters, and Other. SpaceType is a base class of ResourceObject. You can look into the ResourceObject for additional methods beyond what is in the SpaceType documentation.\n\n\nUnderstanding the Methods\n\n\nAt first glance, the methods look cryptic, not at all like those shown in the examples, because this is the C++ documentation and the methods used are the Ruby translation of these same methods. These methods can be decoded as follows:\n\n\nThe name of the method:\n\n\n\n\nThe method names are generally descriptive enough that it is possible to understand what they do without any other information. Here is how the method would be used in Ruby:\n\n\ndesign_spec_oa = space_type.designSpecificationOutdoorAir\n\n\n\n\nThe type of object returned by the method:\n\n\n\n\nMethod Return Types:\n\n bool = true/false\n\n double = a number\n\n std::string = text\n\n void = does not return anything\n\n std::vector\n = vector of the type objects inside the carets (\n)\n\n boost::optional\n = an \"optional\"; may either be empty or point to an actual object of the type inside the \n \n\n\nThe written description of the method:\n\n\n\n\nThe inputs needed by the method:\n\n\n\n\nUsing the Documentation for the Example Measure\n\n\nWith an understanding of how to read the documentation, the example measure continues.\n\n\nThe first step is to find the SpaceType named \"Enclosed Office\". Looping through all the spaces in the model, we can use the \n.name\n method to get the name of each space. Note that while \n.name\n returns an \nOptionalString\n, OpenStudio assigns names to all model objects, so there is no need to check if the name is empty before using it (a rare exception to the rule of testing all Optional types for \n!empty\n). Using the \n.match\n method, we test if the SpaceType's name matches the value we are looking for:\n\n\nspace_types = model.getSpaceTypes\nspace_types.each do |space_type|\n  if space_type.name.get.match(\nEnclosed Office\n)\n    #do something\n  end\nend\n\n\n\n\nOnce found, we need to get all the \nLights\n in \nSpaces\n of this \nSpaceType\n. The documentation for SpaceType includes a method to get a vector of all Lights in Spaces of this SpaceType:\n\n\n\n\nNow, loop over all these Lights:\n\n\nspace_types = model.getSpaceTypes\nspace_types.each do |space_type|\n  if space_type.name.get.match(\nEnclosed Office\n)\n    space_type.lights.each do |light|\n      #do something\n    end\n  end\nend\n\n\n\n\nWe need to make a new LightsDefinition to replace the ones these Lights currently use. The documentation for LightsDefinition shows a constructor that expects a Model as the input:\n\n\n\n\nConstructors translated from C++ to Ruby generally take the following form; the only difference may be which arguments the constructor requires (usually it is simply a \nmodel\n).\n\n\nnew_thing = OpenStudio::Model::NewThingClassName.new(model)\n\n\n\n\nNext, we need to set the LPD of the LightsDefinition to 10 W/m2. The LightsDefinition documentation presents a method for this:\n\n\n\n\nName the new LightsDefinition object, following best practices. Most OpenStudio objects have a \n.setName(new_name)\n method, and the Lights object is no exception:\n\n\nnew_lights_def = OpenStudio::Model::LightsDefinition.new(model)\nnew_lights_def.setWattsperSpaceFloorArea(10.0)\nnew_lights_def.setName(\n10 W/m^2 Lights Definition\n)\n\n\n\n\nNow that we have a new LightsDefinition object, we must replace the existing LightsDefinition with the new one. The Lights documentation contains a method to set the lights definition:\n\n\n\n\nPutting this all together, we get:\n\n\nnew_lights_def = OpenStudio::Model::LightsDefinition.new(model)\nnew_lights_def.setWattsperSpaceFloorArea(10.0)\nnew_lights_def.setName(\n10 W/m^2 Lights Definition\n)\n\nspace_types = model.getSpaceTypes\nspace_types.each do |space_type|\n  if space_type.name.match(\nEnclosed Office\n)\n    lights = space_type.lights\n    lights.each do |light|\n      light.setLightsDefinition(new_lights_def)\n    end\n  end\nend\n\n\n\n\nFull Example\n\n\nThe following example is a complete measure.rb file, including all the pieces described previously. We include comments (text preceded by '#'), following Ruby best practices.\n\n\n#start the measure\nclass ReplaceLightsInSpaceTypeWithLPD \n OpenStudio::Ruleset::ModelUserScript\n\n  #define the name that a user will see\n  def name\n    return \nReplace All Lights in a Given Space Type with a New LPD\n\n  end\n\n  #define the arguments that the user will input\n  def arguments(model)\n    args = OpenStudio::Ruleset::OSArgumentVector.new\n\n    #make an argument for space type name\n    stn = OpenStudio::Ruleset::OSArgument::makeStringArgument('stn',true)\n    stn.setDisplayName('Space Type Name')\n    args \n stn\n\n    #make an argument for LPD\n    lpd = OpenStudio::Ruleset::OSArgument::makeDoubleArgument('lpd',true)\n    lpd.setDisplayName('Lighting Power Density (W/m^2)')\n    lpd.setDefaultValue(1.0)\n    args \n lpd\n\n    return args\n  end #end the arguments method\n\n  #define what happens when the measure is run\n  def run(model, runner, user_arguments)\n    super(model, runner, user_arguments)\n\n    #use the built-in error checking\n    if not runner.validateUserArguments(arguments(model), user_arguments)\n      return false\n    end\n\n    #assign the user inputs to variables\n    stn = runner.getStringArgumentValue('stn',user_arguments)\n    lpd = runner.getDoubleArgumentValue('lpd',user_arguments)\n\n   #check the LPD for reasonableness\n    if lpd \n 0 or lpd \n 100 #error on impossible values\n      runner.registerError(\nLighting Power Density (W/m^2) must be\n                              greater than 0 and less than 100.\n                              You entered #{lpd}.\n)\n      return false\n    elsif lpd \n 50 #warning on unrealistic but possible values\n      runner.registerWarning(\nA Lighting Power Density of #{lpd} W/m^2\n                              seems a little high.  Measure will continue,\n                              but double-check this isn't a typo.\n)\n    end\n\n    #create a variable and array for tracking changes to model\n    num_spctyp_changed = 0\n    spctyp_ch_log = []\n\n    #make changes to the model\n    #loop through all space types in the model\n    model.getSpaceTypes.each do |space_type|\n      if space_type.name.get.match(\n#{stn}\n)\n        num_spctyp_changed += 1 #log change\n        runner.registerInfo(\nSpace Type called #{space_type.name} matches\n                            #{stn}.\n)\n        #loop through all lights in the space type\n        space_type.lights.each do |light|\n          #get the old lpd from the existing lights definition, if exists\n          old_lpd = \nnot per-area\n\n          if not light.lightsDefinition.wattsperSpaceFloorArea.empty?\n            old_lpd = light.lightsDefinition.wattsperSpaceFloorArea.get\n          end\n          #add the old and new condition to the change log\n          spctyp_ch_log \n [space_type.name, old_lpd]\n          #make a new lights definition\n          new_lights_def = OpenStudio::Model::LightsDefinition.new(model)\n          new_lights_def.setWattsperSpaceFloorArea(lpd)\n          new_lights_def.setName(\n#{lpd} W/m^2 Lights Definition\n)\n          #replace the old lights def with the new lights def\n          light.setLightsDefinition(new_lights_def)\n        end\n      end\n    end\n\n    #report out the initial and final condition to the user\n    initial_condition = \n\n    initial_condition \n \nThere are #{num_spctyp_changed} space types\n                                    that match the name #{stn}.  \n\n    final_condition = \n\n    spctyp_ch_log.each do |ch|\n      initial_condition \n \nSpace type #{ch[0]} had an lpd of #{ch[1]}\n                            W/m^2. \n\n      final_condition \n \nspace type #{ch[0]}, \n\n    end\n    final_condition \n \nwere all set to an lpd of #{lpd} W/m^2\n\n    runner.registerInitialCondition(initial_condition)\n    runner.registerFinalCondition(final_condition)\n\n    #report if the measure was Not Applicable\n    if num_spctyp_changed == 0\n      runner.registerAsNotApplicable(\nNot Applicable -\n                                      No space types matched #{stn}.\n)\n    end\n\n    return true\n  end #end the run method\n\nend #end the measure\n\n#boilerplate that allows the measure to be use by the application\nReplaceLightsInSpaceTypeWithLPD.new.registerWithApplication\n\n\n\n\nMeasure Metadata File - measure.xml\n\n\nThe \nmeasure.xml\n file contains metadata that allow the measure to be filed into an organizational structure, provide an explanation about what the measure does and how it works, and inform the GUI where in the workflow the measure can go. The GUI creates a new measure.xml file when you click on the \"Create a New Measure\" button. In general, you should not need to make any changes to the measure.xml file manually. The OpenStudio Application and PAT detect any changes that are made to measures in your \"My Measures\" directory when you press the \"Sync Project Measures with Library\" button. Changes to the name, description, modeler description or any other measure properties will be updated in the measure and the measure will be given a new version identifier. However, there are a few limited cases when you will need to modify the measure.xml file by hand. These cases are 1) changing the measure's author information (i.e. provenance), 2) changing the tags which determine where the measure is listed in the BCL measure taxonomy, 3) changing attributes which are used when searching for the measure on the BCL. To make changes to any of these items you will have to edit the appropriate section (described below) in the measure.xml file by hand, then press the \"Sync Project Measures with Library\" button in either the OpenStudio Application or PAT to assign a new version identifier.\n\nNOTE\n: This process of creating and updating the \nmeasure.xml\n file will change for PAT 2.0, and the advent of the OpenStudio Command Line Interface (CLI).\n\n\nProvenance\n\n\nThe Provenance section describes who wrote the measure and when. As author, you may identify yourself however you desire; current convention is to use first initial of first name, followed by full last name (e.g., jdoe). You may name multiple authors. The time format follows \nISO Standard 8601\n.\n\n\nprovenances\n\n  \nprovenance\n\n    \nauthor\naparker\n/author\n\n    \ndatetime\n2013-01-28T15:00:00Z\n/datetime\n\n  \n/provenance\n\n  \nprovenance_required\ntrue\n/provenance_required\n\n\n/provenances\n\n\n\n\n\nTags\n\n\nThe Tags section describes where the measure lives in the BCL Measure taxonomy. This taxonomy is used to indicate where in the GUI the measure should be displayed. If the Tags section is blank, the measure will not show up in the GUI. The BCL Measures Taxonomy is available \nhere\n.\n\n\nAttributes\n\n\nThe Attributes section provides additional metadata that allow the GUI to display the measure in the correct place in the workflow and show only measures that can be used by a particular tool. There are currently two attributes used for the latter: \"Intended Software Tool\", and \"Intended Use Case\". These attributes are populated when a new measure is created; if you must change these after the measure has been created you must edit the measure.xml file manually. Other attributes may be added but are not currently used by OpenStudio applications.\n\n\n\n\n\nIntended Software Tool (deprecated)\n\n\nThe Intended Software Tool attribute lists the tools that this measure is intended to be used by. Software tools may choose to only display measures which list them as an intended software tool. A measure may indicate more than one tool as intended software tool. The list of software tools used by OpenStudio is:\n\n\n\n\nApply Measure Now - measures intended to be run directly on the currently open model in the OpenStudio Application. Only Model measures may be used with the \"Apply Measure Now\" feature.\n\n\nOpenStudio Application - measures intended to be run as part of the simulation workflow with the OpenStudio Application.\n\n\nParametric Analysis Tool - measures intended to be run as part of the simulation workflow in PAT.\n\n\nAnalysis Spreadsheet - measures intended to be run using the OpenStudio Analysis Spreadsheet.\n\n\n\n\nIntended Software Tool has been deprecated; it will be removed from the schema for PAT 2.0\n\n\nIntended Use Case\n\n\nThe Intended Use Case attribute describes the typical use case(s) for this measure. Software tools may choose to only display measures which apply to their intended use case. A measure can list more than one intended use case. The list of use cases used by OpenStudio is:\n\n\n\n\n\n\n\n\n\n\nModel Articulation - measures which create building modeling content. Examples include a building geometry footprint generator or a measure that adds an HVAC system to a model which does not have one.\n\n\nCalibration - measures which alter an existing model for the purposes of calibration. Examples include measures which fine tune infiltration levels or adjust existing lighting power to account for uncertainty in operational schedules.\n\n\nSensitivity Analysis - measures which alter an existing model to determine what parameters are most sensitive. Examples include a measure which makes all walls adiabatic or a measure which removes all lights from the building.\n\n\nNew Construction EE - measures which are appropriate energy conservation measures for new construction applications. Examples include increased framing depth or reduced window to wall ratio.\n\n\nRetrofit EE - measures which are appropriate energy conservation measures for retrofit applications. Examples include replacing incandescent light fixtures with high efficiency T-8s or adding occupancy sensors to uncommonly used spaces.\n\n\nAutomatic Report Generation - measures which report human or machine readable content. Examples include a report showing total floor area per space type or a report which plots energy use as a function of outdoor temperature.\n\n\n\n\nExample xml:\n\n\nattributes\n\n  \nattribute\n\n    \nname\nIntended Use Case\n/name\n\n    \nvalue\nModel Articulation\n/value\n\n    \ndatatype\nstring\n/datatype\n\n  \n/attribute\n\n  \nattribute\n\n    \nname\nIntended Use Case\n/name\n\n    \nvalue\nNew Construction EE\n/value\n\n    \ndatatype\nstring\n/datatype\n\n  \n/attribute\n\n\n/attributes\n\n\n\n\n\nMeasure Testing\n\n\nAs the measure writing community has grown, and the Building Component Library is open to all measure writers (and consumers), we believe \ntesting\n should be an integral element of the measure authoring process. A continuous integration (CI) system for the OpenStudio Measures on the BCL is in development, and we are now recommending all measures submitted to the BCL include a series of functional and unit tests, for integration with the CI system. \n\n\nSoftware testing is a means to code quality assurance and output validation, and allow the author to test their work:\n\n\n\n\nagainst various versions of Ruby\n\n\nagainst various versions of OpenStudio\n\n\nusing combinations of argument values\n\n\nagainst a variety of permutations of input models\n\n\nfor general runtime errors\n\n\nfor valid IDF output (may even run EnergyPlus to confirm)\n\n\nfor reporting measure output quality\n\n\n\n\nMeasure Test Components\n\n\nThe following sections discuss the elements of a typical measure test file.\n\n\nRequire statements\n\n\nThe default test that is automatically created when you make a new measure will contain the Ruby Classes and Modules necessary for all measures to function (you may include others here, that your code requires): \n\n\nrequire 'openstudio'\nrequire 'openstudio/ruleset/ShowRunnerOutput'\nrequire 'minitest/autorun'\nrequire_relative '../measure.rb'\nrequire 'fileutils'\n\n\n\n\nClass - MiniTest::Unit::TestCase\n\n\nThe test class name shall take the form \"[YourMeasureName]Test\". All of measure test code excluding the require statements will be contained within this class. Following this guidance, a test class for a measure named \"My Measure\" would be initialized:\n\n\nclass MyMeasureTest \n MiniTest::Unit::TestCase\n\n\n\n\nSetup and Teardown\n\n\nThe Setup and Teardown methods are inherent to the Ruby unit test framework, and we include the empty, disabled (commented-out) definitions in all auto-generated measure tests:\n\n\n  # def setup\n  # end\n\n  # def teardown\n  # end\n\n\n\n\nThese methods are useful for reliably creating an environment suitable for the ensuing test (e.g. setting paths; creating environment variables, data), and for restoring the system to its initial state. For additional details on the setup and teardown methods refer to the \nMiniTest documentation\n, and refer to the example setup and teardown methods from an actual OpenStudio measure, below:\n\n\n  # create test files if they do not exist\n  def setup\n\n    if File.exist?(reportPath())\n      FileUtils.rm(reportPath())\n    end\n\n    assert(File.exist?(modelPath()))\n    assert(File.exist?(runDir()))\n\n    if not File.exist?(sqlPath())\n      puts \nRunning EnergyPlus\n\n\n      co = OpenStudio::Runmanager::ConfigOptions.new(true)\n      co.findTools(false, true, false, true)\n\n      wf = OpenStudio::Runmanager::Workflow.new(\nmodeltoidf-\nenergypluspreprocess-\nenergyplus\n)\n      wf.add(co.getTools())\n      job = wf.create(OpenStudio::Path.new(runDir()), OpenStudio::Path.new(modelPath()))\n\n      rm = OpenStudio::Runmanager::RunManager.new\n      rm.enqueue(job, true)\n      rm.waitForFinished\n    end\n  end\n\n  # delete output files\n  def teardown\n\n    # comment this out if you don't want to rerun EnergyPlus each time\n    if File.exist?(sqlPath())\n      #FileUtils.rm(sqlPath())\n    end\n\n    # comment this out if you want to see the resulting report\n    if File.exist?(reportPath())\n      #FileUtils.rm(reportPath())\n    end\n  end\n\n\n\n\nTest Definition(s)\n\n\nYou may have as many individual tests in your test file as needed to ensure the quality of your work:\n\n\n  def test_my_measure_good_argument_values_test\n\n\n\n\nExample Tests\n\n\n\n\nTest the number and name(s) of measure arguments\n\n\nTest for incorrect or invalid argument values; the measure should fail gracefully with a meaningful error message to the user.\n\n\nTest a modeling result, e.g. source energy use, to remain within a specific range.\n\n\n\n\nCreate Measure Instance and Runner\n\n\nThis will look pretty much the same for all measures and tests. The main change will be updating the class of the measure. Refer to the measure.rb that goes with the test to confirm it is correct.\n\n\n    # create an instance of the measure\n    measure = MyMeasure.new\n\n    # create an instance of a runner\n    runner = OpenStudio::Ruleset::OSRunner.new\n\n\n\n\nModel and Workspace Creation, Loading\n\n\nEvery measure needs a \nmodel\n or \nworkspace\n (and results, in the case of a reporting measure) upon which to (inter)act. Measures can create source OSMs (and IDFs), or load existing ones. \n\n\nCreate New Model\n\nThe OpenStudio Model Class provides a method (\n.new\n)to create an empty model (.OSM):\n\n\n    # make an empty model\n    model = OpenStudio::Model::Model.new\n\n\n\n\nLoad Existing Model\n\nThe code below shows how to load an existing model. This is useful when the author wishes to test some specific model objects or configuration; a pre-existing model may be included in the resources of a given test. Note in this example, we use \nassert\n to test if the model exists (i.e., the \nload\n was successful), prior to using the \nget\n method on it. \n\n\n    # load the test model\n    translator = OpenStudio::OSVersion::VersionTranslator.new\n    path = OpenStudio::Path.new(File.dirname(__FILE__) + \n/my_test_model_test_input.osm\n)\n    model = translator.loadModel(path)\n    assert((not model.empty?))\n    model = model.get\n\n\n\n\nCreate New Workspace, Blank IDF\n \n\n\n    # make an empty workspace\n    workspace = OpenStudio::Workspace.new(\nDraft\n.to_StrictnessLevel, \nEnergyPlus\n.to_IddFileType)\n\n\n\n\nLoad Existing IDF\n\n\n    # load an IDF\n    path = OpenStudio::Path.new(File.dirname(__FILE__) + \n/my_test_input.idf\n)\n    workspace = OpenStudio::Workspace.load(path)\n    assert((not workspace.empty?))\n    workspace = workspace.get\n\n\n\n\nLoad IDF from OSM\n\ni.e., load an OSM and forward translate it to IDF:\n\n\n    # load the test model\n    translator = OpenStudio::OSVersion::VersionTranslator.new\n    path = OpenStudio::Path.new(File.dirname(__FILE__) + \n/my_test_model_test_input.osm\n)\n    model = translator.loadModel(path)\n    assert((not model.empty?))\n    model = model.get\n\n    # forward translate OSM file to IDF file\n    ft = OpenStudio::EnergyPlus::ForwardTranslator.new\n    workspace = ft.translateModel(model)\n\n\n\n\nTo see what is loaded for reporting measure, refer to the code template that comes with a new reporting measure.\n\n\nTesting Argument Values\n\n\nA fairly common test topic is the measure's arguments, as previously mentioned. Here we demonstrate how to accomplish this. We need to \"get\" the measure arguments, and then apply logical tests to them for validity.\n\n\nGet the arguments:\n\n\n    # get arguments\n    arguments = measure.arguments(model)\n    argument_map = OpenStudio::Ruleset.convertOSArgumentVectorToMap(arguments)\n\n\n\n\nNote:\n In the case of a model measure, we pass \nmodel\n to the \n.arguments\n method; for an EnergyPlus measure we pass in the \nworkspace\n. The reporting measure does not require an argument here.\n\n\nLet us test (assert) for the expected number of arguments (one (1) in this example), and the argument name at a specific index location:\n\n\n    assert_equal(1, arguments.size)\n    assert_equal(\nspace_name\n, arguments[0].name)\n\n\n\n\nMeasure tests will often need to supply user argument values. Indeed, certain tests will specifically be testing for good and/or bad input, as mentioned. Here, we create a hash and populate it with the user arguments and their values:\n\n\n    # create hash of argument values\n    args_hash = {}\n    args_hash[\nspace_name\n] = \nNew Space\n\n    args_hash[\nsome_integer_we_need\n] = 10\n    args_hash[\nsome_double_we_need\n] = 10.0\n    args_hash[\na_bool_argument\n] = true\n\n\n\n\nAfter the hash has been created, then loop through the arguments to apply the hash values to the arguments. Typically the size of the hash will match the size of the arguments.\n\n\n    # populate argument with specified hash value if specified\n    arguments.each do |arg|\n      temp_arg_var = arg.clone\n      if args_hash[arg.name]\n        assert(temp_arg_var.setValue(args_hash[arg.name]))\n      end\n      argument_map[arg.name] = temp_arg_var\n    end\n\n\n\n\nRun the Measure\n\n\nHere, we run the OpenStudio measure from the test. \n\nNote:\n (For EnergyPlus measures, replace \nmodel\n with \nworkspace\n; reporting measures do not require a model argument at all, just \nrunner\n and \nargument_map\n are passed to the method.)\n\n\n    measure.run(model, runner, argument_map)\n    result = runner.result\n\n\n\n\nShow Log Messages\n\n\nYou may print log messages to the console: \n\n\nshow_output(result)\n\n\n\n\nThis will report the same feedback to the console that users in the GUI would see in the OpenStudio application, or PAT. Placing this directive ahead of any \nassert\ns will provide feedback if an assert fails, aiding in assert failure diagnostics (see below).\n\n\nAssertions\n\n\nAssertions\n are the primary means for testing with the Ruby unit test class. Below are some example assertions in the context of OpenStudio measures.\n\n\nAt a minimum a measure test suite should a test for result state. Valid options are \"Success\", \"Fail\", or \"NA\":\n\n\nassert_equal(\nSuccess\n, result.value.valueName)\n\n\n\n\nAuthors may test for the expected number of info, or warning messages:\n\n\nassert(result.info.size == 1)\nassert(result.warnings.size == 0)\n\n\n\n\nHere is a model-specific example that inspects the model to see that it was altered as expected:\n\n\n# check output model has one added space, where\n# 'num_spaces_seed' equals the initial space count from the input model\nassert_equal(1, model.getSpaces.size - num_spaces_seed)\n\n\n\n\nSaving Output Models\n\n\nSaving the measure output model is not required, but can be useful for debugging the measure workflow itself, either during the initial authoring, or later feature expansion of a given measure. \n\n\nThe example below will save the output model in a subdirectory of the test directory tree.  This \"test\" directory should be excluded from version control so that it is not distributed with the measure and tests.\n\n\n#save the model to test output directory\noutput_file_path = OpenStudio::Path.new(File.dirname(__FILE__) + \n/output/my_test_model_test_a_output.osm\n)\nmodel.save(output_file_path,true)\n\n\n\n\nPutting It All Together - A Complete Measure Test File\n\n\nrequire 'openstudio'\nrequire 'openstudio/ruleset/ShowRunnerOutput'\nrequire 'minitest/autorun'\nrequire_relative '../measure.rb'\nrequire 'fileutils'\n\nclass NewMeasureTest \n MiniTest::Unit::TestCase\n\n  # def setup\n  # end\n\n  # def teardown\n  # end\n\n  def test_number_of_arguments_and_argument_names\n    # create an instance of the measure\n    measure = NewMeasure.new\n\n    # make an empty model\n    model = OpenStudio::Model::Model.new\n\n    # get arguments and test that they are what we are expecting\n    arguments = measure.arguments(model)\n    assert_equal(4, arguments.size)\n    assert_equal(\nspace_name\n, arguments[0].name)\n  end\n\n  def test_bad_argument_values\n    # create an instance of the measure\n    measure = NewMeasure.new\n\n    # create an instance of a runner\n    runner = OpenStudio::Ruleset::OSRunner.new\n\n    # make an empty model\n    model = OpenStudio::Model::Model.new\n\n    # get arguments\n    arguments = measure.arguments(model)\n    argument_map = OpenStudio::Ruleset.convertOSArgumentVectorToMap(arguments)\n\n    # create hash of argument values\n    args_hash = {}\n    args_hash[\nspace_name\n] = \n\n    args_hash[\nsome_integer_we_need\n] = 10\n    args_hash[\nsome_double_we_need\n] = 10.0\n    args_hash[\na_bool_argument\n] = true\n\n    # populate argument with specified hash value if specified\n    arguments.each do |arg|\n      temp_arg_var = arg.clone\n      if args_hash[arg.name]\n        assert(temp_arg_var.setValue(args_hash[arg.name]))\n      end\n      argument_map[arg.name] = temp_arg_var\n    end\n\n    # run the measure\n    measure.run(model, runner, argument_map)\n    result = runner.result\n\n    # show the output\n    show_output(result)\n\n    # assert that it ran correctly\n    assert_equal(\nFail\n, result.value.valueName)\n  end\n\n  def test_good_argument_values\n    # create an instance of the measure\n    measure = NewMeasure.new\n\n    # create an instance of a runner\n    runner = OpenStudio::Ruleset::OSRunner.new\n\n    # load the test model\n    translator = OpenStudio::OSVersion::VersionTranslator.new\n    path = OpenStudio::Path.new(File.dirname(__FILE__) + \n/my_test_model_test_input.osm\n)\n    model = translator.loadModel(path)\n    assert((not model.empty?))\n    model = model.get\n\n    # store the number of spaces in the seed model\n    num_spaces_seed = model.getSpaces.size\n\n    # get arguments\n    arguments = measure.arguments(model)\n    argument_map = OpenStudio::Ruleset.convertOSArgumentVectorToMap(arguments)\n\n    # create hash of argument values.\n    # If the argument has a default that you want to use, you don't need it in the hash\n    args_hash = {}\n    args_hash[\nspace_name\n] = \nNew Space\n\n    # using defaults values from measure.rb for other arguments\n\n    # populate argument with specified hash value if specified\n    arguments.each do |arg|\n      temp_arg_var = arg.clone\n      if args_hash[arg.name]\n        assert(temp_arg_var.setValue(args_hash[arg.name]))\n      end\n      argument_map[arg.name] = temp_arg_var\n    end\n\n    # run the measure\n    measure.run(model, runner, argument_map)\n    result = runner.result\n\n    # show the output\n    show_output(result)\n\n    # assert that it ran correctly\n    assert_equal(\nSuccess\n, result.value.valueName)\n    assert(result.info.size == 1)\n    assert(result.warnings.size == 0)\n\n    # check that there is now 1 space\n    assert_equal(1, model.getSpaces.size - num_spaces_seed)\n\n    # save the model to test output directory\n    output_file_path = OpenStudio::Path.new(File.dirname(__FILE__) + \n/output/my_test_model_test_a_output.osm\n)\n    model.save(output_file_path,true)\n  end\n\nend\n\n\n\n\nRunning Tests\n\n\nSystem Configuration\n\n\nMacOS/Linux\n\nGenerally speaking, no additional configuration is required for MacOS and Linux operating systems; Ruby is usually already installed, and if OpenStudio is installed, Ruby is configured to locate it. \n\n\nWindows\n \nThe system's Ruby environment variables must be configured to either:\n\n\n\n\npoint to the version of ruby that OpenStudio installed, or, if there is another version or ruby installed on the system:\n\n\npoint that version of Ruby to OpenStudio\n\n\n\n\nIn either case, typing \"environment variables\" in the Windows Start Menu search field will present options to change the environment variables for your account; follow the screenshots below.\n\n\n\n\nAdd the following path to the system PATH variable. Specific path will vary based on OpenStudio version, as 32-bit and 64-bit versions of OpenStudio are also installed to different \"Program Files\" directory roots.\n\n\nC:\\Program Files\\OpenStudio [version]\\ruby-install\\ruby\\bin\n\n\n\n\nAuthors wishing to use an \nexisting\n Ruby installation must add an \nopenstudio.rb\n file in \nlib\\ruby\\site_ruby\n, with a path reference to the preferred of OpenStudio. Ruby 2.0.x is required.\n\n\nrequire 'C:\\Program Files\\OpenStudio 1.7.0\\Ruby\\openstudio.rb'\n\n\n\n\n\n\n\nTest Environments\n\n\nCommand Line Interface (CLI)\n\n\nSimply call Ruby with \n[your_test].rb\n as the input:\n\n\nruby my_measure_test.rb\n\n\n\n\n\n\nIDE/Text Editor\n\n\nYou may wish to execute your tests directly from your programming working environment, be that an Integrated Development Environment (IDE) or the text editor of your choice. By way of example, we include instructions on how to set up the popular Windows text editor \nNotepad++\n to execute your tests:\n\n\n\n\nInstall the NppExec plugin, using the plugin manager within NotePad++:\n\n\n\n\n\n\n\n\nReturn to the Plugins menu, and select \"Execute\"; ensure \"Follow $(CURRENT_DIRECTORY)\" is checked:\n\n\n\n\n\n\nAfter you click \"Execute\" you will see a dialog. If you don't already see the following text in the command window, type it in.\n\n\nruby \n$(FULL_CURRENT_PATH)\n\n\n\n\n\nThe bottom of the screenshot shows the measure output. We see the log messages, and the number of tests run and assertions. Note that \nputs\n statements visible here, but they are not visible when the measure is run from the OpenStudio GUIs. Use \nrunner.Register[Info|Warning|Error]\n directives for those, as explained elsewhere.\n\n\n\n\nAutomated testing\n\n\nNREL is in the process of developing an automated testing and continuous integration (CI) framework for the OpenStudio Measures contained on the BCL, and will include details on how to integrate your own measures with this test framework, here.\n\n\nAdvanced Topics\n\n\nEnergyPlus Measures\n\n\nMeasures typically operate on an OpenStudio model, via the OpenStudio Model API, thus granting measure authors access to the entirety of the OpenStudio Model. However, as the OpenStudio model does not yet include the entirety of the EnergyPlus Data Model, we offer the \nEnergyPlus Measure\n as a means to access the full EnergyPlus IDD. \n\n\nEnergyPlus measures give measure authors the ability to continue a programmatic modeling workflow throughout the BEM process, but EnergyPlus measures operate on an IDF; as such, they are intended to be run \nafter\n the OSM has been translated from OpenStudio to EnergyPlus. \n\n\nBelow are some specific code differences between EnergyPlus measures and OpenStudio measures:\n\n\nClasses must reference \nWorkspace\n versus \nModel\n, as shown in the following examples:\n\n\nInitialization:\n\n\nclass ConstructionTakeOff \n OpenStudio::Ruleset::WorkspaceUserScript\n\n\n\n\nMethod arguments:\n\n\ndef arguments(workspace)\n\n\n\n\ndef run(workspace, runner, user_arguments)\n  super(workspace, runner, user_arguments)\n\n\n\n\nThe EnergyPlus IDD API is simpler than the OpenStudio Model API; it allows for changing .idf fields directly, getting all objects of a certain type, etc. This functionality is under the utilities project in the classes \nWorkspace\n and \nWorkspaceObject\n.\n\n\nFinding and Inspecting EnergyPlus Objects\n\n\nThe following example shows how to find and loop through EnergyPlus objects. We locate objects in an EnergyPlus Workspace by IDD type (e.g., \nBuildingSurface:Detailed\n). These types can be found in the EnergyPlus documentation shown in Section 5.4. The IDF model is not an object model. As a result, instead of requesting a name we access specific fields by index in the IDD (0-based), e.g. \n.getString(2)\n:\n\n\n  # get all surfaces and constructions in model\n  heat_transfer_surfaces = workspace.getObjectsByType(\nBuildingSurface:Detailed\n.to_IddObjectType)\n  #the line below won't get other objects such as Construction:InternalSource.\n  constructions = workspace.getObjectsByType(\nConstruction\n.to_IddObjectType)\n\n  # report initial condition\n  runner.registerInitialCondition(\nThe model has #{constructions.size} construction objects.\n)\n\n  # array for constructions that are used on a heat transfer surface\n  used_constructions_names = [] #just holds names\n\n  # get names of constructions used in the model\n  heat_transfer_surfaces.each do |heat_transfer_surface|\n    construction = heat_transfer_surface.getString(2).to_s #(0) is name, (1) is Surface Type, etc.\n    used_constructions_names \n construction\n  end\n\n\n\n\nAdding EnergyPlus Workspace Objects\n\n\nThe following example shows how to insert a new EnergyPlus object into the Workspace. A string is created, using Ruby's string substitution mechanisms to set variable values, and then the string is turned into IdfObject and finally added to the Workspace.\n\n\n  # array to hold new IDF objects\n  string_objects = []\n\n  # create sorted (.sort) list of unique (.uniq) constructions from all \n  # constructions in model, adding ComponentCost:LineItem for each\n\n  used_constructions_names.sort.uniq.each do |used_construction_name|\n\n    #IDF object text for ComponentCost:LineItem\n    string_objects \n \n\n      ComponentCost:LineItem,\n        #{used_construction_name}_TakeOff,    !- Name\n        ,                                     !- Type\n        Construction,                         !- Line Item Type\n        #{used_construction_name},            !- Item Name\n        ,                                     !- Object End Use Key\n        ,                                     !- Cost per Each {$}\n        0.000000000001;                       !- Cost per Area {$/m2}\n        \n\n  end\n\n  # add all of the strings to workspace to create IDF objects\n  string_objects.each do |string_object|\n    idfObject = OpenStudio::IdfObject::load(string_object)\n    object = idfObject.get\n    wsObject = workspace.addObject(object)\n  end\n\n\n\n\nEditing EnergyPlus Workspace Objects\n\n\nThe following example shows how to access and edit EnergyPlus objects in the Workspace.\n\n\n  # get OutputControl:Table:Style object that was generated in forward translation from OSM to IDF\n  table_style = workspace.getObjectsByType(\nOutputControl:Table:Style\n.to_IddObjectType)\n\n  # even though there is just a single object, it is still in an array\n  if not table_style.empty?\n    # we can access the first object in the array using table_style[0]\n    if table_units == \nInch-Pound\n\n      #use setString to change the field value to request IP units\n      table_style_ip = table_style[0].setString(1,\nInchPound\n)\n    else\n      #will result in SI units in tables\n      table_style_si = table_style[0].setString(1,\n)\n    end\n  end\n\n\n\n\nComplete EnergyPlus Measure Example\n\n\nThe following script creates a ComponentCost:LineItem object for each construction used in the model.\n\n\n#start the measure\nclass ConstructionTakeOff \n OpenStudio::Ruleset::WorkspaceUserScript\n\n  #define the name that a user will see\n  def name\n    return \nCreate Envelope Quantity TakeOff\n\n  end\n\n  #define the arguments that the user will input\n  def arguments(workspace)\n    args = []\n\n    #make an argument for table units\n    chs = OpenStudio::StringVector.new\n    chs \n \nInch-Pound\n\n    chs \n \nSI Units\n\n    table_units = OpenStudio::Ruleset::OSArgument::makeChoiceArgument(\ntable_units\n,chs)\n    table_units.setDisplayName(\nChoose Units for EnergyPlus Output HTML\n)\n    table_units.setDefaultValue(\nInch-Pound\n)\n    args \n table_units\n\n    return args\n  end #end the arguments method\n\n  #define what happens when the measure is run\n  def run(workspace, runner, user_arguments)\n    super(workspace, runner, user_arguments)\n\n    #assign the user inputs to variables\n    table_units = runner.getStringArgumentValue(\ntable_units\n,user_arguments)\n\n    #get all surfaces and constructions in model\n    heat_transfer_surfaces = workspace.getObjectsByType(\nBuildingSurface:Detailed\n.to_IddObjectType)\n    #the line below won't get other objects such as Construction:InternalSource.\n    constructions = workspace.getObjectsByType(\nConstruction\n.to_IddObjectType)\n\n    #report initial condition\n    runner.registerInitialCondition(\nThe model has #{constructions.size} construction objects.\n)\n\n    #array for constructions that are used on a heat transfer surface\n    used_constructions_names = [] #just holds names\n\n    #get names of constructions used in the model\n    heat_transfer_surfaces.each do |heat_transfer_surface|\n      construction = heat_transfer_surface.getString(2).to_s #(0) is name, (1) is Surface Type, etc.\n      used_constructions_names \n construction\n    end\n    #report as not applicable if there are no constructions in the model used on surfaces.\n    if used_constructions_names.empty?\n      runner.registerAsNotApplicable(\nThere are not any constructions in the model that are associated with surfaces.\n)\n    end\n\n    #array to hold new IDF objects\n    string_objects = []\n\n    # create sorted (.sort) list of unique (.uniq) constructions from all \n    # constructions in model, adding ComponentCost:LineItem for each\n\n      #IDF object text for ComponentCost:LineItem\n      string_objects \n \n\n        ComponentCost:LineItem,\n          #{used_construction_name}_TakeOff,    !- Name\n          ,                                     !- Type\n          Construction,                         !- Line Item Type\n          #{used_construction_name},            !- Item Name\n          ,                                     !- Object End Use Key\n          ,                                     !- Cost per Each {$}\n          0.000000000001;                       !- Cost per Area {$/m2}\n          \n\n    end\n\n    # add all of the strings to workspace to create IDF objects\n    string_objects.each do |string_object|\n      idfObject = OpenStudio::IdfObject::load(string_object)\n      object = idfObject.get\n      wsObject = workspace.addObject(object)\n    end\n\n    # report final condition about objects added to the model\n    runner.registerFinalCondition(\nComponentCost:LineItem objects were added for the {used_constructions_names.uniq.size} constructions that are used in the model.\n)\n\n    # if IP units requested add OutputControl:Table:Style object\n    table_style = workspace.getObjectsByType(\nOutputControl:Table:Style\n.to_IddObjectType)\n\n    # even though there is just a single object, it is still in an array\n    if not table_style.empty?\n      # we can access the first object in the array using table_style[0]\n      if table_units == \nInch-Pound\n\n        #use setString to change the field value to request IP units\n        table_style_ip = table_style[0].setString(1,\nInchPound\n)\n      else\n        #will result in SI units in tables\n        table_style_si = table_style[0].setString(1,\n)\n      end\n        end\n\n  end #end the run method\n\nend #end the measure\n\n# this allows the measure to be used by the application\nConstructionTakeOff.new.registerWithApplication\n\n\n\n\nEnergyPlus Object Documentation\n\n\nThe \"InputOutputReference.pdf\" document that ships with EnergyPlus describes every EnergyPlus object. Below is a segment of the documentation for the \nComponentCost:LineItem\n object. It describes which fields are required versus optional, and what kinds of data are expected for each field. EnergyPlus also ships with example models that illustrate the proper use of each object in a model. A spreadsheet documenting the examples is located in the \nEnergyPlus/examples\n directory of your installation.\n\n\n\n\nReporting Measures\n\n\nA \nReporting Measure\n is used for reading and reporting on output data from an OpenStudio simulation. This includes Model input as well as EnergyPlus output data. These measures are typically run after the EnergyPlus simulation for obvious reasons. Reporting Measures can extract machine readable attributes for a large automated analysis, and may produce interactive, HTML-based reports that include plots and charts.\n\n\nEnergyPlus Output Requests\n\n\nA special method, available for reporting measures only, allows reporting measures to request EnergyPlus output variables required by the \nrun\n method. This method accepts the \nrunner\n and \nuser\n arguments, returning a vector of IdfObjects that request the required outputs, these objects will be added to the .idf before simulation. A subset of IdfObject types may be requested by this method, and are listed here:\n\n\n\n\nOutput:Surfaces:List\n\n\nOutput:Surfaces:Drawing\n\n\nOutput:Schedules\n\n\nOutput:Constructions\n\n\nOutput:Table:TimeBins\n\n\nOutput:Table:Monthly\n\n\nOutput:Variable\n\n\nOutput:Meter\n\n\nOutput:Meter:MeterFileOnly\n\n\nOutput:Meter:Cumulative\n\n\nOutput:Meter:Cumulative:MeterFileOnly\n\n\nMeter:Custom\n\n\nMeter:CustomDecrement\n\n\nOutput:Table:SummaryReports (unique object)\n\n\n\n\nDuplicate requests are ignored; in the case of unique objects, the requests are merged with requests in the existing model:\n\n\n  def energyPlusOutputRequests(runner, user_arguments)\n    super(runner, user_arguments)\n\n    result = OpenStudio::IdfObjectVector.new\n\n    # use the built-in error checking\n    if !runner.validateUserArguments(arguments(), user_arguments)\n      return result\n    end\n\n    result \n OpenStudio::IdfObject.load(\nOutput:Variable,,Site Outdoor Air Drybulb Temperature,Timestep;\n).get\n    result \n OpenStudio::IdfObject.load(\nOutput:Variable,,Site Outdoor Air Humidity Ratio,Timestep;\n).get\n    result \n OpenStudio::IdfObject.load(\nOutput:Variable,,Site Outdoor Air Relative Humidity,Timestep;\n).get\n\n    result \n OpenStudio::IdfObject.load(\nOutput:Variable,,Zone Air Temperature,Timestep;\n).get\n    result \n OpenStudio::IdfObject.load(\nOutput:Variable,,Zone Air Humidity Ratio,Timestep;\n).get\n    result \n OpenStudio::IdfObject.load(\nOutput:Variable,,Zone Air Relative Humidity,Timestep;\n).get\n\n    return result\n  end\n\n\n\n\nReporting Measure Run Method\n\n\nAs mentioned, Reporting Measures are run after the simulation is complete. However, access to the last model or workspace is very useful for extracting information about the simulation. For this reason, Reporting Measures allow access to a read only copy of the last OpenStudio Model generated in the simulation workflow as well as the last EnergyPlus Workspace simulated by EnergyPlus. Additionally, the EnergyPlus SqlFile containing tabular and timeseries simulation results is available along with the EpwFile (weather file) that was used in the simulation. These objects may be accessed from the \nrunner\n as shown below:\n\n\n  # define what happens when the measure is run\n  def run(runner, user_arguments)\n    super(runner, user_arguments)\n\n    # use the built-in error checking\n    if !runner.validateUserArguments(arguments(), user_arguments)\n      return false\n    end\n\n    model = runner.lastOpenStudioModel\n    if model.empty?\n      runner.registerError(\nCannot find last model.\n)\n      return false\n    end\n    model = model.get\n\n    workspace = runner.lastEnergyPlusWorkspace\n    if workspace.empty?\n      runner.registerError(\nCannot find last workspace.\n)\n      return false\n    end\n    workspace = workspace.get\n\n    sqlFile = runner.lastEnergyPlusSqlFile\n    if sqlFile.empty?\n      runner.registerError(\nCannot find last sql file.\n)\n      return false\n    end\n    sqlFile = sqlFile.get\n\n    epwFile = runner.lastEpwFile\n    if epwFile.empty?\n      runner.registerError(\nCannot find last epw file.\n)\n      return false\n    end\n    epwFile = epwFile.get\n\n\n\n\nOutput Attributes\n\n\nWe have seen how to send log messages from measures, which are useful for providing general and debugging information to the user in the OpenStudio app, PAT, and at the command line. However, there is also a need to output machine readable attributes that can be used to create reports about design alternatives in parametric studies. These attributes are associated with the measure that generated them in the workflow. The \nregisterValue\n method is used to register these \nkey-value pairs\n:\n\n\n# runner.registerValue(key,value,units)\nrunner.registerValue(\ntotal_life_cycle_cost\n, total_life_cycle_cost, \n$\n)\n\n\n\n\nThe \nkey\n and \nunits\n parameters must be strings; the value passed to registerValue may be a \ndouble\n, \nbool\n, \ninteger\n, \nstring\n, or \nnil\n object. The output attribute key should contain lowercase alphanumeric characters with underscores where you would typically have a space (snake_case). The attribute key should not start with a number. Additionally the following characters shall not be used in output attribute key names:\n\n\n| ! @ # $ % ^ \n * ( ) { } \\ [ ] ; : ' \n , \n . \n \\ / ? + =\n\n\n\n\nBy default, all measure arguments are automatically output in machine readable format. For example, if a measure takes an argument named 'rotation':\n\n\nrelative_building_rotation = OpenStudio::Ruleset::OSArgument.makeDoubleArgument('rotation', true)\n\n\n\n\nAn attribute named 'rotation' will automatically be added to the measure's output, with the value passed in by the user. Measure writers may output any attributes they wish. If a measure outputs multiple attributes with the same name, preceding definitions are clobbered (i.e. the last attribute reported by that name will be preserved). Measure writers are encouraged to use terms that are present in the BCL taxonomy (and the upcoming \nDEnCity\n API) to allow applications to understand attribute names. Additionally, special modifiers can be added to attribute names which will imply additional relationships between attributes. These special attribute modifiers are documented below, using the \nrotation\n attribute:\n\n\n\n  \n\n    \nModifier\n\n    \nExample\n\n    \nMeaning\n\n  \n\n  \n\n    \n*_initial \n\n    \nrotation_initial\n\n    \nThe value of 'rotation' in the initial model before the measure was run.\n\n  \n\n  \n\n    \n*_final  \n\n    \nrotation_final\n\n    \nThe value of 'rotation' in the final model after the measure was run.\n\n  \n\n  \n\n    \n\n    \n\n    \nThis should be reported even if the measure returns false or NA.\n\n  \n\n\n\n\n\nMeasure Internationalization\n\n\nThis section describes how to use the new measure internationalization features of OpenStudio 2.0.0. The new functionality allows measure developers to build in support for multiple languages and multiple unit systems. Existing measures will continue to work without any  modification. Measure developers who don't want 'internationalized' measures can continue to write them as described in the \"Writing Measures\" section earlier on this page.\n\n\nRunner Enhancements\n\n\nNew Runner methods in OpenStudio 2.0.0 pass a an optional user specified language and an optional user specified unit type into the measure. If an interface using OpenStudio doesn't support this, then 'nil' will be passed in for both methods. Both methods take a string value used by methods in the measure. There should always be a default catchall language and unit system to use if a language or unit system is requested that the measure doesn't handle. For example if the measure is written to support \"English\" and \"French\", but \"Spanish\" is passed in, the measure should still run successfully, but will fall back to English.\n\n\nBelow are examples of these two methods in use.\n\n\n# returns a string such as \nfr\n\nlanguage_preference = runner.languagePreference\n\n# returns a string such as \nSI\n\nunits_preference = runner.unitsPreference\n\n\n\n\nName, Description, and Modeler Description Enhancements\n\n\nPrior to OpenStudio 2.0 the name, description, and modeler description methods each returned a string. OpenStudio 2.0 adds support for a hash to be returned, where the key defines the language and the value a string. To support the new functionality, the runner is now passed into these methods. The description method is unique in that a modeler can alter it. The language of the altered description won't be tracked.\n\n\nBelow is an example of the name method. The same approach would be followed for description and modeler description.\n\n\n  # human readable name (is this good time to change method to display_name?)\n  def name (runner)\n    display_name_hash = {}\n    display_name_hash[:en] = \nSet Insulation Thickness To User Specified Value.\n\n    display_name_hash[:fr] = \nR\u00e9glez l'\u00e9paisseur d'isolation Pour l'utilisateur sp\u00e9cifi\u00e9 Valeur.\n\n    display_name_hash[:es] = \nEstablecer el grosor del aislamiento a un valor espec\u00edfico del usuario.\n\n\n    return display_name_hash\n  end\n\n\n\n\nArguments Method Enhancements\n\n\nMethods to set an argument's display name, default, and description have been enhanced to accept the an input for preferred language. Methods to set an argument's default value and units have been enhanced to accept an input for for the preferred unit system. Arguments that don't take a double, integer, or take an argument that is unitless, don't have to address unit preference.\n\n\nBelow is an example arguments method that supports English, French, and Spanish as languages, and SI and IP units.\n\n\n  # define the arguments that the user will input\n  def arguments (model,runner)\n    args = OpenStudio::Ruleset::OSArgumentVector.new\n\n    # get internationalization preferences\n    language_preference = runner.languagePreference\n    units_preference = runner.unitsPreference # not currently used here, does GUI handle this?\n\n    # make an argument\n    insl_thckn = OpenStudio::Ruleset::makeDoubleArgument('insl_thckn',true)\n\n    # set langauge specific argument display name\n    display_name_hash = {}\n    display_name_hash[:en] = 'Insulation Thickness'\n    display_name_hash[:fr] = '\u00c9paisseur d'isolation'\n    display_name_hash[:es] = 'Espesor de aislamiento'\n    # args for setDisplayName (string hash, unit pref from GUI, fallback language)\n    insl_thckn.setDisplayName(display_name_hash,units_preference,'en')\n\n    # set langauge specific argument description\n    display_description_hash = {}\n    display_description_hash[:en] = 'Enter the resulting thickness for the insulation material, not a delta from the starting thickness.'\n    display_description_hash[:fr] = 'Entrer l'\u00e9paisseur r\u00e9sultante du mat\u00e9riau d'isolation et non pas un delta de l'\u00e9paisseur de d\u00e9part.'\n    display_description_hash[:es] = 'Introduzca el espesor resultante para el material de aislamiento , no un delta a partir del espesor de partida.'\n    # args for setDescription (string hash, unit pref from GUI, fallback language)\n    insl_thckn.setDescription(display_description_hash,units_preference,'en')  \n\n    # set units for argument\n    # if units_preference is \nIP\n then GUI should show 1.5 (in)\n    # if units_preference is \nSI\n then GUI shoudl show 0.0381 (m)\n    # if GUI is in IP and user types 6 (in) the stored value in OSW will be 0.1524 (m)\n    insl_thckn.setUnits(\nm\n)\n    insl_thckn.setUnitsIp(\nin\n) # optional, set if don't want to use default mapping  \n    insl_thckn.setDefaultValue(0.0381) # tied to setUnits, assumed to be SI value\n\n    # add to vector of arguments\n    args \n insl_thckn\n\n    return args\n  end # end the arguments method\n\n\n\n\n\nRun Method Enhancements\n\n\nThe value and units for arguments can be retrieved in the run section. Generally units should stay in SI, unless a log message or register value needs IP. In that case, conversion should be done just for the message(s).\n\n\nBelow is an example run method that manipulates and reports values related to a user argument\n\n\n  # define what happens when the measure is run\n  def run(model, runner, user_arguments)\n    super(model, runner, user_arguments)\n\n    # use the built-in error checking\n    if !runner.validateUserArguments(arguments(model), user_arguments)\n      return false\n    end\n\n    # assign the user inputs to variables\n    insl_thckn_si = runner.getDoubleArgumentValue(\ninsl_thckn\n, user_arguments)\n    insl_thckn_units_si = runner.getDoubleArgumentUnits(\ninsl_thckn\n, user_arguments) # runner.getDoubleArgumentsUnits isn't currently a valid method\n    insl_thckn_units_ip = runner.getDoubleArgumentUnitsIp(\ninsl_thckn\n, user_arguments) # runner.getDoubleArgumentsUnitsIp isn't currently a valid method\n\n    # get internationalization preferences\n    language_preference = runner.languagePreference\n    units_preference = runner.unitsPreference # needed here since the measure, not GUI will control log messages\n\n    # change the model (didn't show code where 'some_material' is found in the model)\n    some_material.setThickness(insl_thckn_si)\n\n    # get display value and units for thickness\n    if units_preference == \nSI\n\n        thickness_value_pref_units = some_material.thickness # if insl_thckn_units_si isn't same as unit for that field still need to convert e.g. OpenStudio::convert(value,'m',cm')\n        thickness_display_units = insl_thckn_units_si\n        num_decimals = 2 # bettter to specify significant digits in message vs unit specific rounding values?\n    else\n        thickness_value_pref_units = OpenStudio::convert(some_material.thickness,insl_thckn_units_si,insl_thckn_units_ip).get\n        thickness_display_units = insl_thckn_units_ip\n        num_decimals = 1\n    end\n\n    # report back the user the thickness from the material\n    case language_preference\n    when 'fr'\n        runner.registerInfo(\nL'\u00e9paisseur r\u00e9sultante de #{some_material.name} \u00e9tait de #{thickness_value_pref_units.round(num_decimals)} (#{thickness_display_units).\n)\n    when 'es'\n        runner.registerInfo(\nEl espesor resultante de #{some_material.name} fue #{thickness_value_pref_units.round(num_decimals)} (#{thickness_display_units).\n)\n    else\n        runner.registerInfo(\nThe Resulting thickness of #{some_material.name} was #{thickness_value_pref_units.round(num_decimals)} (#{thickness_display_units).\n)\n    end\n\n    # Similar approach as above would be used on initial condition, final condition, warning, error messages. runner.registerValue is a little different\n\n    # register value\n    # note that the first argmuent 'name' doesn't chagne by language, but the second argument 'displayName' does\n    # also note that registerValue isn't rounded like registerInfo and other messages are\n    case language_preference\n    when 'fr'\n        runner.registerValue('some_material_thickness',\nEssai Epaisseur du mat\u00e9riau\n,thickness_value_pref_units,thickness_display_units)   \n    when 'es'\n        runner.registerValue('some_material_thickness',\nMaterial de Ensayo Espesor\n,thickness_value_pref_units,thickness_display_units)   \n    else\n        runner.registerValue('some_material_thickness',\nTest Material Thickness\n,thickness_value_pref_units,thickness_display_units)   \n    end    \n\n    return true\n  end\n\n\n\n\nAdditional References\n\n\nOpenStudio Documentation Home\n\n\nOpenStudio SDK documentation\n\n\nRuby Style Guide", 
            "title": "Measure Writer's Reference Guide"
        }, 
        {
            "location": "/reference/measure_writing_guide/#introduction", 
            "text": "In its most basic form, an OpenStudio measure (henceforth referred to as a \"measure\") is a program (or 'script', or 'macro', if you like) that can access and leverage the OpenStudio model and API to create or make changes to a building energy model, as defined by an OpenStudio model (.osm). Typically, a measure modifies an existing .osm in order to implement a given  energy conservation measure  (ECM). For example, a measure might change the insulation rating of the exterior walls, change the window-to-wall ratio of a specific facade, or modify operational or occupancy schedules. Measures may also generate reports on the input and output of a given energy model; as such, these are referred to as  reporting measures .   Measures may be linked together in a workflow in order to implement complex ECMs, or to repeatably implement ECMs across building types or climate zones; measures can even generate entire -- code-compliant and climate-zone specific -- building models soley from user inputs.   Measures are written in Ruby, which allows the measure author to access OpenStudio directly as well as through the SketchUp plugin. Measures can be created from scratch, but existing measures may also be used as a starting basis (recommended).", 
            "title": "Introduction"
        }, 
        {
            "location": "/reference/measure_writing_guide/#best-practices", 
            "text": "For general Ruby coding and style advice (formatting, variable names, etc.), we recommend following the guidance of the  Ruby Style Guide .   For simple (short) measures, a text editor is all that is necessary. More extensive measures and resource files may benefit from the use of a proper IDE such as  RubyMine .  We cannot stress enough the importance of version control and backup. The OpenStudio dev team relies on Git for version control, and  GitHub  for hosting all code repositories.", 
            "title": "Best Practices"
        }, 
        {
            "location": "/reference/measure_writing_guide/#writing-measures", 
            "text": "", 
            "title": "Writing Measures"
        }, 
        {
            "location": "/reference/measure_writing_guide/#file-structure", 
            "text": "Every OpenStudio measure is comprised of a program and metadata, and optionally includes additional resources (e.g. libraries, helper functions) and tests. These are all contained in a single directory, generally named after the measure itself. A typical measure directory structure is as follows:", 
            "title": "File Structure"
        }, 
        {
            "location": "/reference/measure_writing_guide/#measure-program-file-measurerb", 
            "text": "The file 'measure.rb' is the main measure program. It may contain the entire program or may rely on additional functionality defined in one or more resource files, located in the 'resources' directory.", 
            "title": "Measure Program File - measure.rb"
        }, 
        {
            "location": "/reference/measure_writing_guide/#initialization", 
            "text": "OpenStudio measures are instantiated by creating a class based on the OpenStudio  ModelUserScript  object:  class AddContinuousInsulationToWalls   OpenStudio::Measure::ModelMeasure\n  ...\nend  ...and instantiating thusly:  AddContinuousInsulationToWalls.new.registerWithApplication  Please note the original measure instantiantiation syntax,  OpenStudio::Ruleset::ModelUserScript , is deprecated.   Class naming convention shall follow  Ruby best practices .", 
            "title": "Initialization"
        }, 
        {
            "location": "/reference/measure_writing_guide/#measure-elements", 
            "text": "Every measure requires the following elements, defined as functions of the main program:    name  description  modeler_description  arguments  run", 
            "title": "Measure Elements"
        }, 
        {
            "location": "/reference/measure_writing_guide/#name", 
            "text": "The measure name is the first contact a user has with the measure; it is also shared throughout the measure workflow, visible in the OpenStudio Application, PAT, Server Management Consoles, and in output reports. As such, measure names should clearly describe the measure's function, while remaining general in nature.  Example Measure Names     Good   Poor      Replace HVAC System with DX and Natural Gas AHUs   DX and Natural Gas AHUs    Set Interior Walls to Selected Construction   Insulate Walls    Remove all Electrical Equipment in Specified Space Types   Modify Electric Equipment     Usage:  def name\n  return  Add Continuous Insulation to Walls \nend", 
            "title": "Name"
        }, 
        {
            "location": "/reference/measure_writing_guide/#description", 
            "text": "The measure description is intended for a general audience and should not assume that the reader is familiar with the design and construction practices suggested by the measure. Thus, the description should include general details about how the measure would be implemented, along with explanations of associated qualitative benefits thereof. It is good practice to include citations in the description if the measure's intended effect is grounded in published work.  Usage:  def description\n  return  Add a layer of continuous insulation between the framing members and exterior cladding. This insulation layer is in addition to any bat insulation installed between framing members. Continuous insulation must be installed without thermal bridges other than fasteners and service openings, adding continuous insulation to a design may require longer fasteners. For more information please see  a href='http://fsc.americanchemistry.com/Exterior-Walls/Continuous-Insulation-Educational-Presentation.pdf' here /a . \nend", 
            "title": "Description"
        }, 
        {
            "location": "/reference/measure_writing_guide/#modeler-description", 
            "text": "The modeler description is intended for the energy modeler using the measure. It should explain the measure's intent, and include any requirements about how the baseline model must be set up, major assumptions made by the measure, and relevant citations or references to applicable modeling resources. The energy modeler should be able to read this description and understand the changes the measure make to the model and why.   TIP: This description could be used in automatically generated reports, e.g. in an appendix describing the modeling approach of each measure considered for an energy savings study.  Usage:  def modeler_description\n  return  This measure will select all constructions used on exterior walls. For each construction found, if the second material layer is of type OS:Material:NoMass, then that layer will be assumed to be existing continuous insulation and will be replaced by the material layer user-specified by this measure. If the second layer is not of type OS:Material:NoMass, then a new material layer will be inserted at the second material layer position. If any non-exterior wall surfaces use this construction, it will be cloned before being altered and the altered construction will be hard assigned to the appropriate exterior wall surfaces. \nend", 
            "title": "Modeler Description"
        }, 
        {
            "location": "/reference/measure_writing_guide/#arguments", 
            "text": "Measure arguments define which -- if any -- input parameters the user may set before running the measure. In our example measure \"Add Continuous Insulation to Walls\", the thickness of the insulation, and the R-value per inch of thickness, are the user-definable arguments. The measure arguments make a general meaure, specific. Further, these arguments become the variables in a parametric analysis that are passed to PAT, or the OpenStudio Analysis Spreadsheet.  Usage:  We define a user argument vector and create a single argument for insulation thickness, provide the user a single argument, insulation thickness, along with a few argument parameters. Note we pass the entire model to the function, in case any arguments presented to the user are model dependent:  def arguments(model)\n    args = OpenStudio::Ruleset::OSArgumentVector.new\n    insl_thckn = OpenStudio::Ruleset::makeDoubleArgument('insl_thckn',true)\n    insl_thckn.setDisplayName('Insulation Thickness (in)')\n    insl_thckn.setDefaultValue(1.5)\n    args   insl_thckn\n    return args\nend  There is a statement to create a new argument of the type \"double\" and assign it to the variable \"insl_thckn\". The \"true\" at the end of this line indicates that the argument is required. The next line defines the display name of the argument; the user will see this in the GUI (recommended practice dictates we identify the units for the argument inside parentheses at the end of the display name). Lastly, we specify the default value for the argument. This default value is presented initially to the user, but the user can change the value in the GUI.", 
            "title": "Arguments"
        }, 
        {
            "location": "/reference/measure_writing_guide/#argument-types", 
            "text": "Valid argument types are as follows:  Double  - any real number e.g. 1.0, -1.5, 50.5  v1 = OpenStudio::Ruleset::OSArgument::makeDoubleArgument('v1', false)  Integer  - any whole number e.g. 1, -2, 51  v2 = OpenStudio::Ruleset::OSArgument::makeIntegerArgument('v2', false)  Boolean (Bool)  - logical (true/false) choice option  v3 = OpenStudio::Ruleset::OSArgument::makeBoolArgument('v3', false)  String  - for accepting text input  v4 = OpenStudio::Ruleset::OSArgument::makeStringArgument('v4', false)  Choice  - a vector of list options. For the choice argument, the measure author creates the options and passes them to the argument, e.g.:  chs = OpenStudio::StringVector.new\nchs    Option 1 \nchs    Option 2 \nv5 = OpenStudio::Ruleset::OSArgument::makeChoiceArgument('v5', chs, true)  Possible values for the choice arguments may also be extracted from the model. For example, the following would give the user a choice of any zones in the model, sorted by zone name.  v6 = OpenStudio::Ruleset::makeChoiceArgumentOfWorkspaceObjects\n          ( v6 , OS_Thermal_Zone .to_IddObjectType,model,true)", 
            "title": "Argument Types"
        }, 
        {
            "location": "/reference/measure_writing_guide/#run", 
            "text": "The run method is the container for the main measure code -- your program -- and is formatted as follows:  def run(model, runner, user_arguments)\n  super(model, runner, user_arguments)\n  ...\n  return true\nend  The template above will define your measure as \"runnable\" to the OpenStudio API. super() tells the code to call the base class  ModelUserScript::run  method. Ruby best practice calls for the \"return true\" line, for proper exit status reporting.", 
            "title": "Run"
        }, 
        {
            "location": "/reference/measure_writing_guide/#log-messages", 
            "text": "Log messages may be directed to the GUI, the command line interface, and/or to log streams. The OpenStudio GUI supports three log levels:  Info ,  Warning , and  Error .", 
            "title": "Log Messages"
        }, 
        {
            "location": "/reference/measure_writing_guide/#info-runnerregisterinfo", 
            "text": "Info messages just that, informative in nature. Generally used for passing status or non-failure events to the user, info messages do not cause the measure to fail or stop running. In the \"Add Continuous Insulation to Walls\" measure example, a successful application of the measure would affect a number of surfaces in the model; the number of surfaces affected could be communicated to the user via an info message.   runner.registerInfo( Added insulation to #{num_surfaces} surfaces. )", 
            "title": "Info (runner.registerInfo)"
        }, 
        {
            "location": "/reference/measure_writing_guide/#warning-runnerregisterwarning", 
            "text": "Warning messages should inform the user about something that may be critical to the assumptions or that significantly affects how the measure runs. Warning messages do not cause the measure to stop running. e.g., to warn the user of an out of bounds insulation thickness (e.g.   12) in our example measure:  if insul_thckns   12\n  runner.registerWarning( Insulation thickness (#{insul_thckns}) beyond normal range. \nend", 
            "title": "Warning (runner.registerWarning)"
        }, 
        {
            "location": "/reference/measure_writing_guide/#error-runnerregistererror", 
            "text": "Error messages are used when the measure issued a faulty instruction or otherwise cannot continue. Error messages stop the measure from running, and should inform the user of what caused the error condition. For example, if we assume that  v1  is a fractional value:  if !glass_type\n  runner.registerError( Glazing Type not selected, cannot continue. )\n  return false\nend  Beyond the standard info, warning, and error messages, three other measure-specific log messages may be issued:  the  initial condition , the  final condition , and whether the measure was applicable to this particular model ( NotAplicable ).", 
            "title": "Error (runner.registerError)"
        }, 
        {
            "location": "/reference/measure_writing_guide/#initial-condition-runnerregisterinitialcondition", 
            "text": "The initial condition gives the user a \"before\" snapshot of the model with respect to what the measure will change.  runner.registerInitialCondition( Input model had #{num_flrs} floors )", 
            "title": "Initial Condition (runner.registerInitialCondition)"
        }, 
        {
            "location": "/reference/measure_writing_guide/#final-condition-runnerregisterfinalcondition", 
            "text": "The final condition gives the user an \"after\" snapshot of the model with respect to what the measure changed. Reporting the final condition is optional, but is good practice.   Reporting the initial and final conditions is optional, but is recommended practice. These messages together can be used in reporting measures to explain the specific changes the a measure made to a model.  runner.registerFinalCondition( Model currently has #{num_flrs} floors )", 
            "title": "Final Condition (runner.registerFinalCondition)"
        }, 
        {
            "location": "/reference/measure_writing_guide/#not-applicable-runnerregisterasnotapplicable", 
            "text": "Not all measures are applicable to all models. For example, a measure called \"Replace all windows with triple-paned windows\" would not be applicable to a building with no windows. This log message simply allows the measure author to register the fact that a measure ran successfully, but made no changes to the model.  runner.registerAsNotApplicable( Measure not applicable because [logic!] )\nreturn true", 
            "title": "Not Applicable (runner.registerAsNotApplicable)"
        }, 
        {
            "location": "/reference/measure_writing_guide/#extended-log-message-example", 
            "text": "This example shows how the initial condition, final condition, and applicability messages can be used.  def run(model, runner, user_arguments)\n  super(model,runner,user_arguments)\n  spaces = model.getSpaces\n\n  num_spcs_with_tz = 0\n  num_spcs_no_tz = 0\n  num_tzs_created = 0\n\n  spaces.each do |space|\n    if space.thermalZone.empty?\n      num_spcs_no_tz += 1\n      new_thermal_zone = OpenStudio::Model::ThermalZone.new(model)\n      num_tzs_created += 1\n      space.setThermalZone(new_thermal_zone)\n      runner.registerInfo( Space #{space.name} didn't have a thermal zone,\n                          so a new thermal zone was created and assigned. )\n    else\n      num_spcs_with_tz += 1\n    end\n  end\n\n  runner.registerInitialCondition( The model had #{num_spcs_with_tz}\n                                  spaces with a thermal zone and\n                                 #{num_spcs_no_tz} without a thermal zone )\n\n  runner.registerFinalCondition( #{num_tzs_created} thermal zones were\n                                 created. All spaces now have a thermal\n                                 zone )\n\n  if num_tzs_created == 0\n    runner.registerAsNotApplicable( Not applicable because all spaces\n                                    already had thermal zones )\n  end\n\n  return true\nend", 
            "title": "Extended Log Message Example"
        }, 
        {
            "location": "/reference/measure_writing_guide/#input-validation", 
            "text": "Measure authors are engouraged to perform some degree of validation of the user arguments, and the OpenStudio API includes methods for this. Every required argument must have a value, and be of the right type. This is easily accomplished via the validateUserArguments() method:  if not runner.validateUserArguments(arguments(model), user_arguments)\n  return false\nend  For additional robustness, authors may ensure that values make sense in the context of the script (e.g., '-2' is not a valid number of chillers in a building). The first step in this type of input validation is to pull the values from the \"user_arguments\" variable and assign them to variables in the run method. Best practice is to use the same variable names in the arguments method and the run method:  v1 = runner.getDoubleArgumentValue('v1',user_arguments)\nv2 = runner.getIntegerArgumentValue('v2',user_arguments)\nv3 = runner.getBoolArgumentValue('v3',user_arguments)\nv4 = runner.getStringArgumentValue('v4',user_arguments)\nv5 = runner.getStringArgumentValue('v5',user_arguments)\nv6 = runner.getOptionalWorkspaceObjectChoiceValue('v6',user_arguments, model)  Upon assignment to variables, the author may apply logical tests to each user argument for validity. For example, we assume that  v1  is a fractional value, and must be between 0 and 1. The following example will test the variable for validity; the measure will exit and inform the user if the test fails:  if v1   0 or v1   1\n  runner.registerError( Fractional input 'v1' is #{v1}; must be between 0 and 1 inclusive. )\n  return false\nend  Input validation can be as simple or as detailed as required, or as defined by the measure author. The goal is to increase the utility, accuracy, and user-friendliness of the measure.", 
            "title": "Input Validation"
        }, 
        {
            "location": "/reference/measure_writing_guide/#measure-writing", 
            "text": "This section provides a few examples of partial and complete measures, and pointers on where to find details on OpenStudio objects and methods -- the building blocks of Measures -- so that you can begin writing your own. The run() and super() methods are now familiar, as are the user arguments and validation thereof. The examples here are the \"main\" elements of a typical measure.", 
            "title": "Measure Writing"
        }, 
        {
            "location": "/reference/measure_writing_guide/#example-check-spaces-for-thermal-zone-assignment", 
            "text": "This first example is essentially a  validation , or  quality assurance/quality control  (QAQC) measure; the measure validates the model input and takes corrective action if needed.", 
            "title": "Example: Check Spaces for Thermal Zone Assignment"
        }, 
        {
            "location": "/reference/measure_writing_guide/#the-task", 
            "text": "\"Loop through all the spaces in the model and check whether each space is assigned to a thermal zone (a required input). If a space is not assigned to a thermal zone, create a new one, and assign to the space.\"  def run(model, runner, user_arguments)\n  super(model,runner,user_arguments)\n  spaces = model.getSpaces\n\n  spaces.each do |space|\n    if space.thermalZone.empty?\n      new_thermal_zone = OpenStudio::Model::ThermalZone.new(model)\n      space.setThermalZone(new_thermal_zone)\n      runner.registerInfo( Space #{space.name} did not have a thermal zone; \n      a new thermal zone was created and assigned. )\n    end\n  end\nend  While not intended as a Ruby programming tutorial, let's break down the preceding code snippet, as it uses some fundamental elements of the OpenStudio API:  spaces = model.getSpaces  retrieves all the spaces in the model, and stores them in an array called  spaces . Measure authors can use this syntax to retrieve a vector of many objects from a model (e.g.,  .getThermalZones ,  .getSpaces , etc.).   The next line starts an iterator on spaces. Within this loop, the next command checks to see if the space has a thermal zone assigned ( .thermalZone.empty? ). If there is no thermal zone assigned, a new one is created ( new_thermal_zone = OpenStudio::Model::ThermalZone.new(model) ), and assigned ( space.setThermalZone(new_thermal_zone) ).", 
            "title": "The Task"
        }, 
        {
            "location": "/reference/measure_writing_guide/#openstudio-measures-and-the-boostoptional-type", 
            "text": "OpenStudio leverages the  Boost libraries  quite a bit, making repeated use of the  boost::optional  type. In Ruby, this type requires a slightly different approach to accessing object classes and their methods than typical. In short, calling  .get  on an  empty   boost::optional  object will cause the program to crash, so one must make a precautionary inspection of several objects (the OpenStudio  Space  is but one) prior to attempting to use their methods.   In the online  documentation  for the  Space  class, the method  .thermalZone  is defined as:  boost::optional  ThermalZone   thermalZone () const  Calling  space.thermalZone  returns a  boost::optional  ThermalZone   not a  ThermalZone . To determine whether the  optional  points to an  actual   ThermalZone  you must use the  .empty?  method. If the result is empty, it does not point to an actual \"ThermalZone\" and cannot be used.   If the example:  if space.thermalZone.empty?  evaluates \"true\", the space has no thermal zone. Again, calling  .get  on this empty object  would crash a measure . Conversely, if  if \"space.thermalZone.empty?  were false, then the program could leverage all the object's methods:  if not space.thermalZone.empty?\n  thermal_zone = space.thermalZone.get\nend  The OpenStudio API has many places where optional results are returned. The API documentation can be very helpful for determining the type of result a given method returns. Several methods in OpenStudio return a \"ModelObject\" (\".clone\", \".optionalWorkspaceObjectChoiceValue\", etc.). This is fine for many purposes; however, if you want to test if the object returned is of a particular type (e.g., is it a Space or a SpaceType), you will have to try converting the object to those types using the \".to_#{ClassName}\"  (\".to_Space\", \".to_SpaceType\", etc). Those methods will return an optional result, which will be empty if the conversion failed and will contain the value if it succeeded. If the conversion was successful, you can use all the methods of that type on the result.  new_object = old_object.clone(model)\nif not new_object.to_LightsDefinition.empty?\n  #what you cloned was a LightsDefinition\n  new_light_def = new_object.to_LightsDefinition.get\nelse\n  #what you cloned was not a LightsDefinition\nend", 
            "title": "OpenStudio Measures and the boost::optional Type"
        }, 
        {
            "location": "/reference/measure_writing_guide/#example-update-lighting-power-density", 
            "text": "This next example illustrates the process of going from an idea for a measure through writing the measure, leveraging the OpenStudio API to accomplish the goal.", 
            "title": "Example: Update Lighting Power Density"
        }, 
        {
            "location": "/reference/measure_writing_guide/#the-task_1", 
            "text": "\"Write a measure that will remove all lights objects currently in the \"Enclosed Office\" space type and replace them with new lights objects that have a lighting power density (LPD) of 10 W/m2.\"", 
            "title": "The Task"
        }, 
        {
            "location": "/reference/measure_writing_guide/#figuring-out-the-modeling-approach", 
            "text": "The first thing to do is understand how the measure would be modeled in OpenStudio, and make a list of the objects involved. The easiest way to do this is to open the OpenStudio Application and look through the GUI. In this case, we'll start on the \"Space Types\" tab.   On this tab, first click on the first object (in the left column) is \"Space Type.\"  Inside the Space Type, next to the lights icon, the term \"Definition\" appears. The name of this particular definition is \"ASHRAE_90.1-2004_Office_LPD.\"  To learn more about this definition, go to the \"Loads\" tab.   On the left side under the \"Loads\" tab is a category called \"Lights Definitions.\"  Under this category is the definition \"ASHRAE_90.1-2004_Office_LPD\" that was referenced on the \"Space Types\" tab. One field is titled \"Energy Per Space Floor Area\" with units of \"W/ft2.\"  Although the GUIs may show IP units, the methods of the OpenStudio model are all written in SI units.", 
            "title": "Figuring Out the Modeling Approach"
        }, 
        {
            "location": "/reference/measure_writing_guide/#the-task-in-openstudio-terms", 
            "text": "\"Find the  SpaceType  called \" Enclosed Office \". Replace any  LightsDefinitions  referenced by  Lights  in this  SpaceType  with a new  LightsDefinition , where \"Energy Per Space Floor Area\" = 10 W/m2. \"", 
            "title": "The Task, in OpenStudio Terms"
        }, 
        {
            "location": "/reference/measure_writing_guide/#finding-the-openstudio-methods-using-the-documentation", 
            "text": "For this example and all your measure writing work, the  OpenStudio API documentation  is the principal resource.   Click on the  model  link to explore.   This will take you to the OpenStudio Model Overview page.   Select the \"Objects/Objects List\" to find more information on individual model objects.  Clicking \" SpaceType \" takes you to the class reference for that object:   This is the documentation for the SpaceType class. The methods are generally split into four categories: Constructors and Destructors, Getters, Setters, and Other. SpaceType is a base class of ResourceObject. You can look into the ResourceObject for additional methods beyond what is in the SpaceType documentation.", 
            "title": "Finding the OpenStudio Methods: Using the Documentation"
        }, 
        {
            "location": "/reference/measure_writing_guide/#understanding-the-methods", 
            "text": "At first glance, the methods look cryptic, not at all like those shown in the examples, because this is the C++ documentation and the methods used are the Ruby translation of these same methods. These methods can be decoded as follows:  The name of the method:   The method names are generally descriptive enough that it is possible to understand what they do without any other information. Here is how the method would be used in Ruby:  design_spec_oa = space_type.designSpecificationOutdoorAir  The type of object returned by the method:   Method Return Types:  bool = true/false  double = a number  std::string = text  void = does not return anything  std::vector  = vector of the type objects inside the carets ( )  boost::optional  = an \"optional\"; may either be empty or point to an actual object of the type inside the     The written description of the method:   The inputs needed by the method:", 
            "title": "Understanding the Methods"
        }, 
        {
            "location": "/reference/measure_writing_guide/#using-the-documentation-for-the-example-measure", 
            "text": "With an understanding of how to read the documentation, the example measure continues.  The first step is to find the SpaceType named \"Enclosed Office\". Looping through all the spaces in the model, we can use the  .name  method to get the name of each space. Note that while  .name  returns an  OptionalString , OpenStudio assigns names to all model objects, so there is no need to check if the name is empty before using it (a rare exception to the rule of testing all Optional types for  !empty ). Using the  .match  method, we test if the SpaceType's name matches the value we are looking for:  space_types = model.getSpaceTypes\nspace_types.each do |space_type|\n  if space_type.name.get.match( Enclosed Office )\n    #do something\n  end\nend  Once found, we need to get all the  Lights  in  Spaces  of this  SpaceType . The documentation for SpaceType includes a method to get a vector of all Lights in Spaces of this SpaceType:   Now, loop over all these Lights:  space_types = model.getSpaceTypes\nspace_types.each do |space_type|\n  if space_type.name.get.match( Enclosed Office )\n    space_type.lights.each do |light|\n      #do something\n    end\n  end\nend  We need to make a new LightsDefinition to replace the ones these Lights currently use. The documentation for LightsDefinition shows a constructor that expects a Model as the input:   Constructors translated from C++ to Ruby generally take the following form; the only difference may be which arguments the constructor requires (usually it is simply a  model ).  new_thing = OpenStudio::Model::NewThingClassName.new(model)  Next, we need to set the LPD of the LightsDefinition to 10 W/m2. The LightsDefinition documentation presents a method for this:   Name the new LightsDefinition object, following best practices. Most OpenStudio objects have a  .setName(new_name)  method, and the Lights object is no exception:  new_lights_def = OpenStudio::Model::LightsDefinition.new(model)\nnew_lights_def.setWattsperSpaceFloorArea(10.0)\nnew_lights_def.setName( 10 W/m^2 Lights Definition )  Now that we have a new LightsDefinition object, we must replace the existing LightsDefinition with the new one. The Lights documentation contains a method to set the lights definition:   Putting this all together, we get:  new_lights_def = OpenStudio::Model::LightsDefinition.new(model)\nnew_lights_def.setWattsperSpaceFloorArea(10.0)\nnew_lights_def.setName( 10 W/m^2 Lights Definition )\n\nspace_types = model.getSpaceTypes\nspace_types.each do |space_type|\n  if space_type.name.match( Enclosed Office )\n    lights = space_type.lights\n    lights.each do |light|\n      light.setLightsDefinition(new_lights_def)\n    end\n  end\nend", 
            "title": "Using the Documentation for the Example Measure"
        }, 
        {
            "location": "/reference/measure_writing_guide/#full-example", 
            "text": "The following example is a complete measure.rb file, including all the pieces described previously. We include comments (text preceded by '#'), following Ruby best practices.  #start the measure\nclass ReplaceLightsInSpaceTypeWithLPD   OpenStudio::Ruleset::ModelUserScript\n\n  #define the name that a user will see\n  def name\n    return  Replace All Lights in a Given Space Type with a New LPD \n  end\n\n  #define the arguments that the user will input\n  def arguments(model)\n    args = OpenStudio::Ruleset::OSArgumentVector.new\n\n    #make an argument for space type name\n    stn = OpenStudio::Ruleset::OSArgument::makeStringArgument('stn',true)\n    stn.setDisplayName('Space Type Name')\n    args   stn\n\n    #make an argument for LPD\n    lpd = OpenStudio::Ruleset::OSArgument::makeDoubleArgument('lpd',true)\n    lpd.setDisplayName('Lighting Power Density (W/m^2)')\n    lpd.setDefaultValue(1.0)\n    args   lpd\n\n    return args\n  end #end the arguments method\n\n  #define what happens when the measure is run\n  def run(model, runner, user_arguments)\n    super(model, runner, user_arguments)\n\n    #use the built-in error checking\n    if not runner.validateUserArguments(arguments(model), user_arguments)\n      return false\n    end\n\n    #assign the user inputs to variables\n    stn = runner.getStringArgumentValue('stn',user_arguments)\n    lpd = runner.getDoubleArgumentValue('lpd',user_arguments)\n\n   #check the LPD for reasonableness\n    if lpd   0 or lpd   100 #error on impossible values\n      runner.registerError( Lighting Power Density (W/m^2) must be\n                              greater than 0 and less than 100.\n                              You entered #{lpd}. )\n      return false\n    elsif lpd   50 #warning on unrealistic but possible values\n      runner.registerWarning( A Lighting Power Density of #{lpd} W/m^2\n                              seems a little high.  Measure will continue,\n                              but double-check this isn't a typo. )\n    end\n\n    #create a variable and array for tracking changes to model\n    num_spctyp_changed = 0\n    spctyp_ch_log = []\n\n    #make changes to the model\n    #loop through all space types in the model\n    model.getSpaceTypes.each do |space_type|\n      if space_type.name.get.match( #{stn} )\n        num_spctyp_changed += 1 #log change\n        runner.registerInfo( Space Type called #{space_type.name} matches\n                            #{stn}. )\n        #loop through all lights in the space type\n        space_type.lights.each do |light|\n          #get the old lpd from the existing lights definition, if exists\n          old_lpd =  not per-area \n          if not light.lightsDefinition.wattsperSpaceFloorArea.empty?\n            old_lpd = light.lightsDefinition.wattsperSpaceFloorArea.get\n          end\n          #add the old and new condition to the change log\n          spctyp_ch_log   [space_type.name, old_lpd]\n          #make a new lights definition\n          new_lights_def = OpenStudio::Model::LightsDefinition.new(model)\n          new_lights_def.setWattsperSpaceFloorArea(lpd)\n          new_lights_def.setName( #{lpd} W/m^2 Lights Definition )\n          #replace the old lights def with the new lights def\n          light.setLightsDefinition(new_lights_def)\n        end\n      end\n    end\n\n    #report out the initial and final condition to the user\n    initial_condition =  \n    initial_condition    There are #{num_spctyp_changed} space types\n                                    that match the name #{stn}.   \n    final_condition =  \n    spctyp_ch_log.each do |ch|\n      initial_condition    Space type #{ch[0]} had an lpd of #{ch[1]}\n                            W/m^2.  \n      final_condition    space type #{ch[0]},  \n    end\n    final_condition    were all set to an lpd of #{lpd} W/m^2 \n    runner.registerInitialCondition(initial_condition)\n    runner.registerFinalCondition(final_condition)\n\n    #report if the measure was Not Applicable\n    if num_spctyp_changed == 0\n      runner.registerAsNotApplicable( Not Applicable -\n                                      No space types matched #{stn}. )\n    end\n\n    return true\n  end #end the run method\n\nend #end the measure\n\n#boilerplate that allows the measure to be use by the application\nReplaceLightsInSpaceTypeWithLPD.new.registerWithApplication", 
            "title": "Full Example"
        }, 
        {
            "location": "/reference/measure_writing_guide/#measure-metadata-file-measurexml", 
            "text": "The  measure.xml  file contains metadata that allow the measure to be filed into an organizational structure, provide an explanation about what the measure does and how it works, and inform the GUI where in the workflow the measure can go. The GUI creates a new measure.xml file when you click on the \"Create a New Measure\" button. In general, you should not need to make any changes to the measure.xml file manually. The OpenStudio Application and PAT detect any changes that are made to measures in your \"My Measures\" directory when you press the \"Sync Project Measures with Library\" button. Changes to the name, description, modeler description or any other measure properties will be updated in the measure and the measure will be given a new version identifier. However, there are a few limited cases when you will need to modify the measure.xml file by hand. These cases are 1) changing the measure's author information (i.e. provenance), 2) changing the tags which determine where the measure is listed in the BCL measure taxonomy, 3) changing attributes which are used when searching for the measure on the BCL. To make changes to any of these items you will have to edit the appropriate section (described below) in the measure.xml file by hand, then press the \"Sync Project Measures with Library\" button in either the OpenStudio Application or PAT to assign a new version identifier. NOTE : This process of creating and updating the  measure.xml  file will change for PAT 2.0, and the advent of the OpenStudio Command Line Interface (CLI).", 
            "title": "Measure Metadata File - measure.xml"
        }, 
        {
            "location": "/reference/measure_writing_guide/#provenance", 
            "text": "The Provenance section describes who wrote the measure and when. As author, you may identify yourself however you desire; current convention is to use first initial of first name, followed by full last name (e.g., jdoe). You may name multiple authors. The time format follows  ISO Standard 8601 .  provenances \n   provenance \n     author aparker /author \n     datetime 2013-01-28T15:00:00Z /datetime \n   /provenance \n   provenance_required true /provenance_required  /provenances", 
            "title": "Provenance"
        }, 
        {
            "location": "/reference/measure_writing_guide/#tags", 
            "text": "The Tags section describes where the measure lives in the BCL Measure taxonomy. This taxonomy is used to indicate where in the GUI the measure should be displayed. If the Tags section is blank, the measure will not show up in the GUI. The BCL Measures Taxonomy is available  here .", 
            "title": "Tags"
        }, 
        {
            "location": "/reference/measure_writing_guide/#attributes", 
            "text": "The Attributes section provides additional metadata that allow the GUI to display the measure in the correct place in the workflow and show only measures that can be used by a particular tool. There are currently two attributes used for the latter: \"Intended Software Tool\", and \"Intended Use Case\". These attributes are populated when a new measure is created; if you must change these after the measure has been created you must edit the measure.xml file manually. Other attributes may be added but are not currently used by OpenStudio applications.", 
            "title": "Attributes"
        }, 
        {
            "location": "/reference/measure_writing_guide/#intended-software-tool-deprecated", 
            "text": "The Intended Software Tool attribute lists the tools that this measure is intended to be used by. Software tools may choose to only display measures which list them as an intended software tool. A measure may indicate more than one tool as intended software tool. The list of software tools used by OpenStudio is:   Apply Measure Now - measures intended to be run directly on the currently open model in the OpenStudio Application. Only Model measures may be used with the \"Apply Measure Now\" feature.  OpenStudio Application - measures intended to be run as part of the simulation workflow with the OpenStudio Application.  Parametric Analysis Tool - measures intended to be run as part of the simulation workflow in PAT.  Analysis Spreadsheet - measures intended to be run using the OpenStudio Analysis Spreadsheet.   Intended Software Tool has been deprecated; it will be removed from the schema for PAT 2.0", 
            "title": "Intended Software Tool (deprecated)"
        }, 
        {
            "location": "/reference/measure_writing_guide/#intended-use-case", 
            "text": "The Intended Use Case attribute describes the typical use case(s) for this measure. Software tools may choose to only display measures which apply to their intended use case. A measure can list more than one intended use case. The list of use cases used by OpenStudio is:     Model Articulation - measures which create building modeling content. Examples include a building geometry footprint generator or a measure that adds an HVAC system to a model which does not have one.  Calibration - measures which alter an existing model for the purposes of calibration. Examples include measures which fine tune infiltration levels or adjust existing lighting power to account for uncertainty in operational schedules.  Sensitivity Analysis - measures which alter an existing model to determine what parameters are most sensitive. Examples include a measure which makes all walls adiabatic or a measure which removes all lights from the building.  New Construction EE - measures which are appropriate energy conservation measures for new construction applications. Examples include increased framing depth or reduced window to wall ratio.  Retrofit EE - measures which are appropriate energy conservation measures for retrofit applications. Examples include replacing incandescent light fixtures with high efficiency T-8s or adding occupancy sensors to uncommonly used spaces.  Automatic Report Generation - measures which report human or machine readable content. Examples include a report showing total floor area per space type or a report which plots energy use as a function of outdoor temperature.   Example xml:  attributes \n   attribute \n     name Intended Use Case /name \n     value Model Articulation /value \n     datatype string /datatype \n   /attribute \n   attribute \n     name Intended Use Case /name \n     value New Construction EE /value \n     datatype string /datatype \n   /attribute  /attributes", 
            "title": "Intended Use Case"
        }, 
        {
            "location": "/reference/measure_writing_guide/#measure-testing", 
            "text": "As the measure writing community has grown, and the Building Component Library is open to all measure writers (and consumers), we believe  testing  should be an integral element of the measure authoring process. A continuous integration (CI) system for the OpenStudio Measures on the BCL is in development, and we are now recommending all measures submitted to the BCL include a series of functional and unit tests, for integration with the CI system.   Software testing is a means to code quality assurance and output validation, and allow the author to test their work:   against various versions of Ruby  against various versions of OpenStudio  using combinations of argument values  against a variety of permutations of input models  for general runtime errors  for valid IDF output (may even run EnergyPlus to confirm)  for reporting measure output quality", 
            "title": "Measure Testing"
        }, 
        {
            "location": "/reference/measure_writing_guide/#measure-test-components", 
            "text": "The following sections discuss the elements of a typical measure test file.", 
            "title": "Measure Test Components"
        }, 
        {
            "location": "/reference/measure_writing_guide/#require-statements", 
            "text": "The default test that is automatically created when you make a new measure will contain the Ruby Classes and Modules necessary for all measures to function (you may include others here, that your code requires):   require 'openstudio'\nrequire 'openstudio/ruleset/ShowRunnerOutput'\nrequire 'minitest/autorun'\nrequire_relative '../measure.rb'\nrequire 'fileutils'", 
            "title": "Require statements"
        }, 
        {
            "location": "/reference/measure_writing_guide/#class-minitestunittestcase", 
            "text": "The test class name shall take the form \"[YourMeasureName]Test\". All of measure test code excluding the require statements will be contained within this class. Following this guidance, a test class for a measure named \"My Measure\" would be initialized:  class MyMeasureTest   MiniTest::Unit::TestCase", 
            "title": "Class - MiniTest::Unit::TestCase"
        }, 
        {
            "location": "/reference/measure_writing_guide/#setup-and-teardown", 
            "text": "The Setup and Teardown methods are inherent to the Ruby unit test framework, and we include the empty, disabled (commented-out) definitions in all auto-generated measure tests:    # def setup\n  # end\n\n  # def teardown\n  # end  These methods are useful for reliably creating an environment suitable for the ensuing test (e.g. setting paths; creating environment variables, data), and for restoring the system to its initial state. For additional details on the setup and teardown methods refer to the  MiniTest documentation , and refer to the example setup and teardown methods from an actual OpenStudio measure, below:    # create test files if they do not exist\n  def setup\n\n    if File.exist?(reportPath())\n      FileUtils.rm(reportPath())\n    end\n\n    assert(File.exist?(modelPath()))\n    assert(File.exist?(runDir()))\n\n    if not File.exist?(sqlPath())\n      puts  Running EnergyPlus \n\n      co = OpenStudio::Runmanager::ConfigOptions.new(true)\n      co.findTools(false, true, false, true)\n\n      wf = OpenStudio::Runmanager::Workflow.new( modeltoidf- energypluspreprocess- energyplus )\n      wf.add(co.getTools())\n      job = wf.create(OpenStudio::Path.new(runDir()), OpenStudio::Path.new(modelPath()))\n\n      rm = OpenStudio::Runmanager::RunManager.new\n      rm.enqueue(job, true)\n      rm.waitForFinished\n    end\n  end\n\n  # delete output files\n  def teardown\n\n    # comment this out if you don't want to rerun EnergyPlus each time\n    if File.exist?(sqlPath())\n      #FileUtils.rm(sqlPath())\n    end\n\n    # comment this out if you want to see the resulting report\n    if File.exist?(reportPath())\n      #FileUtils.rm(reportPath())\n    end\n  end", 
            "title": "Setup and Teardown"
        }, 
        {
            "location": "/reference/measure_writing_guide/#test-definitions", 
            "text": "You may have as many individual tests in your test file as needed to ensure the quality of your work:    def test_my_measure_good_argument_values_test", 
            "title": "Test Definition(s)"
        }, 
        {
            "location": "/reference/measure_writing_guide/#example-tests", 
            "text": "Test the number and name(s) of measure arguments  Test for incorrect or invalid argument values; the measure should fail gracefully with a meaningful error message to the user.  Test a modeling result, e.g. source energy use, to remain within a specific range.", 
            "title": "Example Tests"
        }, 
        {
            "location": "/reference/measure_writing_guide/#create-measure-instance-and-runner", 
            "text": "This will look pretty much the same for all measures and tests. The main change will be updating the class of the measure. Refer to the measure.rb that goes with the test to confirm it is correct.      # create an instance of the measure\n    measure = MyMeasure.new\n\n    # create an instance of a runner\n    runner = OpenStudio::Ruleset::OSRunner.new", 
            "title": "Create Measure Instance and Runner"
        }, 
        {
            "location": "/reference/measure_writing_guide/#model-and-workspace-creation-loading", 
            "text": "Every measure needs a  model  or  workspace  (and results, in the case of a reporting measure) upon which to (inter)act. Measures can create source OSMs (and IDFs), or load existing ones.   Create New Model \nThe OpenStudio Model Class provides a method ( .new )to create an empty model (.OSM):      # make an empty model\n    model = OpenStudio::Model::Model.new  Load Existing Model \nThe code below shows how to load an existing model. This is useful when the author wishes to test some specific model objects or configuration; a pre-existing model may be included in the resources of a given test. Note in this example, we use  assert  to test if the model exists (i.e., the  load  was successful), prior to using the  get  method on it.       # load the test model\n    translator = OpenStudio::OSVersion::VersionTranslator.new\n    path = OpenStudio::Path.new(File.dirname(__FILE__) +  /my_test_model_test_input.osm )\n    model = translator.loadModel(path)\n    assert((not model.empty?))\n    model = model.get  Create New Workspace, Blank IDF        # make an empty workspace\n    workspace = OpenStudio::Workspace.new( Draft .to_StrictnessLevel,  EnergyPlus .to_IddFileType)  Load Existing IDF      # load an IDF\n    path = OpenStudio::Path.new(File.dirname(__FILE__) +  /my_test_input.idf )\n    workspace = OpenStudio::Workspace.load(path)\n    assert((not workspace.empty?))\n    workspace = workspace.get  Load IDF from OSM \ni.e., load an OSM and forward translate it to IDF:      # load the test model\n    translator = OpenStudio::OSVersion::VersionTranslator.new\n    path = OpenStudio::Path.new(File.dirname(__FILE__) +  /my_test_model_test_input.osm )\n    model = translator.loadModel(path)\n    assert((not model.empty?))\n    model = model.get\n\n    # forward translate OSM file to IDF file\n    ft = OpenStudio::EnergyPlus::ForwardTranslator.new\n    workspace = ft.translateModel(model)  To see what is loaded for reporting measure, refer to the code template that comes with a new reporting measure.", 
            "title": "Model and Workspace Creation, Loading"
        }, 
        {
            "location": "/reference/measure_writing_guide/#testing-argument-values", 
            "text": "A fairly common test topic is the measure's arguments, as previously mentioned. Here we demonstrate how to accomplish this. We need to \"get\" the measure arguments, and then apply logical tests to them for validity.  Get the arguments:      # get arguments\n    arguments = measure.arguments(model)\n    argument_map = OpenStudio::Ruleset.convertOSArgumentVectorToMap(arguments)  Note:  In the case of a model measure, we pass  model  to the  .arguments  method; for an EnergyPlus measure we pass in the  workspace . The reporting measure does not require an argument here.  Let us test (assert) for the expected number of arguments (one (1) in this example), and the argument name at a specific index location:      assert_equal(1, arguments.size)\n    assert_equal( space_name , arguments[0].name)  Measure tests will often need to supply user argument values. Indeed, certain tests will specifically be testing for good and/or bad input, as mentioned. Here, we create a hash and populate it with the user arguments and their values:      # create hash of argument values\n    args_hash = {}\n    args_hash[ space_name ] =  New Space \n    args_hash[ some_integer_we_need ] = 10\n    args_hash[ some_double_we_need ] = 10.0\n    args_hash[ a_bool_argument ] = true  After the hash has been created, then loop through the arguments to apply the hash values to the arguments. Typically the size of the hash will match the size of the arguments.      # populate argument with specified hash value if specified\n    arguments.each do |arg|\n      temp_arg_var = arg.clone\n      if args_hash[arg.name]\n        assert(temp_arg_var.setValue(args_hash[arg.name]))\n      end\n      argument_map[arg.name] = temp_arg_var\n    end", 
            "title": "Testing Argument Values"
        }, 
        {
            "location": "/reference/measure_writing_guide/#run-the-measure", 
            "text": "Here, we run the OpenStudio measure from the test.  Note:  (For EnergyPlus measures, replace  model  with  workspace ; reporting measures do not require a model argument at all, just  runner  and  argument_map  are passed to the method.)      measure.run(model, runner, argument_map)\n    result = runner.result", 
            "title": "Run the Measure"
        }, 
        {
            "location": "/reference/measure_writing_guide/#show-log-messages", 
            "text": "You may print log messages to the console:   show_output(result)  This will report the same feedback to the console that users in the GUI would see in the OpenStudio application, or PAT. Placing this directive ahead of any  assert s will provide feedback if an assert fails, aiding in assert failure diagnostics (see below).", 
            "title": "Show Log Messages"
        }, 
        {
            "location": "/reference/measure_writing_guide/#assertions", 
            "text": "Assertions  are the primary means for testing with the Ruby unit test class. Below are some example assertions in the context of OpenStudio measures.  At a minimum a measure test suite should a test for result state. Valid options are \"Success\", \"Fail\", or \"NA\":  assert_equal( Success , result.value.valueName)  Authors may test for the expected number of info, or warning messages:  assert(result.info.size == 1)\nassert(result.warnings.size == 0)  Here is a model-specific example that inspects the model to see that it was altered as expected:  # check output model has one added space, where\n# 'num_spaces_seed' equals the initial space count from the input model\nassert_equal(1, model.getSpaces.size - num_spaces_seed)", 
            "title": "Assertions"
        }, 
        {
            "location": "/reference/measure_writing_guide/#saving-output-models", 
            "text": "Saving the measure output model is not required, but can be useful for debugging the measure workflow itself, either during the initial authoring, or later feature expansion of a given measure.   The example below will save the output model in a subdirectory of the test directory tree.  This \"test\" directory should be excluded from version control so that it is not distributed with the measure and tests.  #save the model to test output directory\noutput_file_path = OpenStudio::Path.new(File.dirname(__FILE__) +  /output/my_test_model_test_a_output.osm )\nmodel.save(output_file_path,true)", 
            "title": "Saving Output Models"
        }, 
        {
            "location": "/reference/measure_writing_guide/#putting-it-all-together-a-complete-measure-test-file", 
            "text": "require 'openstudio'\nrequire 'openstudio/ruleset/ShowRunnerOutput'\nrequire 'minitest/autorun'\nrequire_relative '../measure.rb'\nrequire 'fileutils'\n\nclass NewMeasureTest   MiniTest::Unit::TestCase\n\n  # def setup\n  # end\n\n  # def teardown\n  # end\n\n  def test_number_of_arguments_and_argument_names\n    # create an instance of the measure\n    measure = NewMeasure.new\n\n    # make an empty model\n    model = OpenStudio::Model::Model.new\n\n    # get arguments and test that they are what we are expecting\n    arguments = measure.arguments(model)\n    assert_equal(4, arguments.size)\n    assert_equal( space_name , arguments[0].name)\n  end\n\n  def test_bad_argument_values\n    # create an instance of the measure\n    measure = NewMeasure.new\n\n    # create an instance of a runner\n    runner = OpenStudio::Ruleset::OSRunner.new\n\n    # make an empty model\n    model = OpenStudio::Model::Model.new\n\n    # get arguments\n    arguments = measure.arguments(model)\n    argument_map = OpenStudio::Ruleset.convertOSArgumentVectorToMap(arguments)\n\n    # create hash of argument values\n    args_hash = {}\n    args_hash[ space_name ] =  \n    args_hash[ some_integer_we_need ] = 10\n    args_hash[ some_double_we_need ] = 10.0\n    args_hash[ a_bool_argument ] = true\n\n    # populate argument with specified hash value if specified\n    arguments.each do |arg|\n      temp_arg_var = arg.clone\n      if args_hash[arg.name]\n        assert(temp_arg_var.setValue(args_hash[arg.name]))\n      end\n      argument_map[arg.name] = temp_arg_var\n    end\n\n    # run the measure\n    measure.run(model, runner, argument_map)\n    result = runner.result\n\n    # show the output\n    show_output(result)\n\n    # assert that it ran correctly\n    assert_equal( Fail , result.value.valueName)\n  end\n\n  def test_good_argument_values\n    # create an instance of the measure\n    measure = NewMeasure.new\n\n    # create an instance of a runner\n    runner = OpenStudio::Ruleset::OSRunner.new\n\n    # load the test model\n    translator = OpenStudio::OSVersion::VersionTranslator.new\n    path = OpenStudio::Path.new(File.dirname(__FILE__) +  /my_test_model_test_input.osm )\n    model = translator.loadModel(path)\n    assert((not model.empty?))\n    model = model.get\n\n    # store the number of spaces in the seed model\n    num_spaces_seed = model.getSpaces.size\n\n    # get arguments\n    arguments = measure.arguments(model)\n    argument_map = OpenStudio::Ruleset.convertOSArgumentVectorToMap(arguments)\n\n    # create hash of argument values.\n    # If the argument has a default that you want to use, you don't need it in the hash\n    args_hash = {}\n    args_hash[ space_name ] =  New Space \n    # using defaults values from measure.rb for other arguments\n\n    # populate argument with specified hash value if specified\n    arguments.each do |arg|\n      temp_arg_var = arg.clone\n      if args_hash[arg.name]\n        assert(temp_arg_var.setValue(args_hash[arg.name]))\n      end\n      argument_map[arg.name] = temp_arg_var\n    end\n\n    # run the measure\n    measure.run(model, runner, argument_map)\n    result = runner.result\n\n    # show the output\n    show_output(result)\n\n    # assert that it ran correctly\n    assert_equal( Success , result.value.valueName)\n    assert(result.info.size == 1)\n    assert(result.warnings.size == 0)\n\n    # check that there is now 1 space\n    assert_equal(1, model.getSpaces.size - num_spaces_seed)\n\n    # save the model to test output directory\n    output_file_path = OpenStudio::Path.new(File.dirname(__FILE__) +  /output/my_test_model_test_a_output.osm )\n    model.save(output_file_path,true)\n  end\n\nend", 
            "title": "Putting It All Together - A Complete Measure Test File"
        }, 
        {
            "location": "/reference/measure_writing_guide/#running-tests", 
            "text": "", 
            "title": "Running Tests"
        }, 
        {
            "location": "/reference/measure_writing_guide/#system-configuration", 
            "text": "MacOS/Linux \nGenerally speaking, no additional configuration is required for MacOS and Linux operating systems; Ruby is usually already installed, and if OpenStudio is installed, Ruby is configured to locate it.   Windows  \nThe system's Ruby environment variables must be configured to either:   point to the version of ruby that OpenStudio installed, or, if there is another version or ruby installed on the system:  point that version of Ruby to OpenStudio   In either case, typing \"environment variables\" in the Windows Start Menu search field will present options to change the environment variables for your account; follow the screenshots below.   Add the following path to the system PATH variable. Specific path will vary based on OpenStudio version, as 32-bit and 64-bit versions of OpenStudio are also installed to different \"Program Files\" directory roots.  C:\\Program Files\\OpenStudio [version]\\ruby-install\\ruby\\bin  Authors wishing to use an  existing  Ruby installation must add an  openstudio.rb  file in  lib\\ruby\\site_ruby , with a path reference to the preferred of OpenStudio. Ruby 2.0.x is required.  require 'C:\\Program Files\\OpenStudio 1.7.0\\Ruby\\openstudio.rb'", 
            "title": "System Configuration"
        }, 
        {
            "location": "/reference/measure_writing_guide/#test-environments", 
            "text": "", 
            "title": "Test Environments"
        }, 
        {
            "location": "/reference/measure_writing_guide/#command-line-interface-cli", 
            "text": "Simply call Ruby with  [your_test].rb  as the input:  ruby my_measure_test.rb", 
            "title": "Command Line Interface (CLI)"
        }, 
        {
            "location": "/reference/measure_writing_guide/#idetext-editor", 
            "text": "You may wish to execute your tests directly from your programming working environment, be that an Integrated Development Environment (IDE) or the text editor of your choice. By way of example, we include instructions on how to set up the popular Windows text editor  Notepad++  to execute your tests:   Install the NppExec plugin, using the plugin manager within NotePad++:     Return to the Plugins menu, and select \"Execute\"; ensure \"Follow $(CURRENT_DIRECTORY)\" is checked:    After you click \"Execute\" you will see a dialog. If you don't already see the following text in the command window, type it in.  ruby  $(FULL_CURRENT_PATH)   The bottom of the screenshot shows the measure output. We see the log messages, and the number of tests run and assertions. Note that  puts  statements visible here, but they are not visible when the measure is run from the OpenStudio GUIs. Use  runner.Register[Info|Warning|Error]  directives for those, as explained elsewhere.", 
            "title": "IDE/Text Editor"
        }, 
        {
            "location": "/reference/measure_writing_guide/#automated-testing", 
            "text": "NREL is in the process of developing an automated testing and continuous integration (CI) framework for the OpenStudio Measures contained on the BCL, and will include details on how to integrate your own measures with this test framework, here.", 
            "title": "Automated testing"
        }, 
        {
            "location": "/reference/measure_writing_guide/#advanced-topics", 
            "text": "", 
            "title": "Advanced Topics"
        }, 
        {
            "location": "/reference/measure_writing_guide/#energyplus-measures", 
            "text": "Measures typically operate on an OpenStudio model, via the OpenStudio Model API, thus granting measure authors access to the entirety of the OpenStudio Model. However, as the OpenStudio model does not yet include the entirety of the EnergyPlus Data Model, we offer the  EnergyPlus Measure  as a means to access the full EnergyPlus IDD.   EnergyPlus measures give measure authors the ability to continue a programmatic modeling workflow throughout the BEM process, but EnergyPlus measures operate on an IDF; as such, they are intended to be run  after  the OSM has been translated from OpenStudio to EnergyPlus.   Below are some specific code differences between EnergyPlus measures and OpenStudio measures:  Classes must reference  Workspace  versus  Model , as shown in the following examples:", 
            "title": "EnergyPlus Measures"
        }, 
        {
            "location": "/reference/measure_writing_guide/#initialization_1", 
            "text": "class ConstructionTakeOff   OpenStudio::Ruleset::WorkspaceUserScript", 
            "title": "Initialization:"
        }, 
        {
            "location": "/reference/measure_writing_guide/#method-arguments", 
            "text": "def arguments(workspace)  def run(workspace, runner, user_arguments)\n  super(workspace, runner, user_arguments)  The EnergyPlus IDD API is simpler than the OpenStudio Model API; it allows for changing .idf fields directly, getting all objects of a certain type, etc. This functionality is under the utilities project in the classes  Workspace  and  WorkspaceObject .", 
            "title": "Method arguments:"
        }, 
        {
            "location": "/reference/measure_writing_guide/#finding-and-inspecting-energyplus-objects", 
            "text": "The following example shows how to find and loop through EnergyPlus objects. We locate objects in an EnergyPlus Workspace by IDD type (e.g.,  BuildingSurface:Detailed ). These types can be found in the EnergyPlus documentation shown in Section 5.4. The IDF model is not an object model. As a result, instead of requesting a name we access specific fields by index in the IDD (0-based), e.g.  .getString(2) :    # get all surfaces and constructions in model\n  heat_transfer_surfaces = workspace.getObjectsByType( BuildingSurface:Detailed .to_IddObjectType)\n  #the line below won't get other objects such as Construction:InternalSource.\n  constructions = workspace.getObjectsByType( Construction .to_IddObjectType)\n\n  # report initial condition\n  runner.registerInitialCondition( The model has #{constructions.size} construction objects. )\n\n  # array for constructions that are used on a heat transfer surface\n  used_constructions_names = [] #just holds names\n\n  # get names of constructions used in the model\n  heat_transfer_surfaces.each do |heat_transfer_surface|\n    construction = heat_transfer_surface.getString(2).to_s #(0) is name, (1) is Surface Type, etc.\n    used_constructions_names   construction\n  end", 
            "title": "Finding and Inspecting EnergyPlus Objects"
        }, 
        {
            "location": "/reference/measure_writing_guide/#adding-energyplus-workspace-objects", 
            "text": "The following example shows how to insert a new EnergyPlus object into the Workspace. A string is created, using Ruby's string substitution mechanisms to set variable values, and then the string is turned into IdfObject and finally added to the Workspace.    # array to hold new IDF objects\n  string_objects = []\n\n  # create sorted (.sort) list of unique (.uniq) constructions from all \n  # constructions in model, adding ComponentCost:LineItem for each\n\n  used_constructions_names.sort.uniq.each do |used_construction_name|\n\n    #IDF object text for ComponentCost:LineItem\n    string_objects    \n      ComponentCost:LineItem,\n        #{used_construction_name}_TakeOff,    !- Name\n        ,                                     !- Type\n        Construction,                         !- Line Item Type\n        #{used_construction_name},            !- Item Name\n        ,                                     !- Object End Use Key\n        ,                                     !- Cost per Each {$}\n        0.000000000001;                       !- Cost per Area {$/m2}\n         \n  end\n\n  # add all of the strings to workspace to create IDF objects\n  string_objects.each do |string_object|\n    idfObject = OpenStudio::IdfObject::load(string_object)\n    object = idfObject.get\n    wsObject = workspace.addObject(object)\n  end", 
            "title": "Adding EnergyPlus Workspace Objects"
        }, 
        {
            "location": "/reference/measure_writing_guide/#editing-energyplus-workspace-objects", 
            "text": "The following example shows how to access and edit EnergyPlus objects in the Workspace.    # get OutputControl:Table:Style object that was generated in forward translation from OSM to IDF\n  table_style = workspace.getObjectsByType( OutputControl:Table:Style .to_IddObjectType)\n\n  # even though there is just a single object, it is still in an array\n  if not table_style.empty?\n    # we can access the first object in the array using table_style[0]\n    if table_units ==  Inch-Pound \n      #use setString to change the field value to request IP units\n      table_style_ip = table_style[0].setString(1, InchPound )\n    else\n      #will result in SI units in tables\n      table_style_si = table_style[0].setString(1, )\n    end\n  end", 
            "title": "Editing EnergyPlus Workspace Objects"
        }, 
        {
            "location": "/reference/measure_writing_guide/#complete-energyplus-measure-example", 
            "text": "The following script creates a ComponentCost:LineItem object for each construction used in the model.  #start the measure\nclass ConstructionTakeOff   OpenStudio::Ruleset::WorkspaceUserScript\n\n  #define the name that a user will see\n  def name\n    return  Create Envelope Quantity TakeOff \n  end\n\n  #define the arguments that the user will input\n  def arguments(workspace)\n    args = []\n\n    #make an argument for table units\n    chs = OpenStudio::StringVector.new\n    chs    Inch-Pound \n    chs    SI Units \n    table_units = OpenStudio::Ruleset::OSArgument::makeChoiceArgument( table_units ,chs)\n    table_units.setDisplayName( Choose Units for EnergyPlus Output HTML )\n    table_units.setDefaultValue( Inch-Pound )\n    args   table_units\n\n    return args\n  end #end the arguments method\n\n  #define what happens when the measure is run\n  def run(workspace, runner, user_arguments)\n    super(workspace, runner, user_arguments)\n\n    #assign the user inputs to variables\n    table_units = runner.getStringArgumentValue( table_units ,user_arguments)\n\n    #get all surfaces and constructions in model\n    heat_transfer_surfaces = workspace.getObjectsByType( BuildingSurface:Detailed .to_IddObjectType)\n    #the line below won't get other objects such as Construction:InternalSource.\n    constructions = workspace.getObjectsByType( Construction .to_IddObjectType)\n\n    #report initial condition\n    runner.registerInitialCondition( The model has #{constructions.size} construction objects. )\n\n    #array for constructions that are used on a heat transfer surface\n    used_constructions_names = [] #just holds names\n\n    #get names of constructions used in the model\n    heat_transfer_surfaces.each do |heat_transfer_surface|\n      construction = heat_transfer_surface.getString(2).to_s #(0) is name, (1) is Surface Type, etc.\n      used_constructions_names   construction\n    end\n    #report as not applicable if there are no constructions in the model used on surfaces.\n    if used_constructions_names.empty?\n      runner.registerAsNotApplicable( There are not any constructions in the model that are associated with surfaces. )\n    end\n\n    #array to hold new IDF objects\n    string_objects = []\n\n    # create sorted (.sort) list of unique (.uniq) constructions from all \n    # constructions in model, adding ComponentCost:LineItem for each\n\n      #IDF object text for ComponentCost:LineItem\n      string_objects    \n        ComponentCost:LineItem,\n          #{used_construction_name}_TakeOff,    !- Name\n          ,                                     !- Type\n          Construction,                         !- Line Item Type\n          #{used_construction_name},            !- Item Name\n          ,                                     !- Object End Use Key\n          ,                                     !- Cost per Each {$}\n          0.000000000001;                       !- Cost per Area {$/m2}\n           \n    end\n\n    # add all of the strings to workspace to create IDF objects\n    string_objects.each do |string_object|\n      idfObject = OpenStudio::IdfObject::load(string_object)\n      object = idfObject.get\n      wsObject = workspace.addObject(object)\n    end\n\n    # report final condition about objects added to the model\n    runner.registerFinalCondition( ComponentCost:LineItem objects were added for the {used_constructions_names.uniq.size} constructions that are used in the model. )\n\n    # if IP units requested add OutputControl:Table:Style object\n    table_style = workspace.getObjectsByType( OutputControl:Table:Style .to_IddObjectType)\n\n    # even though there is just a single object, it is still in an array\n    if not table_style.empty?\n      # we can access the first object in the array using table_style[0]\n      if table_units ==  Inch-Pound \n        #use setString to change the field value to request IP units\n        table_style_ip = table_style[0].setString(1, InchPound )\n      else\n        #will result in SI units in tables\n        table_style_si = table_style[0].setString(1, )\n      end\n        end\n\n  end #end the run method\n\nend #end the measure\n\n# this allows the measure to be used by the application\nConstructionTakeOff.new.registerWithApplication", 
            "title": "Complete EnergyPlus Measure Example"
        }, 
        {
            "location": "/reference/measure_writing_guide/#energyplus-object-documentation", 
            "text": "The \"InputOutputReference.pdf\" document that ships with EnergyPlus describes every EnergyPlus object. Below is a segment of the documentation for the  ComponentCost:LineItem  object. It describes which fields are required versus optional, and what kinds of data are expected for each field. EnergyPlus also ships with example models that illustrate the proper use of each object in a model. A spreadsheet documenting the examples is located in the  EnergyPlus/examples  directory of your installation.", 
            "title": "EnergyPlus Object Documentation"
        }, 
        {
            "location": "/reference/measure_writing_guide/#reporting-measures", 
            "text": "A  Reporting Measure  is used for reading and reporting on output data from an OpenStudio simulation. This includes Model input as well as EnergyPlus output data. These measures are typically run after the EnergyPlus simulation for obvious reasons. Reporting Measures can extract machine readable attributes for a large automated analysis, and may produce interactive, HTML-based reports that include plots and charts.", 
            "title": "Reporting Measures"
        }, 
        {
            "location": "/reference/measure_writing_guide/#energyplus-output-requests", 
            "text": "A special method, available for reporting measures only, allows reporting measures to request EnergyPlus output variables required by the  run  method. This method accepts the  runner  and  user  arguments, returning a vector of IdfObjects that request the required outputs, these objects will be added to the .idf before simulation. A subset of IdfObject types may be requested by this method, and are listed here:   Output:Surfaces:List  Output:Surfaces:Drawing  Output:Schedules  Output:Constructions  Output:Table:TimeBins  Output:Table:Monthly  Output:Variable  Output:Meter  Output:Meter:MeterFileOnly  Output:Meter:Cumulative  Output:Meter:Cumulative:MeterFileOnly  Meter:Custom  Meter:CustomDecrement  Output:Table:SummaryReports (unique object)   Duplicate requests are ignored; in the case of unique objects, the requests are merged with requests in the existing model:    def energyPlusOutputRequests(runner, user_arguments)\n    super(runner, user_arguments)\n\n    result = OpenStudio::IdfObjectVector.new\n\n    # use the built-in error checking\n    if !runner.validateUserArguments(arguments(), user_arguments)\n      return result\n    end\n\n    result   OpenStudio::IdfObject.load( Output:Variable,,Site Outdoor Air Drybulb Temperature,Timestep; ).get\n    result   OpenStudio::IdfObject.load( Output:Variable,,Site Outdoor Air Humidity Ratio,Timestep; ).get\n    result   OpenStudio::IdfObject.load( Output:Variable,,Site Outdoor Air Relative Humidity,Timestep; ).get\n\n    result   OpenStudio::IdfObject.load( Output:Variable,,Zone Air Temperature,Timestep; ).get\n    result   OpenStudio::IdfObject.load( Output:Variable,,Zone Air Humidity Ratio,Timestep; ).get\n    result   OpenStudio::IdfObject.load( Output:Variable,,Zone Air Relative Humidity,Timestep; ).get\n\n    return result\n  end", 
            "title": "EnergyPlus Output Requests"
        }, 
        {
            "location": "/reference/measure_writing_guide/#reporting-measure-run-method", 
            "text": "As mentioned, Reporting Measures are run after the simulation is complete. However, access to the last model or workspace is very useful for extracting information about the simulation. For this reason, Reporting Measures allow access to a read only copy of the last OpenStudio Model generated in the simulation workflow as well as the last EnergyPlus Workspace simulated by EnergyPlus. Additionally, the EnergyPlus SqlFile containing tabular and timeseries simulation results is available along with the EpwFile (weather file) that was used in the simulation. These objects may be accessed from the  runner  as shown below:    # define what happens when the measure is run\n  def run(runner, user_arguments)\n    super(runner, user_arguments)\n\n    # use the built-in error checking\n    if !runner.validateUserArguments(arguments(), user_arguments)\n      return false\n    end\n\n    model = runner.lastOpenStudioModel\n    if model.empty?\n      runner.registerError( Cannot find last model. )\n      return false\n    end\n    model = model.get\n\n    workspace = runner.lastEnergyPlusWorkspace\n    if workspace.empty?\n      runner.registerError( Cannot find last workspace. )\n      return false\n    end\n    workspace = workspace.get\n\n    sqlFile = runner.lastEnergyPlusSqlFile\n    if sqlFile.empty?\n      runner.registerError( Cannot find last sql file. )\n      return false\n    end\n    sqlFile = sqlFile.get\n\n    epwFile = runner.lastEpwFile\n    if epwFile.empty?\n      runner.registerError( Cannot find last epw file. )\n      return false\n    end\n    epwFile = epwFile.get", 
            "title": "Reporting Measure Run Method"
        }, 
        {
            "location": "/reference/measure_writing_guide/#output-attributes", 
            "text": "We have seen how to send log messages from measures, which are useful for providing general and debugging information to the user in the OpenStudio app, PAT, and at the command line. However, there is also a need to output machine readable attributes that can be used to create reports about design alternatives in parametric studies. These attributes are associated with the measure that generated them in the workflow. The  registerValue  method is used to register these  key-value pairs :  # runner.registerValue(key,value,units)\nrunner.registerValue( total_life_cycle_cost , total_life_cycle_cost,  $ )  The  key  and  units  parameters must be strings; the value passed to registerValue may be a  double ,  bool ,  integer ,  string , or  nil  object. The output attribute key should contain lowercase alphanumeric characters with underscores where you would typically have a space (snake_case). The attribute key should not start with a number. Additionally the following characters shall not be used in output attribute key names:  | ! @ # $ % ^   * ( ) { } \\ [ ] ; : '   ,   .   \\ / ? + =  By default, all measure arguments are automatically output in machine readable format. For example, if a measure takes an argument named 'rotation':  relative_building_rotation = OpenStudio::Ruleset::OSArgument.makeDoubleArgument('rotation', true)  An attribute named 'rotation' will automatically be added to the measure's output, with the value passed in by the user. Measure writers may output any attributes they wish. If a measure outputs multiple attributes with the same name, preceding definitions are clobbered (i.e. the last attribute reported by that name will be preserved). Measure writers are encouraged to use terms that are present in the BCL taxonomy (and the upcoming  DEnCity  API) to allow applications to understand attribute names. Additionally, special modifiers can be added to attribute names which will imply additional relationships between attributes. These special attribute modifiers are documented below, using the  rotation  attribute:  \n   \n     Modifier \n     Example \n     Meaning \n   \n   \n     *_initial  \n     rotation_initial \n     The value of 'rotation' in the initial model before the measure was run. \n   \n   \n     *_final   \n     rotation_final \n     The value of 'rotation' in the final model after the measure was run. \n   \n   \n     \n     \n     This should be reported even if the measure returns false or NA.", 
            "title": "Output Attributes"
        }, 
        {
            "location": "/reference/measure_writing_guide/#measure-internationalization", 
            "text": "This section describes how to use the new measure internationalization features of OpenStudio 2.0.0. The new functionality allows measure developers to build in support for multiple languages and multiple unit systems. Existing measures will continue to work without any  modification. Measure developers who don't want 'internationalized' measures can continue to write them as described in the \"Writing Measures\" section earlier on this page.", 
            "title": "Measure Internationalization"
        }, 
        {
            "location": "/reference/measure_writing_guide/#runner-enhancements", 
            "text": "New Runner methods in OpenStudio 2.0.0 pass a an optional user specified language and an optional user specified unit type into the measure. If an interface using OpenStudio doesn't support this, then 'nil' will be passed in for both methods. Both methods take a string value used by methods in the measure. There should always be a default catchall language and unit system to use if a language or unit system is requested that the measure doesn't handle. For example if the measure is written to support \"English\" and \"French\", but \"Spanish\" is passed in, the measure should still run successfully, but will fall back to English.  Below are examples of these two methods in use.  # returns a string such as  fr \nlanguage_preference = runner.languagePreference\n\n# returns a string such as  SI \nunits_preference = runner.unitsPreference", 
            "title": "Runner Enhancements"
        }, 
        {
            "location": "/reference/measure_writing_guide/#name-description-and-modeler-description-enhancements", 
            "text": "Prior to OpenStudio 2.0 the name, description, and modeler description methods each returned a string. OpenStudio 2.0 adds support for a hash to be returned, where the key defines the language and the value a string. To support the new functionality, the runner is now passed into these methods. The description method is unique in that a modeler can alter it. The language of the altered description won't be tracked.  Below is an example of the name method. The same approach would be followed for description and modeler description.    # human readable name (is this good time to change method to display_name?)\n  def name (runner)\n    display_name_hash = {}\n    display_name_hash[:en] =  Set Insulation Thickness To User Specified Value. \n    display_name_hash[:fr] =  R\u00e9glez l'\u00e9paisseur d'isolation Pour l'utilisateur sp\u00e9cifi\u00e9 Valeur. \n    display_name_hash[:es] =  Establecer el grosor del aislamiento a un valor espec\u00edfico del usuario. \n\n    return display_name_hash\n  end", 
            "title": "Name, Description, and Modeler Description Enhancements"
        }, 
        {
            "location": "/reference/measure_writing_guide/#arguments-method-enhancements", 
            "text": "Methods to set an argument's display name, default, and description have been enhanced to accept the an input for preferred language. Methods to set an argument's default value and units have been enhanced to accept an input for for the preferred unit system. Arguments that don't take a double, integer, or take an argument that is unitless, don't have to address unit preference.  Below is an example arguments method that supports English, French, and Spanish as languages, and SI and IP units.    # define the arguments that the user will input\n  def arguments (model,runner)\n    args = OpenStudio::Ruleset::OSArgumentVector.new\n\n    # get internationalization preferences\n    language_preference = runner.languagePreference\n    units_preference = runner.unitsPreference # not currently used here, does GUI handle this?\n\n    # make an argument\n    insl_thckn = OpenStudio::Ruleset::makeDoubleArgument('insl_thckn',true)\n\n    # set langauge specific argument display name\n    display_name_hash = {}\n    display_name_hash[:en] = 'Insulation Thickness'\n    display_name_hash[:fr] = '\u00c9paisseur d'isolation'\n    display_name_hash[:es] = 'Espesor de aislamiento'\n    # args for setDisplayName (string hash, unit pref from GUI, fallback language)\n    insl_thckn.setDisplayName(display_name_hash,units_preference,'en')\n\n    # set langauge specific argument description\n    display_description_hash = {}\n    display_description_hash[:en] = 'Enter the resulting thickness for the insulation material, not a delta from the starting thickness.'\n    display_description_hash[:fr] = 'Entrer l'\u00e9paisseur r\u00e9sultante du mat\u00e9riau d'isolation et non pas un delta de l'\u00e9paisseur de d\u00e9part.'\n    display_description_hash[:es] = 'Introduzca el espesor resultante para el material de aislamiento , no un delta a partir del espesor de partida.'\n    # args for setDescription (string hash, unit pref from GUI, fallback language)\n    insl_thckn.setDescription(display_description_hash,units_preference,'en')  \n\n    # set units for argument\n    # if units_preference is  IP  then GUI should show 1.5 (in)\n    # if units_preference is  SI  then GUI shoudl show 0.0381 (m)\n    # if GUI is in IP and user types 6 (in) the stored value in OSW will be 0.1524 (m)\n    insl_thckn.setUnits( m )\n    insl_thckn.setUnitsIp( in ) # optional, set if don't want to use default mapping  \n    insl_thckn.setDefaultValue(0.0381) # tied to setUnits, assumed to be SI value\n\n    # add to vector of arguments\n    args   insl_thckn\n\n    return args\n  end # end the arguments method", 
            "title": "Arguments Method Enhancements"
        }, 
        {
            "location": "/reference/measure_writing_guide/#run-method-enhancements", 
            "text": "The value and units for arguments can be retrieved in the run section. Generally units should stay in SI, unless a log message or register value needs IP. In that case, conversion should be done just for the message(s).  Below is an example run method that manipulates and reports values related to a user argument    # define what happens when the measure is run\n  def run(model, runner, user_arguments)\n    super(model, runner, user_arguments)\n\n    # use the built-in error checking\n    if !runner.validateUserArguments(arguments(model), user_arguments)\n      return false\n    end\n\n    # assign the user inputs to variables\n    insl_thckn_si = runner.getDoubleArgumentValue( insl_thckn , user_arguments)\n    insl_thckn_units_si = runner.getDoubleArgumentUnits( insl_thckn , user_arguments) # runner.getDoubleArgumentsUnits isn't currently a valid method\n    insl_thckn_units_ip = runner.getDoubleArgumentUnitsIp( insl_thckn , user_arguments) # runner.getDoubleArgumentsUnitsIp isn't currently a valid method\n\n    # get internationalization preferences\n    language_preference = runner.languagePreference\n    units_preference = runner.unitsPreference # needed here since the measure, not GUI will control log messages\n\n    # change the model (didn't show code where 'some_material' is found in the model)\n    some_material.setThickness(insl_thckn_si)\n\n    # get display value and units for thickness\n    if units_preference ==  SI \n        thickness_value_pref_units = some_material.thickness # if insl_thckn_units_si isn't same as unit for that field still need to convert e.g. OpenStudio::convert(value,'m',cm')\n        thickness_display_units = insl_thckn_units_si\n        num_decimals = 2 # bettter to specify significant digits in message vs unit specific rounding values?\n    else\n        thickness_value_pref_units = OpenStudio::convert(some_material.thickness,insl_thckn_units_si,insl_thckn_units_ip).get\n        thickness_display_units = insl_thckn_units_ip\n        num_decimals = 1\n    end\n\n    # report back the user the thickness from the material\n    case language_preference\n    when 'fr'\n        runner.registerInfo( L'\u00e9paisseur r\u00e9sultante de #{some_material.name} \u00e9tait de #{thickness_value_pref_units.round(num_decimals)} (#{thickness_display_units). )\n    when 'es'\n        runner.registerInfo( El espesor resultante de #{some_material.name} fue #{thickness_value_pref_units.round(num_decimals)} (#{thickness_display_units). )\n    else\n        runner.registerInfo( The Resulting thickness of #{some_material.name} was #{thickness_value_pref_units.round(num_decimals)} (#{thickness_display_units). )\n    end\n\n    # Similar approach as above would be used on initial condition, final condition, warning, error messages. runner.registerValue is a little different\n\n    # register value\n    # note that the first argmuent 'name' doesn't chagne by language, but the second argument 'displayName' does\n    # also note that registerValue isn't rounded like registerInfo and other messages are\n    case language_preference\n    when 'fr'\n        runner.registerValue('some_material_thickness', Essai Epaisseur du mat\u00e9riau ,thickness_value_pref_units,thickness_display_units)   \n    when 'es'\n        runner.registerValue('some_material_thickness', Material de Ensayo Espesor ,thickness_value_pref_units,thickness_display_units)   \n    else\n        runner.registerValue('some_material_thickness', Test Material Thickness ,thickness_value_pref_units,thickness_display_units)   \n    end    \n\n    return true\n  end", 
            "title": "Run Method Enhancements"
        }, 
        {
            "location": "/reference/measure_writing_guide/#additional-references", 
            "text": "OpenStudio Documentation Home  OpenStudio SDK documentation  Ruby Style Guide", 
            "title": "Additional References"
        }, 
        {
            "location": "/reference/measure_code_examples/", 
            "text": "Measure Code Examples\n\n\n\nThis page provides example Ruby code for doing various common tasks. It is intended as a supplement to the full \nOpenStudio SDK documentation\n. The examples are not complete Measures for the sake of clarity.\n\n\nUnit Conversion\n\n\nOpenStudio has a built-in unit conversion method:\n\n\nOpenStudio.convert()\n\n\n\n\nThis method will convert a value from the first unit to the second unit, as specified by two strings. The conversion can be from IP to SI, SI to IP, IP to another IP unit, or SI to another SI unit. Any to-from units that are valid conversions will result in an initialized Optional::Double (see [this] for an explanation of optional doubles).\n\n\n# Convert the value 212 from Fahrenheit to Celsius\nval_in_celsius = OpenStudio.convert(val_in_fahrenheit,\nF\n,\nC\n)\n\n# Check that the conversion worked, then get the value\nif val_in_celsius.is_initialized\n  val_in_celsius = val_in_celsius.get\nend\n\n\n\n\n# Or, if you know the unit conversion is valid, here's the short version\nval_in_celsius = OpenStudio.convert(val_in_fahrenheit,\nF\n,\nC\n).get\n\n\n\n\nYou can use the \n*\n (multiply), \n/\n (divide), and \n^\n (exponent) operators in the unit strings to combine basic units like \n\"ft\"\n and \n\"min\"\n into compound units like \n\"ft^3/min\"\n.\n\n\nAvailable units\n\n\n\n  \n\n    \nUnit Type\n\n    \nIP\n\n    \nSI\n\n  \n\n  \n\n    \nTemperature\n\n    \n\"F\"\n\n    \n\"C\"\n\n  \n\n  \n\n    \nDeltaTemperature\n\n    \n\"R\"\n\n    \n\"K\"\n\n  \n\n  \n\n    \nLength\n\n    \n\"in\", \"ft\", \"mi\"\n\n    \n\"m\"\n\n  \n\n  \n\n    \nPeople\n\n    \n\"person\"\n\n    \n\"person\"\n\n  \n\n  \n\n    \nTime\n\n    \n\"s\", \"min\", \"h\", \"hr\", \"day\"\n\n    \n\"s\", \"min\", \"h\", \"hr\", \"day\"\n\n  \n\n  \n\n    \nMass\n\n    \n\"lb_m\", \"ton\"\n\n    \n\"kg\"\n\n  \n\n  \n\n    \nArea\n\n    \n\"in^2\", \"ft^2\"\n\n    \n\"m^2\"\n\n  \n\n  \n\n    \nVolume\n\n    \n\"in^3\", \"ft^3\"\n\n    \n\"m^3\", \"L\"\n\n  \n\n  \n\n    \nForce\n\n    \n\"lb_f\"\n\n    \n\"N\"\n\n  \n\n  \n\n    \nPower\n\n    \n\"ft\nlb_f/s\"\n\n    \n\"W\"\n\n  \n\n  \n\n    \nPressure\n\n    \n\"inH_{2}O\", \"ftH_{2}O\", \"inHg\"\n\n    \n\"Pa\"\n\n  \n\n  \n\n    \nFlowRate\n\n    \n\"cfm\", \"ft^3/min\", \"gal/min\", \"gpd\", \"gal/day\"\n\n    \n\"m^3/hr\", \"m^3/s\", \"L/hr\", \"L/s\", \"L/min\", \"L/day\"\n\n  \n\n  \n\n    \nU-Factor\n\n    \n\"Btu/ft^2\nh\nR\"\n\n    \n\"W/m^2\nK\"\n\n  \n\n  \n\n    \nR-Value\n\n    \n\"ft^2\nh\nR/Btu\"\n\n    \n\"m^2\nK/W\"\n\n  \n\n  \n\n    \nConductivity\n\n    \n\"Btu/ft^2\nh\nR\"\n\n    \n\"W/m^2\nK\"\n\n  \n\n  \n\n    \nIlluminance\n\n    \n\"fc\"\n\n    \n\"lux\"\n\n  \n\n  \n\n    \nLuminousFlux\n\n    \n\n    \n\"lm\"\n\n  \n\n  \n\n    \nAngles\n\n    \n\"deg\"\n\n    \n\"rad\"\n\n  \n\n  \n\n    \nEnergy\n\n    \n\"Btu\", \"kBtu\", \"ft*lb_f\"\n\n    \n\"J\", \"GJ\"\n\n  \n\n  \n\n    \nRotationalSpeed\n\n    \n\"rpm\"\n\n    \n\"rpm\"\n\n  \n\n  \n\n    \nCycles\n\n    \n\"cycle\"\n\n    \n\"cycle\"\n\n  \n\n  \n\n    \nFrequency\n\n    \n\"Hz\"\n\n    \n\"Hz\"\n\n  \n\n  \n\n    \nVelocity\n\n    \n\"mph\"\n\n    \n\n  \n\n  \n\n    \nElectricPotential\n\n    \n\"V\"\n\n    \n\"V\"\n\n  \n\n  \n\n    \nElectricResistance\n\n    \n\"ohm\"\n\n    \n\"ohm\"", 
            "title": "Measure Code Examples"
        }, 
        {
            "location": "/reference/measure_code_examples/#unit-conversion", 
            "text": "OpenStudio has a built-in unit conversion method:  OpenStudio.convert()  This method will convert a value from the first unit to the second unit, as specified by two strings. The conversion can be from IP to SI, SI to IP, IP to another IP unit, or SI to another SI unit. Any to-from units that are valid conversions will result in an initialized Optional::Double (see [this] for an explanation of optional doubles).  # Convert the value 212 from Fahrenheit to Celsius\nval_in_celsius = OpenStudio.convert(val_in_fahrenheit, F , C )\n\n# Check that the conversion worked, then get the value\nif val_in_celsius.is_initialized\n  val_in_celsius = val_in_celsius.get\nend  # Or, if you know the unit conversion is valid, here's the short version\nval_in_celsius = OpenStudio.convert(val_in_fahrenheit, F , C ).get  You can use the  *  (multiply),  /  (divide), and  ^  (exponent) operators in the unit strings to combine basic units like  \"ft\"  and  \"min\"  into compound units like  \"ft^3/min\" .", 
            "title": "Unit Conversion"
        }, 
        {
            "location": "/reference/measure_code_examples/#available-units", 
            "text": "Unit Type \n     IP \n     SI \n   \n   \n     Temperature \n     \"F\" \n     \"C\" \n   \n   \n     DeltaTemperature \n     \"R\" \n     \"K\" \n   \n   \n     Length \n     \"in\", \"ft\", \"mi\" \n     \"m\" \n   \n   \n     People \n     \"person\" \n     \"person\" \n   \n   \n     Time \n     \"s\", \"min\", \"h\", \"hr\", \"day\" \n     \"s\", \"min\", \"h\", \"hr\", \"day\" \n   \n   \n     Mass \n     \"lb_m\", \"ton\" \n     \"kg\" \n   \n   \n     Area \n     \"in^2\", \"ft^2\" \n     \"m^2\" \n   \n   \n     Volume \n     \"in^3\", \"ft^3\" \n     \"m^3\", \"L\" \n   \n   \n     Force \n     \"lb_f\" \n     \"N\" \n   \n   \n     Power \n     \"ft lb_f/s\" \n     \"W\" \n   \n   \n     Pressure \n     \"inH_{2}O\", \"ftH_{2}O\", \"inHg\" \n     \"Pa\" \n   \n   \n     FlowRate \n     \"cfm\", \"ft^3/min\", \"gal/min\", \"gpd\", \"gal/day\" \n     \"m^3/hr\", \"m^3/s\", \"L/hr\", \"L/s\", \"L/min\", \"L/day\" \n   \n   \n     U-Factor \n     \"Btu/ft^2 h R\" \n     \"W/m^2 K\" \n   \n   \n     R-Value \n     \"ft^2 h R/Btu\" \n     \"m^2 K/W\" \n   \n   \n     Conductivity \n     \"Btu/ft^2 h R\" \n     \"W/m^2 K\" \n   \n   \n     Illuminance \n     \"fc\" \n     \"lux\" \n   \n   \n     LuminousFlux \n     \n     \"lm\" \n   \n   \n     Angles \n     \"deg\" \n     \"rad\" \n   \n   \n     Energy \n     \"Btu\", \"kBtu\", \"ft*lb_f\" \n     \"J\", \"GJ\" \n   \n   \n     RotationalSpeed \n     \"rpm\" \n     \"rpm\" \n   \n   \n     Cycles \n     \"cycle\" \n     \"cycle\" \n   \n   \n     Frequency \n     \"Hz\" \n     \"Hz\" \n   \n   \n     Velocity \n     \"mph\" \n     \n   \n   \n     ElectricPotential \n     \"V\" \n     \"V\" \n   \n   \n     ElectricResistance \n     \"ohm\" \n     \"ohm\"", 
            "title": "Available units"
        }, 
        {
            "location": "/reference/developing_measure_collections/", 
            "text": "Developing Measure Collections\n\n\nWhen writing a collection of measures meant to be used in conjunction with each other, it's a good idea to develop an overall plan for the workflow. This page provides guidance on best practices to manage coordination between measures.\n\n\nIdentify Measure Use Cases\n\n\nThink about what you are trying to accomplish and how the measures will be used; this will greatly impact the design process. Below are some example use cases for a measure collection:\n\n\n\n\nFully automated model generation from an empty seed model\n\n\nUsing a generic completed model as a \"seed model\", altering it to follow a set of prescribed guidelines such as the Advanced Energy Design Guides\n\n\nRunning a collection of input diagnostics such as a collection of \"pre-flight\" measures\n\n\n\n\nDefine Result Requirements\n\n\n\n\nWhat should the resulting model look like? Can it be simple, with power per area loads or do you need to model individual pieces of equipment?\n\n\nIs the model being used in a controlled environment where you know what the seed models will look like, or is it meant for public consumption where it needs to gracefully handle any model or inputs thrown at it?\n\n\nWhat kinds of variables will you want to change?\n\n\nWill a single person write all of the measures, or will a team be developing them?\n\n\n\n\nOutline the Workflow\n\n\nStart with what the seed model looks like, and then move into what will be added or altered in the model. Think about how much modularity you want in your measures, there is a \"sweet spot\"; too much or too little modularity will make more work for the team. Think about where you can use (or adapt) off-the-shelf measures vs. writing your own.\n\n\nGenerally speaking, think about the order in which you would add to, and modify, your model manually. A modeler typically would not add an HVAC system before there are thermal zones in the model, for example. Here we present a basic example workflow:\n\n\n\n\nseed model will be pre-loaded with weather file and spaces with stub space types assigned\n\n\nbased on stub space types, add real space types for a user selected standard\n\n\nadd a construction set for the building based on a user selected standard and climate zone. Optionally allow user to pick the type of exterior wall (mass, steel frame, etc.).\n\n\nrotate building\n\n\nadd fenestration and overhangs based on user specified targets (use multiple instances of the same measure with different input azimuths (and overhang depths) for each instance)\n\n\ncreate thermal zones. Need to decide if one zone per space, or if space should be merged. Maybe define this and stories in the seed model?\n\n\nadd HVAC systems\n\n\nadd service water heating\n\n\nadd exterior lights\n\n\nadd reporting measures\n\n\n\n\nCreate Design Documents\n\n\nWrite a basic design document for each measure describing the general intent of the measure and how it will work. It should list descriptions, the arguments, and the log messages that will be reported when the measure is run. It should also include an outline of the code from the run section of the measure. It can also include information on testing. You can use \nthis example design document\n for the \"Hello World\" measure as a starting point.\n\n\nWriting the Measures\n\n\nOnce you have written the design documents and reviewed them as a collection to make sure they will function together correctly, you are ready to write the measures. Some measures are simple and can be written in less than an hour, but sometimes they are more complex and may take a number of days or more to write. When the measure is going to take a long time, try not to get lost in the details initially. Make a simplified first pass that runs, even if it is with limited functionality. This allows you to start to test the measures in a full workflow early on. The workflow testing is an important milestone as it validates that the overall logic of the process is working. It also allows multiple people to add detail and functionality on individual measures while maintaining a test of the full workflow.\n\n\nHaving a version control system like Git or SVN is very useful for managing the coding process, in particular if a team will be working on the project. Once the workflow testing is passing you should try not to break it on the main branch of the repository. When breaking a measure in the process of adding more functionality; use your local checkout on your computer or on a branch in a repository. This isolates everyone else and the workflow testing from any instability.\n\n\nTesting the Entire Workflow\n\n\nWorkflow testing shouldn't begin after all the code is written, it should be up and running as soon as possible. Each measure already has its own unit test, but \nworkflow testing\n can provide a complete test of all of the measures used, in their intended combinations. Below are few options for workflow testing.\n\n\n\n\nUse the \"Measures\" section of the OpenStudio application. (This isn't recommended because measure reporting in the OpenStudio application isn't as accessible as it is in PAT)\n\n\nUse PAT with only \"Always Run\" Measures (this will produce only a single model and simulation. This is ok, but having multiple Paths for argument values is ideal\n\n\nUse PAT with a combination of \"Always Run\" and \"Measure Group\" measures. This will allow you to test more scenarios.\n\n\nUse the OpenStudio Analysis spreadsheet \ndescribed here\n. You can export a PAT project to the spreadsheet as a starting point.\n\n\nThe OpenStudio developers are working on a scripted workflow testing solution that allows many tests to be run without having to trigger simulations. This is very useful for times when you want to inspect the model or the measure logging to see if it looks like it should. Because this is text based it is more manageable in version control than OpenStudio projects or Excel spreadsheets. When this is ready for use we will link to it from this documentation.", 
            "title": "Developing Measure Collections"
        }, 
        {
            "location": "/reference/developing_measure_collections/#developing-measure-collections", 
            "text": "When writing a collection of measures meant to be used in conjunction with each other, it's a good idea to develop an overall plan for the workflow. This page provides guidance on best practices to manage coordination between measures.", 
            "title": "Developing Measure Collections"
        }, 
        {
            "location": "/reference/developing_measure_collections/#identify-measure-use-cases", 
            "text": "Think about what you are trying to accomplish and how the measures will be used; this will greatly impact the design process. Below are some example use cases for a measure collection:   Fully automated model generation from an empty seed model  Using a generic completed model as a \"seed model\", altering it to follow a set of prescribed guidelines such as the Advanced Energy Design Guides  Running a collection of input diagnostics such as a collection of \"pre-flight\" measures", 
            "title": "Identify Measure Use Cases"
        }, 
        {
            "location": "/reference/developing_measure_collections/#define-result-requirements", 
            "text": "What should the resulting model look like? Can it be simple, with power per area loads or do you need to model individual pieces of equipment?  Is the model being used in a controlled environment where you know what the seed models will look like, or is it meant for public consumption where it needs to gracefully handle any model or inputs thrown at it?  What kinds of variables will you want to change?  Will a single person write all of the measures, or will a team be developing them?", 
            "title": "Define Result Requirements"
        }, 
        {
            "location": "/reference/developing_measure_collections/#outline-the-workflow", 
            "text": "Start with what the seed model looks like, and then move into what will be added or altered in the model. Think about how much modularity you want in your measures, there is a \"sweet spot\"; too much or too little modularity will make more work for the team. Think about where you can use (or adapt) off-the-shelf measures vs. writing your own.  Generally speaking, think about the order in which you would add to, and modify, your model manually. A modeler typically would not add an HVAC system before there are thermal zones in the model, for example. Here we present a basic example workflow:   seed model will be pre-loaded with weather file and spaces with stub space types assigned  based on stub space types, add real space types for a user selected standard  add a construction set for the building based on a user selected standard and climate zone. Optionally allow user to pick the type of exterior wall (mass, steel frame, etc.).  rotate building  add fenestration and overhangs based on user specified targets (use multiple instances of the same measure with different input azimuths (and overhang depths) for each instance)  create thermal zones. Need to decide if one zone per space, or if space should be merged. Maybe define this and stories in the seed model?  add HVAC systems  add service water heating  add exterior lights  add reporting measures", 
            "title": "Outline the Workflow"
        }, 
        {
            "location": "/reference/developing_measure_collections/#create-design-documents", 
            "text": "Write a basic design document for each measure describing the general intent of the measure and how it will work. It should list descriptions, the arguments, and the log messages that will be reported when the measure is run. It should also include an outline of the code from the run section of the measure. It can also include information on testing. You can use  this example design document  for the \"Hello World\" measure as a starting point.", 
            "title": "Create Design Documents"
        }, 
        {
            "location": "/reference/developing_measure_collections/#writing-the-measures", 
            "text": "Once you have written the design documents and reviewed them as a collection to make sure they will function together correctly, you are ready to write the measures. Some measures are simple and can be written in less than an hour, but sometimes they are more complex and may take a number of days or more to write. When the measure is going to take a long time, try not to get lost in the details initially. Make a simplified first pass that runs, even if it is with limited functionality. This allows you to start to test the measures in a full workflow early on. The workflow testing is an important milestone as it validates that the overall logic of the process is working. It also allows multiple people to add detail and functionality on individual measures while maintaining a test of the full workflow.  Having a version control system like Git or SVN is very useful for managing the coding process, in particular if a team will be working on the project. Once the workflow testing is passing you should try not to break it on the main branch of the repository. When breaking a measure in the process of adding more functionality; use your local checkout on your computer or on a branch in a repository. This isolates everyone else and the workflow testing from any instability.", 
            "title": "Writing the Measures"
        }, 
        {
            "location": "/reference/developing_measure_collections/#testing-the-entire-workflow", 
            "text": "Workflow testing shouldn't begin after all the code is written, it should be up and running as soon as possible. Each measure already has its own unit test, but  workflow testing  can provide a complete test of all of the measures used, in their intended combinations. Below are few options for workflow testing.   Use the \"Measures\" section of the OpenStudio application. (This isn't recommended because measure reporting in the OpenStudio application isn't as accessible as it is in PAT)  Use PAT with only \"Always Run\" Measures (this will produce only a single model and simulation. This is ok, but having multiple Paths for argument values is ideal  Use PAT with a combination of \"Always Run\" and \"Measure Group\" measures. This will allow you to test more scenarios.  Use the OpenStudio Analysis spreadsheet  described here . You can export a PAT project to the spreadsheet as a starting point.  The OpenStudio developers are working on a scripted workflow testing solution that allows many tests to be run without having to trigger simulations. This is very useful for times when you want to inspect the model or the measure logging to see if it looks like it should. Because this is text based it is more manageable in version control than OpenStudio projects or Excel spreadsheets. When this is ready for use we will link to it from this documentation.", 
            "title": "Testing the Entire Workflow"
        }, 
        {
            "location": "/reference/refguide_radiance/", 
            "text": "OpenStudio-Radiance Reference Guide\n\n\nThis reference guide explains the methods used in OpenStudio to utilize \nRadiance\n to simulate the daylight ingress in your OpenStudio model, allowing for higher fidelity simulations of daylighting-related energy efficiency measures. Radiance is not constrained to simple geometry, and the OpenStudio model supports interior architectural detail such as \ninterior partition surfaces\n (for representing columns, soffits, furniture, etc) and air walls (for eliminating thermal zone boundaries that do not correspond to any actual building architecture). This allows for a more accurate characterization of the spatial distribution of daylight in the OpenStudio model. \n\n\nFor OpenStudio \nv1.7.0\n, added support for window shades and wall thickness has increased the utility of the Radiance simulation option in the OpenStudio application. \n\n\nWith OpenStudio \nv1.9.0\n, the Radiance simulation option has been refactored (moved) to a measure, eliminating the \"daylight simulation engine\" selection radio buttons from the app, and modifying the workflow slightly. \n\n\nOverview\n\n\nIn short, OpenStudio manages the model translation, simulation, and results processing of an OpenStudio building model (.osm), deriving geometry, materials, loads, schedules, and site information from the OSM. An annual climate-based daylight simulation is performed, new lighting load schedules are generated and embedded in the osm for the subsequent EnergyPlus simulation. In addition, a number of daylight metrics are calculated for those spaces with daylighting objects in them (illuminance maps and glare sensors), and are reported in a comma-delineated format, suitable for import and plotting in the modeler's tool of choice. \n\n\nModeling Shading Controls with the 3-Phase Method\n\n\nThe 3-Phase method is used in OpenStudio for conducting annual climate-based daylight simulations in a reasonably fast manner. This method solves the flux transfer from the sky to the window separately from the flux transfer from the window to the point(s) of interest in the space. These matrices are called the \ndaylight matrix\n \n(DMX)\n and \nview matrix\n \n(VMX)\n, respectively. A third matrix called the transmission matrix (T), is represented by a bidirectional scattering distribution function (BSDF). The BSDF optically characterizes the shading layer and is inserted into the matrix and multiplied by a sky matrix (s) for each timestep to give a single hourly result for the model:\n\n\nI\n3ph\n = VTDs\n\n\nWhere:\n\n\nI = Result matrix containing time series of illuminance or luminance result\n\n\nV = View matrix, relating outgoing directions on window to desired results at interior\n\n\nT = Transmission matrix, relating incident window directions to exiting directions (BSDF)\n\n\nD = Daylight matrix, relating sky patches to incident directions on window\n\n\ns = Sky matrix, a collection of sky vectors (NOTE: in the 3-phase method, the solar flux is represented by the three sky matrix patches closest to the solar position at the given timestep.)\n\n\nWe rely on the rfluxmtx tool in Radiance to handle the creation of all the necessary daylight coefficient matrices, and on some generic BSDFs from the Building Component Library to represent the shading layers. The OpenStudio-to-Radiance model translator groups the building fenestration by each unique combination of the following properties:\n\n\n\n\norientation\n\n\nvisible light transmittance\n\n\nshading control\n\n\n\n\nAll windows with no shading control are grouped together into a single group called Window Group Zero (WG0), and are calculated together. Then, windows matching each unique combination of the properties above are also grouped together, into sequentially-numbered groups (WG1, WG2, etc). An annual illuminance schedule for each window group is calculated, and in the case of controlled window groups, a schedule is calculated once for that group with the shades up, and another one for the shades down. A shade schedule is generated, based on incident solar irradiance on the glazing, and this is used to create a final \nBuilding Illuminance Schedule\n which takes the correct timestep illuminance values for each window group and sums them together for each day, for the entire year.", 
            "title": "OpenStudio-Radiance Reference Guide"
        }, 
        {
            "location": "/reference/refguide_radiance/#openstudio-radiance-reference-guide", 
            "text": "This reference guide explains the methods used in OpenStudio to utilize  Radiance  to simulate the daylight ingress in your OpenStudio model, allowing for higher fidelity simulations of daylighting-related energy efficiency measures. Radiance is not constrained to simple geometry, and the OpenStudio model supports interior architectural detail such as  interior partition surfaces  (for representing columns, soffits, furniture, etc) and air walls (for eliminating thermal zone boundaries that do not correspond to any actual building architecture). This allows for a more accurate characterization of the spatial distribution of daylight in the OpenStudio model.   For OpenStudio  v1.7.0 , added support for window shades and wall thickness has increased the utility of the Radiance simulation option in the OpenStudio application.   With OpenStudio  v1.9.0 , the Radiance simulation option has been refactored (moved) to a measure, eliminating the \"daylight simulation engine\" selection radio buttons from the app, and modifying the workflow slightly.", 
            "title": "OpenStudio-Radiance Reference Guide"
        }, 
        {
            "location": "/reference/refguide_radiance/#overview", 
            "text": "In short, OpenStudio manages the model translation, simulation, and results processing of an OpenStudio building model (.osm), deriving geometry, materials, loads, schedules, and site information from the OSM. An annual climate-based daylight simulation is performed, new lighting load schedules are generated and embedded in the osm for the subsequent EnergyPlus simulation. In addition, a number of daylight metrics are calculated for those spaces with daylighting objects in them (illuminance maps and glare sensors), and are reported in a comma-delineated format, suitable for import and plotting in the modeler's tool of choice.", 
            "title": "Overview"
        }, 
        {
            "location": "/reference/refguide_radiance/#modeling-shading-controls-with-the-3-phase-method", 
            "text": "The 3-Phase method is used in OpenStudio for conducting annual climate-based daylight simulations in a reasonably fast manner. This method solves the flux transfer from the sky to the window separately from the flux transfer from the window to the point(s) of interest in the space. These matrices are called the  daylight matrix   (DMX)  and  view matrix   (VMX) , respectively. A third matrix called the transmission matrix (T), is represented by a bidirectional scattering distribution function (BSDF). The BSDF optically characterizes the shading layer and is inserted into the matrix and multiplied by a sky matrix (s) for each timestep to give a single hourly result for the model:  I 3ph  = VTDs  Where:  I = Result matrix containing time series of illuminance or luminance result  V = View matrix, relating outgoing directions on window to desired results at interior  T = Transmission matrix, relating incident window directions to exiting directions (BSDF)  D = Daylight matrix, relating sky patches to incident directions on window  s = Sky matrix, a collection of sky vectors (NOTE: in the 3-phase method, the solar flux is represented by the three sky matrix patches closest to the solar position at the given timestep.)  We rely on the rfluxmtx tool in Radiance to handle the creation of all the necessary daylight coefficient matrices, and on some generic BSDFs from the Building Component Library to represent the shading layers. The OpenStudio-to-Radiance model translator groups the building fenestration by each unique combination of the following properties:   orientation  visible light transmittance  shading control   All windows with no shading control are grouped together into a single group called Window Group Zero (WG0), and are calculated together. Then, windows matching each unique combination of the properties above are also grouped together, into sequentially-numbered groups (WG1, WG2, etc). An annual illuminance schedule for each window group is calculated, and in the case of controlled window groups, a schedule is calculated once for that group with the shades up, and another one for the shades down. A shade schedule is generated, based on incident solar irradiance on the glazing, and this is used to create a final  Building Illuminance Schedule  which takes the correct timestep illuminance values for each window group and sums them together for each day, for the entire year.", 
            "title": "Modeling Shading Controls with the 3-Phase Method"
        }, 
        {
            "location": "/reference/openstudio_results_measure/", 
            "text": "OpenStudio Results Measure\n\n\n\nMeasure Overview\n\n\nIn OpenStudio 1.8.1 and later this measure replaces the monthly end use overview as the default measure on any simulation. You don't have to add it to your workflow, it just runs. This measure creates high level tables and charts pulling both from model inputs and EnergyPlus results, all data is in IP units. It has building level information as well as detail on space types, thermal zones, HVAC systems, envelope characteristics, and economics. Click the heading above a chart to view a table of the chart data. If you have OpenStudio 1.7.5 or later, you can also download a copy of this from the \nBCL\n, however offline viewing of charts within the OpenStudio Application requires 1.8.1 or later. If you are viewing the report through a web browser you won't see charts if you are offline, but you will still see tables. While the report generally uses high level model data or tabular results, a few sections do request hourly or monthly time-series data. This applies to the HVAC Load Profiles and Zone Conditions sections.\n\n\n\n\n\nAbove: This video demonstrates the 1.9.0 Release with the Reporting Measure.\n\n\nThe report is broken down into 21 sections which can be navigated using the table of contents at the left side of the report. If the table of contents and the main body of the report start to overlap with each other,  increase the width of your application or web browser window. Each section has one or moore tables or charts. Be default where there is a chart, table data is hidden, but you can expand it by clicking on the blue title above the chart that says \"view table\". If there is no data for a section, the header for the section will still show but you will see a message that says \"No Data to Show for ...\". For some tables or charts within a section the table may be hidden if there isn't any content. This is true for example for Renewable Energy Source Summary in  Model Summary, Fuel Tables in  Monthly Overview, and Thermal Zones in Zone Equipment Detail.\n\n\nAs this measure develops more data may be added to specific sections and new sections may be added, but we don't want this to be an all purpose measure. It is meant to provide general data that you would typically want on any simulation. If you want to trouble shoot specific aspects of your model or have use case or specific reporting requirements, you can add additional reporting measures to the workflow. As described in the \"Developing Your Own Reporting Measures\" section below, we hope both internally and externally to see the same framework and charting libraries used as much as possible. This will provide a more consistent experience for users and measure writers.\n\n\nThe rest of this section describes the specific sections of the current version of the measure.\n\n\nModel Summary\n\n\nThis section provides quick access to high level information about your model such as the building area and the Energy Use Intensity (EUI). It includes tables for Building Summary, Weather Summary Sizing Period Design Days, Unmet Hours Summary, and Renewable Energy Source Summary.\n\n\n\n\nAbove: First few tables in Model Summary section.\n\n\nAnnual Overview\n\n\nThis section consists of a number of pie charts that break down annual consumption by end use, fuel or both. The chart legend is sorted for largest (top) to smallest (bottom) and only shows end uses or fuels which ar used in the model. The end use and fuel color keys are consistent with charts in other sections of the report. As is typical in chart throughout the report, hovering over chart elements provides additional information.\n\n\n\n\nAbove: First few charts in Annual Summary section.\n\n\nMonthly Overview\n\n\nThis section is most like what the previous default report looked like. It has consumption charts by month, fuel, and end use. It will create charts as needed based on fuel types used in the model. This includes district heating and cooling. In addition to monthly consumption breakdown, there are also charts for monthly demand by fuel. The end uses shown in the demand charts are the value of that end use at peak demand for that fuel. Keep in mind that this may not represent the monthly peak load for that end use by itself, it is just a snapshot at the monthly peak demand for that fuel.\n\n\n\n\nAbove: Monthly Electricity Consumption table.\n\n\nUtility Bills/Rates\n\n\nThis section includes a table showing average utility rate by fuel as well as a table that shows process and total energy costs by fuel. Note that on both tables the \"Other\" row includes water; as a result when you have added a cost to watter as a fuel the average rate value and units don't make sense for the \"Other\" row. They can be ignored.\n\n\n\n\nAbove: Utility Bills/Rates tables.\n\n\nEnvelope\n\n\nThis section lists constructions used for base and sub surfaces in the model along with the area, surface count, and R value or U-Factor for the construction. This data comes from the OpenStudio model, however the orientation specific window-wall ratios and skylight-roof ratio come from the EnergyPlus results.\n\n\n\n\nAbove: Envelope tables.\n\n\nSpace Type Breakdown\n\n\nThis chart is generated from the OpenStudio model. If you expand the table or hover over pie chart sections you can see the floor area in the model accounted for by each space type. If you have spaces in your model that don't have a space type assigned, they will show under a heading of \"No Space Type Assigned\". This accounts for zone multipliers. If you have spaces in your model that are not included in a thermal zone you may have unexpected results.\n\n\n\n\nAbove: Space Type Breakdown chart and first Space Type Summary table.\n\n\nSpace Type Summary\n\n\nThese tables provide detail on internal loads for each of the space types used in the model. This includes loads such as people, lights, and electric and gas equipment, as well as internal mass, outdoor air requirements, infiltration. Currently Water Use Equipment isn't part of a space type and doesn't show on these tables. There is a separate section for water use equipment. If you have multiple instances of a specific load type such as lights, each instance will each be listed individually vs. having a lighting total for the space type.\n\n\nNote that loads assigned directly to a space don't show anywhere in this section. This would occur for all loads in a space when there is no space type assigned, and can also occur when a space type is assigned to a space, but the space also has additional loads assigned to it, beyond what it inherits from the space type.\n\n\nInterior Lighting Summary\n\n\nThis section contains one table that lists all lighting instances in the model by thermal zone. This comes from EnergyPlus post simulation. As a result we can include \"Actual Load Hours/Week\" and \"Consumption\". Actual load horus per week account for reductions due to daylight controls. Additional information such as schedule name and return air fraction are included. This can be a very long table on a large model. For convince you can click the blue heading to collapse a table, but you can also use teh left navigation to skip past it.\n\n\n\n\nAbove: Interior Lighting Summary table.\n\n\nPlug Loads Summary\n\n\nThe Plug Loads summary section is similar to Interior Lighting Summary in that it lists all plug loads, however it only shows the instance name and the consumption. There are separate tables for electric equipment and gas equipment, if both types of loads exist in the model.\n\n\n\n\nAbove: Plug Loads Summary table.\n\n\nExterior Lighting\n\n\nThis section has a single table that last all exterior lights objects in the model along with their power and consumption. As this comes from the EnergyPlus results consumption accounts for schedules adjusted for an astronomical clock.\n\n\n\n\nAbove: Exterior Lighting and Water Use Equipment section.\n\n\nWater Use Equipment\n\n\nThe water use equipment table lists all water use equipment objects in the model. This comes from the model, so it doesn't provide consumption but it does identify the service water heating loop, the load definition, the space the equipment is in, along with the peak flow rate, flow rate schedule, and the target temperature range. In a number of places in this reporting measure where an object refers to a temperature schedule or schedules, a range of values is listed vs. the name of the schedules. This allows for quick validation of reasonable values.\n\n\nHVAC Load Profiles\n\n\nThis measures overlays monthly heating and cooling demand, that we saw earlier in the Monthly Overview section with the monthly average outdoor dry bulb temperature. This is the first section in the measure that requires time series output, although in this case just the monthly values for one variable (dry bulb temperature).\n\n\n\n\nAbove: HVAC Load Profiles chart.\n\n\nZone Conditions\n\n\nThe zone conditions section has two tables. Both tables list all of the zones in the model and break down the hours of the simulation that are spent in a specific value range. The first table catagories hours of simulation (8760 if running a full year) by temperature ranges in 5 degree(F) bins. Additionally the number of hours heating and cooling setpoints are not met are also shown, along with the mean zone temperature. The unmet hours and mean temperature include both occupied and unoccupied hours.\n\n\n\n\nAbove: Zone Conditions - Temperature table.\n\n\nThe second table shows relative humidity in 5% bins, along with mean relative humidity for each zone. In both cases the table cells are color coded to make it easier to quickly can over. Cells with under 500 hours are not colored. Cells with more than 500 hours are yellow. More than 1000 hours - orange. More than 200 hours - red.\n\n\n\n\nAbove: Zone Conditions - Humidity Table.\n\n\nZone Overview\n\n\nThis section gives an overview of zone geometry and internal loads. It also identifies if a zone is conditioned, is part of the flor area, and what its zone multiplier is.\n\n\n\n\nAbove: Zone Overview section.\n\n\nZone Equipment Detail\n\n\nThis section lists creates a table for each thermal zone that has zone equipment, other than a terminal. Each table lists all zone equipment except for terminals, information on terminal types used can be found in the Air Loops Details section. For some types of equipment we list additional information, for others we just list the object type. Over time we will provide more information on additional object types. This is also true for the Air Loops and Plant Loops Detail sections.\n\n\n\n\nAbove: Zone Equipment section.\n\n\nAir Loops Detail\n\n\nThis section has a table for each air loop in the model. Each table is broken down into supply, demand, and controls sub-tables. The demand supply section lists objects on the supply side of the air loop. As with Zone Equipment Detail section, some objects have additional information listed, other objects just list the class of object. The demand section summaries the number of zones on the air loop along with the floor area of those thermal zones, the range of thermostat setpoint values for both heating and cooling, and a list of the types of terminals used on the air loop. The controls sub-table provides high level controls information about the air loop.\n\n\n\n\nAbove: First table in Air Loops Detail section.\n\n\nPlant Loops Detail\n\n\nThis section has a table for each plant loop in the model. It is organized very much like the Air Loops Detail section. The demand section of the plant loop summary will list thermal zones, air loops or other plant loops that are on the demand side of the loop. In addition to loops that condition the building, loops providing service water heating will also appear hear.\n\n\n\n\nAbove: First table in Plant Loops Detail section.\n\n\nOutdoor Air\n\n\nThis section has a table that lists the number of occupants and volume of each zone along with the average and minimum values for mechanical ventilation and infiltration.\n\n\n\n\nAbove: Outdoor Air section.\n\n\nCash Flow\n\n\nThis section shows the cash flow over the analysis period for your project, which defaults to 25 years. You wont see any data in this section unless you have added lifecycle costs and or utility rates to your model. As with other charts you can hover over chart data or click the blue heading above the chart to view precise value in tabular form.\n\n\n\n\nAbove: Cash Flow chart.\n\n\nSite and Source Summary\n\n\nThis section has two tables. The lists total and net values for both site and source energy. The second table lists the site to source conversion factors by fuel to calculate values in the first table.\n\n\n\n\nAbove: Site and Source Summary section.\n\n\nSchedule Overview\n\n\nThis section provides a small chart for each schedule used in the model. This looks very much like what you can see in the Schedule Tab of the OpenStudio application except that all of the possible day profiles for a schedule are overlaid on each other. Rules are listed by their priority with a description for the days of teh week and dates of the year they are applicable. The colors for the default profile adn rules match what is used in the application. You can expand the table for this section to see the use count for each schedule.\n\n\n\n\nAbove: Schedule Overview charts.\n\n\nMeasure Arguments\n\n\nIf you are running this report in OpenStudio 8.1 or later all sections are automatically shown. If you add it to the workflow then user arguments will become visible. For this measure there is a check box for each section to determine if you want to generate that section or not. You could use this to create a streamline report with only the sections are are interested visible. If you disable sections that request time-series data, then those output variables wont' be requested, resulting in a smaller SQL file. Since most sections in this report only request tabular data, it won't affect much, but for other future reports this coudl be more useful. The Zone Conditions section requests hourly zone temperature and humidity values and the HVAC Load Profiles section requests monthly outdoor air dry bulb temperatures.\n\n\n\n\nAbove: View of Arguments in OpenStudio Results measure.\n\n\nDeveloping Your Own Reporting Measures\n\n\nThis measure was created to fill a need in providing easy access to more detailed model and simulation results data, but it serves another role as well. It was created in a way that was very easy to use as a template for custom user reports. We setup a framework and added support for a variety of chart types. The only coding required to make your own custom report is to provide the data. While we have a separate \nMeasure Writing Guide\n in our documentation, it seemed fitting to explain here how you would add your own tables and charts to this report, or to create a new clean report.\n\n\nThe first step is to gather the data you want in a table or chart. This could be simulation results, model inputs, or even just hard coded table as in this example. It could also be read in from a text file. In the \"resources\" folder of the measure this is a file named \"os_lib_reporting.rb\". Most of the methods (start with \"def OsLib_Reporting.my_method\") in this file do one of two things. They define a section used in the report or they define a table that is used by one of the sections. The code below shows two sample methods with hard coded table data about tasty treats. You can copy and modify these methods to show what you want. The section description and all of the table data can be in one method, or if it is easier to break things up you can have a method for each table, and then call it from the method that makes the section. in this case.  \ntemplate_tables \n OsLib_Reporting.template_table(model,sqlFile,runner)\n adds in a table defined elsewhere. The code for a sample section method and table method are shown below.\n\n\n  # create template section\n  def OsLib_Reporting.template_section(model,sqlFile,runner,name_only = false)\n\n    # array to hold tables\n    template_tables = []\n\n    # gather data for section\n    @template_section = {}\n    @template_section[:title] = 'Tasty Treats'\n    @template_section[:tables] = template_tables\n\n    # stop here if only name is requested this is used to populate display name for arguments\n    if name_only == true\n      return @template_section\n    end\n\n    # notes:\n    # The data below would typically come from the model or simulation results\n    # You can loop through objects to make a table for each item of that type, such as air loops\n    # If a section will only have one table you can leave the table title blank and just rely on the section title\n    # these will be updated later to support graphs\n\n    # create table\n    template_table_01= {}\n    template_table_01[:title] = 'Fruit'\n    template_table_01[:header] = ['Definition','Value']\n    template_table_01[:units] = ['','$/pound']\n    template_table_01[:data] = []\n\n    # add rows to table\n    template_table_01[:data] \n ['Banana',0.23]\n    template_table_01[:data] \n ['Apple',0.75]\n    template_table_01[:data] \n ['Orange',0.50]\n\n    # add table to array of tables\n    template_tables \n template_table_01\n\n    # using helper method that generates table for second example\n    template_tables \n OsLib_Reporting.template_table(model,sqlFile,runner)\n\n    return @template_section\n\n  end\n\n  # create template section\n  def OsLib_Reporting.template_table(model,sqlFile,runner)\n\n    # create a second table\n    template_table = {}\n    template_table[:title] = 'Ice Cream'\n    template_table[:header] = ['Definition','Base Flavor','Toppings','Value']\n    template_table[:units] = ['','','','scoop']\n    template_table[:data] = []\n\n    # add rows to table\n    template_table[:data] \n ['Vanilla','Vanilla','NA',1.5]\n    template_table[:data] \n ['Rocky Road','Chocolate','Nuts',1.5]\n    template_table[:data] \n ['Mint Chip','Mint','Chocolate Chips',1.5]\n\n    return template_table\n\n  end\n\n\n\n\nThis example doesn't discuss charts, but you can look at other methods to learn how to add charts. It looks something like this\n\n\n     output_data_space_type_breakdown[:chart_type] = 'simple_pie'\n     output_data_space_type_breakdown[:chart] = []\n\n     # data for graph\n     output_data_space_type_breakdown[:chart] \n JSON.generate({:label =\ndisplay,:value =\n value, :color =\n color})\n\n\n\n\nOnce you have defined your need to tell the measure to use the new section method. For this last step you need to add a line to the possible_sections method of the measure.rb file. In this example I added \nresult \n \"template_section\"\n to the top of the table of contents.\n\n\n  def possible_sections\n    result = []\n\n    # methods for sections in order that they will appear in report\n    result \n \ntemplate_section\n\n    result \n \nbuilding_summary_section\n\n    result \n \nannual_overview_section\n\n    result \n \nmonthly_overview_section\n\n    result \n \nutility_bills_rates_section\n\n    result \n \nenvelope_section_section\n\n    result \n \nspace_type_breakdown_section\n\n    result \n \nspace_type_details_section\n\n\n    # removed other sections from code example to make it shorter\n\n    return result\n  end\n\n\n\n\nAdding that line of code will not only add the new section to the arguments for the measure, but will also call the method in the run method of the measure to gather the data and generate an HTML table. If you don't want to extend the os_lib_reporting.rb file, you can create your own version that functions in the same way, but only has code for sections you are using. You just need to modify this line at the top of the \"measure.rb\" file to point to your library \nrequire \"#{File.dirname(__FILE__)}/resources/os_lib_reporting\"\n. Below is a screenshot of the resting Tasty Treats section. If you want to change the title in the HTML file it is in this code in the \"report.html.erb\" file in the \"resources\" directory \ntitle\nOpenStudio Results\n/title\n.\n\n\n\n\nAbove: Example section with two tables.\n\n\nYou can write completely custom measure reports that don't look anything like this, and use different html and charting technologies. This framework is just provided as a way to make reports where all you want to worry about is how to get the data you want to see, and not how to generate the HTML code.", 
            "title": "OpenStudio Results Measure"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#measure-overview", 
            "text": "In OpenStudio 1.8.1 and later this measure replaces the monthly end use overview as the default measure on any simulation. You don't have to add it to your workflow, it just runs. This measure creates high level tables and charts pulling both from model inputs and EnergyPlus results, all data is in IP units. It has building level information as well as detail on space types, thermal zones, HVAC systems, envelope characteristics, and economics. Click the heading above a chart to view a table of the chart data. If you have OpenStudio 1.7.5 or later, you can also download a copy of this from the  BCL , however offline viewing of charts within the OpenStudio Application requires 1.8.1 or later. If you are viewing the report through a web browser you won't see charts if you are offline, but you will still see tables. While the report generally uses high level model data or tabular results, a few sections do request hourly or monthly time-series data. This applies to the HVAC Load Profiles and Zone Conditions sections.   Above: This video demonstrates the 1.9.0 Release with the Reporting Measure.  The report is broken down into 21 sections which can be navigated using the table of contents at the left side of the report. If the table of contents and the main body of the report start to overlap with each other,  increase the width of your application or web browser window. Each section has one or moore tables or charts. Be default where there is a chart, table data is hidden, but you can expand it by clicking on the blue title above the chart that says \"view table\". If there is no data for a section, the header for the section will still show but you will see a message that says \"No Data to Show for ...\". For some tables or charts within a section the table may be hidden if there isn't any content. This is true for example for Renewable Energy Source Summary in  Model Summary, Fuel Tables in  Monthly Overview, and Thermal Zones in Zone Equipment Detail.  As this measure develops more data may be added to specific sections and new sections may be added, but we don't want this to be an all purpose measure. It is meant to provide general data that you would typically want on any simulation. If you want to trouble shoot specific aspects of your model or have use case or specific reporting requirements, you can add additional reporting measures to the workflow. As described in the \"Developing Your Own Reporting Measures\" section below, we hope both internally and externally to see the same framework and charting libraries used as much as possible. This will provide a more consistent experience for users and measure writers.  The rest of this section describes the specific sections of the current version of the measure.", 
            "title": "Measure Overview"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#model-summary", 
            "text": "This section provides quick access to high level information about your model such as the building area and the Energy Use Intensity (EUI). It includes tables for Building Summary, Weather Summary Sizing Period Design Days, Unmet Hours Summary, and Renewable Energy Source Summary.   Above: First few tables in Model Summary section.", 
            "title": "Model Summary"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#annual-overview", 
            "text": "This section consists of a number of pie charts that break down annual consumption by end use, fuel or both. The chart legend is sorted for largest (top) to smallest (bottom) and only shows end uses or fuels which ar used in the model. The end use and fuel color keys are consistent with charts in other sections of the report. As is typical in chart throughout the report, hovering over chart elements provides additional information.   Above: First few charts in Annual Summary section.", 
            "title": "Annual Overview"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#monthly-overview", 
            "text": "This section is most like what the previous default report looked like. It has consumption charts by month, fuel, and end use. It will create charts as needed based on fuel types used in the model. This includes district heating and cooling. In addition to monthly consumption breakdown, there are also charts for monthly demand by fuel. The end uses shown in the demand charts are the value of that end use at peak demand for that fuel. Keep in mind that this may not represent the monthly peak load for that end use by itself, it is just a snapshot at the monthly peak demand for that fuel.   Above: Monthly Electricity Consumption table.", 
            "title": "Monthly Overview"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#utility-billsrates", 
            "text": "This section includes a table showing average utility rate by fuel as well as a table that shows process and total energy costs by fuel. Note that on both tables the \"Other\" row includes water; as a result when you have added a cost to watter as a fuel the average rate value and units don't make sense for the \"Other\" row. They can be ignored.   Above: Utility Bills/Rates tables.", 
            "title": "Utility Bills/Rates"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#envelope", 
            "text": "This section lists constructions used for base and sub surfaces in the model along with the area, surface count, and R value or U-Factor for the construction. This data comes from the OpenStudio model, however the orientation specific window-wall ratios and skylight-roof ratio come from the EnergyPlus results.   Above: Envelope tables.", 
            "title": "Envelope"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#space-type-breakdown", 
            "text": "This chart is generated from the OpenStudio model. If you expand the table or hover over pie chart sections you can see the floor area in the model accounted for by each space type. If you have spaces in your model that don't have a space type assigned, they will show under a heading of \"No Space Type Assigned\". This accounts for zone multipliers. If you have spaces in your model that are not included in a thermal zone you may have unexpected results.   Above: Space Type Breakdown chart and first Space Type Summary table.", 
            "title": "Space Type Breakdown"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#space-type-summary", 
            "text": "These tables provide detail on internal loads for each of the space types used in the model. This includes loads such as people, lights, and electric and gas equipment, as well as internal mass, outdoor air requirements, infiltration. Currently Water Use Equipment isn't part of a space type and doesn't show on these tables. There is a separate section for water use equipment. If you have multiple instances of a specific load type such as lights, each instance will each be listed individually vs. having a lighting total for the space type.  Note that loads assigned directly to a space don't show anywhere in this section. This would occur for all loads in a space when there is no space type assigned, and can also occur when a space type is assigned to a space, but the space also has additional loads assigned to it, beyond what it inherits from the space type.", 
            "title": "Space Type Summary"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#interior-lighting-summary", 
            "text": "This section contains one table that lists all lighting instances in the model by thermal zone. This comes from EnergyPlus post simulation. As a result we can include \"Actual Load Hours/Week\" and \"Consumption\". Actual load horus per week account for reductions due to daylight controls. Additional information such as schedule name and return air fraction are included. This can be a very long table on a large model. For convince you can click the blue heading to collapse a table, but you can also use teh left navigation to skip past it.   Above: Interior Lighting Summary table.", 
            "title": "Interior Lighting Summary"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#plug-loads-summary", 
            "text": "The Plug Loads summary section is similar to Interior Lighting Summary in that it lists all plug loads, however it only shows the instance name and the consumption. There are separate tables for electric equipment and gas equipment, if both types of loads exist in the model.   Above: Plug Loads Summary table.", 
            "title": "Plug Loads Summary"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#exterior-lighting", 
            "text": "This section has a single table that last all exterior lights objects in the model along with their power and consumption. As this comes from the EnergyPlus results consumption accounts for schedules adjusted for an astronomical clock.   Above: Exterior Lighting and Water Use Equipment section.", 
            "title": "Exterior Lighting"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#water-use-equipment", 
            "text": "The water use equipment table lists all water use equipment objects in the model. This comes from the model, so it doesn't provide consumption but it does identify the service water heating loop, the load definition, the space the equipment is in, along with the peak flow rate, flow rate schedule, and the target temperature range. In a number of places in this reporting measure where an object refers to a temperature schedule or schedules, a range of values is listed vs. the name of the schedules. This allows for quick validation of reasonable values.", 
            "title": "Water Use Equipment"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#hvac-load-profiles", 
            "text": "This measures overlays monthly heating and cooling demand, that we saw earlier in the Monthly Overview section with the monthly average outdoor dry bulb temperature. This is the first section in the measure that requires time series output, although in this case just the monthly values for one variable (dry bulb temperature).   Above: HVAC Load Profiles chart.", 
            "title": "HVAC Load Profiles"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#zone-conditions", 
            "text": "The zone conditions section has two tables. Both tables list all of the zones in the model and break down the hours of the simulation that are spent in a specific value range. The first table catagories hours of simulation (8760 if running a full year) by temperature ranges in 5 degree(F) bins. Additionally the number of hours heating and cooling setpoints are not met are also shown, along with the mean zone temperature. The unmet hours and mean temperature include both occupied and unoccupied hours.   Above: Zone Conditions - Temperature table.  The second table shows relative humidity in 5% bins, along with mean relative humidity for each zone. In both cases the table cells are color coded to make it easier to quickly can over. Cells with under 500 hours are not colored. Cells with more than 500 hours are yellow. More than 1000 hours - orange. More than 200 hours - red.   Above: Zone Conditions - Humidity Table.", 
            "title": "Zone Conditions"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#zone-overview", 
            "text": "This section gives an overview of zone geometry and internal loads. It also identifies if a zone is conditioned, is part of the flor area, and what its zone multiplier is.   Above: Zone Overview section.", 
            "title": "Zone Overview"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#zone-equipment-detail", 
            "text": "This section lists creates a table for each thermal zone that has zone equipment, other than a terminal. Each table lists all zone equipment except for terminals, information on terminal types used can be found in the Air Loops Details section. For some types of equipment we list additional information, for others we just list the object type. Over time we will provide more information on additional object types. This is also true for the Air Loops and Plant Loops Detail sections.   Above: Zone Equipment section.", 
            "title": "Zone Equipment Detail"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#air-loops-detail", 
            "text": "This section has a table for each air loop in the model. Each table is broken down into supply, demand, and controls sub-tables. The demand supply section lists objects on the supply side of the air loop. As with Zone Equipment Detail section, some objects have additional information listed, other objects just list the class of object. The demand section summaries the number of zones on the air loop along with the floor area of those thermal zones, the range of thermostat setpoint values for both heating and cooling, and a list of the types of terminals used on the air loop. The controls sub-table provides high level controls information about the air loop.   Above: First table in Air Loops Detail section.", 
            "title": "Air Loops Detail"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#plant-loops-detail", 
            "text": "This section has a table for each plant loop in the model. It is organized very much like the Air Loops Detail section. The demand section of the plant loop summary will list thermal zones, air loops or other plant loops that are on the demand side of the loop. In addition to loops that condition the building, loops providing service water heating will also appear hear.   Above: First table in Plant Loops Detail section.", 
            "title": "Plant Loops Detail"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#outdoor-air", 
            "text": "This section has a table that lists the number of occupants and volume of each zone along with the average and minimum values for mechanical ventilation and infiltration.   Above: Outdoor Air section.", 
            "title": "Outdoor Air"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#cash-flow", 
            "text": "This section shows the cash flow over the analysis period for your project, which defaults to 25 years. You wont see any data in this section unless you have added lifecycle costs and or utility rates to your model. As with other charts you can hover over chart data or click the blue heading above the chart to view precise value in tabular form.   Above: Cash Flow chart.", 
            "title": "Cash Flow"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#site-and-source-summary", 
            "text": "This section has two tables. The lists total and net values for both site and source energy. The second table lists the site to source conversion factors by fuel to calculate values in the first table.   Above: Site and Source Summary section.", 
            "title": "Site and Source Summary"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#schedule-overview", 
            "text": "This section provides a small chart for each schedule used in the model. This looks very much like what you can see in the Schedule Tab of the OpenStudio application except that all of the possible day profiles for a schedule are overlaid on each other. Rules are listed by their priority with a description for the days of teh week and dates of the year they are applicable. The colors for the default profile adn rules match what is used in the application. You can expand the table for this section to see the use count for each schedule.   Above: Schedule Overview charts.", 
            "title": "Schedule Overview"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#measure-arguments", 
            "text": "If you are running this report in OpenStudio 8.1 or later all sections are automatically shown. If you add it to the workflow then user arguments will become visible. For this measure there is a check box for each section to determine if you want to generate that section or not. You could use this to create a streamline report with only the sections are are interested visible. If you disable sections that request time-series data, then those output variables wont' be requested, resulting in a smaller SQL file. Since most sections in this report only request tabular data, it won't affect much, but for other future reports this coudl be more useful. The Zone Conditions section requests hourly zone temperature and humidity values and the HVAC Load Profiles section requests monthly outdoor air dry bulb temperatures.   Above: View of Arguments in OpenStudio Results measure.", 
            "title": "Measure Arguments"
        }, 
        {
            "location": "/reference/openstudio_results_measure/#developing-your-own-reporting-measures", 
            "text": "This measure was created to fill a need in providing easy access to more detailed model and simulation results data, but it serves another role as well. It was created in a way that was very easy to use as a template for custom user reports. We setup a framework and added support for a variety of chart types. The only coding required to make your own custom report is to provide the data. While we have a separate  Measure Writing Guide  in our documentation, it seemed fitting to explain here how you would add your own tables and charts to this report, or to create a new clean report.  The first step is to gather the data you want in a table or chart. This could be simulation results, model inputs, or even just hard coded table as in this example. It could also be read in from a text file. In the \"resources\" folder of the measure this is a file named \"os_lib_reporting.rb\". Most of the methods (start with \"def OsLib_Reporting.my_method\") in this file do one of two things. They define a section used in the report or they define a table that is used by one of the sections. The code below shows two sample methods with hard coded table data about tasty treats. You can copy and modify these methods to show what you want. The section description and all of the table data can be in one method, or if it is easier to break things up you can have a method for each table, and then call it from the method that makes the section. in this case.   template_tables   OsLib_Reporting.template_table(model,sqlFile,runner)  adds in a table defined elsewhere. The code for a sample section method and table method are shown below.    # create template section\n  def OsLib_Reporting.template_section(model,sqlFile,runner,name_only = false)\n\n    # array to hold tables\n    template_tables = []\n\n    # gather data for section\n    @template_section = {}\n    @template_section[:title] = 'Tasty Treats'\n    @template_section[:tables] = template_tables\n\n    # stop here if only name is requested this is used to populate display name for arguments\n    if name_only == true\n      return @template_section\n    end\n\n    # notes:\n    # The data below would typically come from the model or simulation results\n    # You can loop through objects to make a table for each item of that type, such as air loops\n    # If a section will only have one table you can leave the table title blank and just rely on the section title\n    # these will be updated later to support graphs\n\n    # create table\n    template_table_01= {}\n    template_table_01[:title] = 'Fruit'\n    template_table_01[:header] = ['Definition','Value']\n    template_table_01[:units] = ['','$/pound']\n    template_table_01[:data] = []\n\n    # add rows to table\n    template_table_01[:data]   ['Banana',0.23]\n    template_table_01[:data]   ['Apple',0.75]\n    template_table_01[:data]   ['Orange',0.50]\n\n    # add table to array of tables\n    template_tables   template_table_01\n\n    # using helper method that generates table for second example\n    template_tables   OsLib_Reporting.template_table(model,sqlFile,runner)\n\n    return @template_section\n\n  end\n\n  # create template section\n  def OsLib_Reporting.template_table(model,sqlFile,runner)\n\n    # create a second table\n    template_table = {}\n    template_table[:title] = 'Ice Cream'\n    template_table[:header] = ['Definition','Base Flavor','Toppings','Value']\n    template_table[:units] = ['','','','scoop']\n    template_table[:data] = []\n\n    # add rows to table\n    template_table[:data]   ['Vanilla','Vanilla','NA',1.5]\n    template_table[:data]   ['Rocky Road','Chocolate','Nuts',1.5]\n    template_table[:data]   ['Mint Chip','Mint','Chocolate Chips',1.5]\n\n    return template_table\n\n  end  This example doesn't discuss charts, but you can look at other methods to learn how to add charts. It looks something like this       output_data_space_type_breakdown[:chart_type] = 'simple_pie'\n     output_data_space_type_breakdown[:chart] = []\n\n     # data for graph\n     output_data_space_type_breakdown[:chart]   JSON.generate({:label = display,:value =  value, :color =  color})  Once you have defined your need to tell the measure to use the new section method. For this last step you need to add a line to the possible_sections method of the measure.rb file. In this example I added  result   \"template_section\"  to the top of the table of contents.    def possible_sections\n    result = []\n\n    # methods for sections in order that they will appear in report\n    result    template_section \n    result    building_summary_section \n    result    annual_overview_section \n    result    monthly_overview_section \n    result    utility_bills_rates_section \n    result    envelope_section_section \n    result    space_type_breakdown_section \n    result    space_type_details_section \n\n    # removed other sections from code example to make it shorter\n\n    return result\n  end  Adding that line of code will not only add the new section to the arguments for the measure, but will also call the method in the run method of the measure to gather the data and generate an HTML table. If you don't want to extend the os_lib_reporting.rb file, you can create your own version that functions in the same way, but only has code for sections you are using. You just need to modify this line at the top of the \"measure.rb\" file to point to your library  require \"#{File.dirname(__FILE__)}/resources/os_lib_reporting\" . Below is a screenshot of the resting Tasty Treats section. If you want to change the title in the HTML file it is in this code in the \"report.html.erb\" file in the \"resources\" directory  title OpenStudio Results /title .   Above: Example section with two tables.  You can write completely custom measure reports that don't look anything like this, and use different html and charting technologies. This framework is just provided as a way to make reports where all you want to worry about is how to get the data you want to see, and not how to generate the HTML code.", 
            "title": "Developing Your Own Reporting Measures"
        }, 
        {
            "location": "/help/training/", 
            "text": "Training, Support, and Consulting\n\n\n\nBelow are companies and universities that are licensed OpenStudio training and support organizations. Licensed commercial organizations have been trained directly by the OpenStudio development team and have access to NREL's training material. For information on becoming a licensed training organization please see the \nRFP summary\n.\n\n\nCommercial Organizations\n\n\nBig Ladder Software\n - Denver, CO\n\n\nContact: \nPeter Ellis\n\n\nBig Ladder Software is dedicated to providing software and services for the building energy modeling industry. The company provides training, support, software development, and consulting services for OpenStudio and EnergyPlus to mechanical, architectural, and design engineering firms across the US. With a unique combination of expertise in building science, computer simulation, and programming, Big Ladder has experienced steady growth and achieved significant success and recognition in the industry.\n\n\nBig Ladder offers in-person public and private (in-house) training workshops for OpenStudio and EnergyPlus. The Big Ladder team has trained scores of new users in the intricacies of energy modeling software in workshops at US and international locations. The company also offers hourly support services by phone and email. Support includes advising on best practices for modeling, helping with writing OpenStudio \u201cmeasures\u201d, helping with the implementation of difficult HVAC systems or controls, debugging stubborn errors, checking models for correctness and quality assurance, and assistance with auxiliary software tools. As part of the EnergyPlus Development Team, Big Ladder provides deep insight into the simulation engine \"under the hood\" of OpenStudio.\n\n\nPerformance Systems Development\n - Ithaca, NY\n\n\nContact: \nChris Balbach\n\n\nPerformance Systems Development (PSD) is a 15 year old technology enabled consulting firm that provides training, consulting, software enabled solution design, and implementation support to utilities, efficiency program implementers, energy service professionals, and building portfolio owners. PSD's clients include some of the largest utilities and efficiency program implementers in country. PSD staff have deep subject matter expertise, offer industry leadership and support key efficiency enabling standards in building science, energy simulation, measurement\n verification, evaluation and energy efficiency data management. PSD is highly regarded for efficiency industry professional workforce development and delivers third party certification training on a range of topics. PSD's program implementation team supports market transforming efficiency program design and cost effective implementation and are responsible for industry changing program models that leverage market investments and drive investment in building performance.\n\n\nUniversities\n\n\nThe City College of New York\n - New York, NY\n\n\nContact: \nNicholas Madamopulos\n\n\nThe City College of New York (CCNY), founded in 1847, is a flagship college of The City University of New York (CUNY) system. CCNY is a comprehensive teaching, research, and service institution dedicated to accessibility and excellence in undergraduate and graduate education. CCNY offers a wide range of degrees related to engineering, architecture and science with focus on energy, sustainability and the environment. The Grove School of Engineering is active in Research and Training of graduate and undergraduate students. The Grove School of Engineering and The Bernard and Anne Spitzer School of Architecture offer a graduate program in \"Sustainability in the Urban Environment\"?. The program offers an interdisciplinary MS in Sustainability with two concentrations: an Architecture concentration suitable for students with backgrounds in architecture; and an Engineering-Science concentration appropriate for engineering or science majors. The overall aim of the program is to develop a workforce with the knowledge and skills that 21st century workplaces will increasingly demand, i.e., to enable them to be innovative and flexible contributors to sustainability solutions.\n\n\nAs New York City's only public university, CUNY has a special role to play in helping to meet the city's needs. The Building Performance Lab-CUNY, is ideally positioned and equipped to serve as a catalyst for change. Through collaborations with other parties, the BP lab works to accelerate market transformation in the buildings sector. The Lab's multi-track approach also includes stimulating applied research, promoting technology transfer, and conducting outreach to the real estate sector to raise awareness of sustainability goals and how they can be achieved. One focus of our work is greening existing commercial properties by promoting advanced building system technologies and best practices that reduce energy use and improve indoor environmental conditions and waste management practices. Greater tenant satisfaction is one result.A crucial best practice is the monitoring and verification that ensure that, once achieved, optimum building performance is maintained. Another focus of our work is long-term workforce development, which we pursue through curriculum development, internships, and other technology training.\n\n\nThe University of Colorado\n - Boulder, CO\n\n\nContact: \nGregor P. Henze, Ph.D., P.E.\n\n\nArchitectural engineering is a long-established engineering degree program in the College of Engineering and Applied Science at the University of Colorado Boulder: Architectural engineering was established in 1925, awarded its first degree in 1929, and has been continuously accredited since 1936, along with dedicated graduate degree programs. Our CEAE department is ranked 20th overall and 14th among public graduate programs in 141 universities surveyed by U.S. News and World Report. The National Research Council gave the department an overall ranking of 7 in the civil engineering field, and in the top 5% of research doctorate programs in the nation. Moreover, the University of Colorado is ranked 25th among US universities and 34th in the \nShanghai ranking\n of the world\u2019s best 500 universities.\n\n\nThe University of Colorado offers BS, MS, and PhD in architectural engineering. While the architectural engineering graduate degrees have only be offered since 2012, the Building Systems Engineering group has been producing MS and PhD graduates through the CEAE department for over 30 years. Graduates from the program work in both the public and private sectors in the broad areas of building energy systems, including academic positions at universities around the world, researchers at national laboratories, and designers and analysis in the building industry.\n\n\nAt the graduate level, the \nBuilding System Engineering group\n seeks to improve the sustainability and effectiveness of buildings. Research areas include the design, modeling, and analysis of integrated building energy systems, renewable energy technologies, sustainable materials for buildings, indoor environmental quality, grid-integration and model predictive control for building energy systems, and innovative HVAC and illumination technologies. The program includes seven faculty members with backgrounds in mechanical engineering, architecture, illumination engineering, sustainable materials, acoustics and renewable energy engineering. We offer three degree specializations align within our research area: Sustainable building design and operation, renewable energy systems for buildings, and illumination engineering.\n\n\nTraining in OpenStudio and EnergyPlus is provided in the context of graduate classes on building energy simulation and sustainable building design.\n\n\nThe University of Texas at Tyler\n - Tyler, TX\n\n\nContact: \nNelson Fumo, Ph.D.\n\n\nThe University of Texas at Tyler Department of Mechanical Engineering provides engineering education needed for the development of a professional career in a variety of industrial and business operations, from large corporations and government organizations to small consulting firms. OpenStudio is taught in the technical elective course Introduction to Building Energy Simulation.", 
            "title": "Find Training"
        }, 
        {
            "location": "/help/training/#commercial-organizations", 
            "text": "", 
            "title": "Commercial Organizations"
        }, 
        {
            "location": "/help/training/#big-ladder-software-denver-co", 
            "text": "", 
            "title": "Big Ladder Software - Denver, CO"
        }, 
        {
            "location": "/help/training/#contact-peter-ellis", 
            "text": "Big Ladder Software is dedicated to providing software and services for the building energy modeling industry. The company provides training, support, software development, and consulting services for OpenStudio and EnergyPlus to mechanical, architectural, and design engineering firms across the US. With a unique combination of expertise in building science, computer simulation, and programming, Big Ladder has experienced steady growth and achieved significant success and recognition in the industry.  Big Ladder offers in-person public and private (in-house) training workshops for OpenStudio and EnergyPlus. The Big Ladder team has trained scores of new users in the intricacies of energy modeling software in workshops at US and international locations. The company also offers hourly support services by phone and email. Support includes advising on best practices for modeling, helping with writing OpenStudio \u201cmeasures\u201d, helping with the implementation of difficult HVAC systems or controls, debugging stubborn errors, checking models for correctness and quality assurance, and assistance with auxiliary software tools. As part of the EnergyPlus Development Team, Big Ladder provides deep insight into the simulation engine \"under the hood\" of OpenStudio.", 
            "title": "Contact: Peter Ellis"
        }, 
        {
            "location": "/help/training/#performance-systems-development-ithaca-ny", 
            "text": "", 
            "title": "Performance Systems Development - Ithaca, NY"
        }, 
        {
            "location": "/help/training/#contact-chris-balbach", 
            "text": "Performance Systems Development (PSD) is a 15 year old technology enabled consulting firm that provides training, consulting, software enabled solution design, and implementation support to utilities, efficiency program implementers, energy service professionals, and building portfolio owners. PSD's clients include some of the largest utilities and efficiency program implementers in country. PSD staff have deep subject matter expertise, offer industry leadership and support key efficiency enabling standards in building science, energy simulation, measurement  verification, evaluation and energy efficiency data management. PSD is highly regarded for efficiency industry professional workforce development and delivers third party certification training on a range of topics. PSD's program implementation team supports market transforming efficiency program design and cost effective implementation and are responsible for industry changing program models that leverage market investments and drive investment in building performance.", 
            "title": "Contact: Chris Balbach"
        }, 
        {
            "location": "/help/training/#universities", 
            "text": "", 
            "title": "Universities"
        }, 
        {
            "location": "/help/training/#the-city-college-of-new-york-new-york-ny", 
            "text": "", 
            "title": "The City College of New York - New York, NY"
        }, 
        {
            "location": "/help/training/#contact-nicholas-madamopulos", 
            "text": "The City College of New York (CCNY), founded in 1847, is a flagship college of The City University of New York (CUNY) system. CCNY is a comprehensive teaching, research, and service institution dedicated to accessibility and excellence in undergraduate and graduate education. CCNY offers a wide range of degrees related to engineering, architecture and science with focus on energy, sustainability and the environment. The Grove School of Engineering is active in Research and Training of graduate and undergraduate students. The Grove School of Engineering and The Bernard and Anne Spitzer School of Architecture offer a graduate program in \"Sustainability in the Urban Environment\"?. The program offers an interdisciplinary MS in Sustainability with two concentrations: an Architecture concentration suitable for students with backgrounds in architecture; and an Engineering-Science concentration appropriate for engineering or science majors. The overall aim of the program is to develop a workforce with the knowledge and skills that 21st century workplaces will increasingly demand, i.e., to enable them to be innovative and flexible contributors to sustainability solutions.  As New York City's only public university, CUNY has a special role to play in helping to meet the city's needs. The Building Performance Lab-CUNY, is ideally positioned and equipped to serve as a catalyst for change. Through collaborations with other parties, the BP lab works to accelerate market transformation in the buildings sector. The Lab's multi-track approach also includes stimulating applied research, promoting technology transfer, and conducting outreach to the real estate sector to raise awareness of sustainability goals and how they can be achieved. One focus of our work is greening existing commercial properties by promoting advanced building system technologies and best practices that reduce energy use and improve indoor environmental conditions and waste management practices. Greater tenant satisfaction is one result.A crucial best practice is the monitoring and verification that ensure that, once achieved, optimum building performance is maintained. Another focus of our work is long-term workforce development, which we pursue through curriculum development, internships, and other technology training.", 
            "title": "Contact: Nicholas Madamopulos"
        }, 
        {
            "location": "/help/training/#the-university-of-colorado-boulder-co", 
            "text": "", 
            "title": "The University of Colorado - Boulder, CO"
        }, 
        {
            "location": "/help/training/#contact-gregor-p-henze-phd-pe", 
            "text": "Architectural engineering is a long-established engineering degree program in the College of Engineering and Applied Science at the University of Colorado Boulder: Architectural engineering was established in 1925, awarded its first degree in 1929, and has been continuously accredited since 1936, along with dedicated graduate degree programs. Our CEAE department is ranked 20th overall and 14th among public graduate programs in 141 universities surveyed by U.S. News and World Report. The National Research Council gave the department an overall ranking of 7 in the civil engineering field, and in the top 5% of research doctorate programs in the nation. Moreover, the University of Colorado is ranked 25th among US universities and 34th in the  Shanghai ranking  of the world\u2019s best 500 universities.  The University of Colorado offers BS, MS, and PhD in architectural engineering. While the architectural engineering graduate degrees have only be offered since 2012, the Building Systems Engineering group has been producing MS and PhD graduates through the CEAE department for over 30 years. Graduates from the program work in both the public and private sectors in the broad areas of building energy systems, including academic positions at universities around the world, researchers at national laboratories, and designers and analysis in the building industry.  At the graduate level, the  Building System Engineering group  seeks to improve the sustainability and effectiveness of buildings. Research areas include the design, modeling, and analysis of integrated building energy systems, renewable energy technologies, sustainable materials for buildings, indoor environmental quality, grid-integration and model predictive control for building energy systems, and innovative HVAC and illumination technologies. The program includes seven faculty members with backgrounds in mechanical engineering, architecture, illumination engineering, sustainable materials, acoustics and renewable energy engineering. We offer three degree specializations align within our research area: Sustainable building design and operation, renewable energy systems for buildings, and illumination engineering.  Training in OpenStudio and EnergyPlus is provided in the context of graduate classes on building energy simulation and sustainable building design.", 
            "title": "Contact: Gregor P. Henze, Ph.D., P.E."
        }, 
        {
            "location": "/help/training/#the-university-of-texas-at-tyler-tyler-tx", 
            "text": "", 
            "title": "The University of Texas at Tyler - Tyler, TX"
        }, 
        {
            "location": "/help/training/#contact-nelson-fumo-phd", 
            "text": "The University of Texas at Tyler Department of Mechanical Engineering provides engineering education needed for the development of a professional career in a variety of industrial and business operations, from large corporations and government organizations to small consulting firms. OpenStudio is taught in the technical elective course Introduction to Building Energy Simulation.", 
            "title": "Contact: Nelson Fumo, Ph.D."
        }, 
        {
            "location": "/help/finding_model_data/", 
            "text": "Finding Model Data\n\n\n\nGood inputs are critical to getting good results from energy modeling. This page provides a list of resources that might be helpful in determining inputs.\n\n\nOpenStudio Building Type Templates\n\n\nThe New OpenStudio Model From Template tool is represented by this icon in the toolbar: \n. Templates contain data for constructions, loads, and schedules for four vintages across all U.S. climate zones. Templates do not contain any geometry.\n\n\n\n\n\nAbove: This video shows you how to choose a template before setting up your model.\n\n\n\n\nAbove: Dialog to choose template.\n\n\nVintages:\n\n\n\n\nDOE Ref Pre-1980\n\n\nDOE Ref 1980-2004\n\n\nDOE Ref 2004\n\n\n189.1-2009\n\n\n90.1-2007\n\n\n\n\nClimate Zones: 1 - 8\n\n\n\n\nBuilding Component Library (BCL)\n\n\nFind Measures and Find Components\n\n\nAn online source of building energy modeling data:\n\n\n\n\nEnables drag-and-drop modeling for quick technology evaluation\n\n\nProvides consistent, detailed inputs to drive decision-making\n\n\nSearchable and readily available within applications\n\n\n\n\nThe BCL window gives you access to an online repository of building energy modeling data and scripts called the \nBuilding Component Library\n. Although you can access the BCL website on its own, OpenStudio has integrated access to the BCL from within the application. You can access this through the \"Window\" menu.\n\n\nYou will be prompted for an API key the first time you open this window, unless you have already used BCL functionality in the SketchUp Plug-in. \nInstructions for finding your API Key\n are in the \"Getting Started\" section.\n\n\n\n\nAbove: This window gives you access to the online BCL to download measures or components.", 
            "title": "Finding Model Data"
        }, 
        {
            "location": "/help/finding_model_data/#openstudio-building-type-templates", 
            "text": "The New OpenStudio Model From Template tool is represented by this icon in the toolbar:  . Templates contain data for constructions, loads, and schedules for four vintages across all U.S. climate zones. Templates do not contain any geometry.   Above: This video shows you how to choose a template before setting up your model.   Above: Dialog to choose template.  Vintages:   DOE Ref Pre-1980  DOE Ref 1980-2004  DOE Ref 2004  189.1-2009  90.1-2007   Climate Zones: 1 - 8", 
            "title": "OpenStudio Building Type Templates"
        }, 
        {
            "location": "/help/finding_model_data/#building-component-library-bcl", 
            "text": "", 
            "title": "Building Component Library (BCL)"
        }, 
        {
            "location": "/help/finding_model_data/#find-measures-and-find-components", 
            "text": "An online source of building energy modeling data:   Enables drag-and-drop modeling for quick technology evaluation  Provides consistent, detailed inputs to drive decision-making  Searchable and readily available within applications   The BCL window gives you access to an online repository of building energy modeling data and scripts called the  Building Component Library . Although you can access the BCL website on its own, OpenStudio has integrated access to the BCL from within the application. You can access this through the \"Window\" menu.  You will be prompted for an API key the first time you open this window, unless you have already used BCL functionality in the SketchUp Plug-in.  Instructions for finding your API Key  are in the \"Getting Started\" section.   Above: This window gives you access to the online BCL to download measures or components.", 
            "title": "Find Measures and Find Components"
        }, 
        {
            "location": "/help/best_practices/", 
            "text": "Modeling Best Practices\n\n\n\nThis page is a collection of best practices that have been developed over time and by experience. Following these best practices will help you avoid the issues that users experience most often.\n\n\nGeneral\n\n\n\n\nSave your model often and with different versions.\n Save multiple versions of your OpenStudio Model as you progress; this makes it easier to recover from an error and provides takeoff points for model variations.\n\n\nEnergyPlus is a detailed simulation engine, but you have to tell it how you want your building modeled. A common misunderstanding is that EnergyPlus will interpret \"voids\" between zones \"correctly.\" EnergyPlus does not compute heat transfer between zones if they do not share a surface, so you must input the shared surfaces and set appropriate boundary conditions. To correctly model air transfer between zones, you have to add input objects that describe the airflow between zones. To model daylight transmission between zones, you need to add interior windows. Just because a building looks right, does not mean it is modeled correctly; digging in to the IDF and looking at detailed results is the only way to determine that you have modeled your building correctly.\n\n\nWhen you import an IDF into OpenStudio, it may be altered as part of the import process. For example, if your windows are not in the same plane as their base surface, OpenStudio moves them into the base surface plane. There may be other changes as well. If you want to keep your raw IDF untouched, you should \"SaveAs\", either as soon as you import it, or before you import it.\nTo rename objects, go to the OpenStudio Inspector. Do not alter the names in SketchUp's Entity Information dialog.\n\n\nThe OpenStudio Inspector works on one object at a time. If you select multiple objects or surfaces and make a change, it will affect only one object.\n\n\n\n\nGuidelines for Spaces\n\n\n\n\nSpaces should be top-level objects. Do not combine multiple spaces into a group or component, or put a space under another group.\n\n\nName your spaces to make large models easier to manage and search. You may want to name your surfaces and subsurfaces.\n\n\nGeometry within a space should be convex.\n\n\nIdeally, spaces, not just space surfaces, are also convex.\n\n\nAfter creating a new space or shading group, double-click the group to edit it. The Outliner or a keyboard shortcut can also be used to edit a zone, shading group, or interior partition group.\n\n\n\n\nGuidelines for Building Surfaces\n\n\n\n\nDo not group a selection of EnergyPlus surfaces or subsurfaces together. All surfaces under a zone should be ungrouped.\n\n\nModel exterior walls to the outside face of the wall.\n\n\nDraw interior walls to their centerlines if possible. You may, however, choose any edge, as long as you are consistent with adjacent zones. Surfaces for adjacent zones must not overlap each other.\n\n\nDivide a surface into two by drawing a line across the face.\n\n\nTry to avoid deleting a surface by erasing a shared edge with another surface. This does not update the subsurfaces of the deleted surface to point to the new base surface. If this becomes necessary, you can delete one edge of the subsurface to remove it and then redraw the edge to create a new subsurface assigned to the correct surface.\n\n\nAs much as possible, you should avoid using curves (arcs or circles) to create your geometry. Curves and arcs will create faceted surfaces and increase simulation time. If you do use curves, set the segment count as low as possible. Before you extrude a curve in SketchUp, you can select it and right click to view the \"Entity Information\" window. There you can change the number of segments. If you want to make changes to curves via the Object Information window, you have to \"View Hidden Geometry\" to select individual facets. You cannot globally change the whole curve at once.\n\n\n\n\nGuidelines for Subsurfaces\n\n\n\n\nDo not place a subsurface (window or door) inside another subsurface.\n\n\nDo not place two subsurfaces against each other. Place a small space between them.\n\n\nDo not make a window the size of an entire base surface. Use SketchUp's Offset Tool to inset the sub-surface some nominal amount.\n\n\nDo not draw a subsurface that shares two edges with a base surface. This will create a new base surface. You can draw a window at the edge of wall, but not at the edge as well as the roof or floor.\n\n\nDelete a subsurface by either removing all the edges (one at a time) or by double-clicking to select the face and edges and then deleting. Do not delete the face only, as this leaves a visual hole in the base surface.\n\n\n\n\nGuidelines for Interior Partition Surfaces\n\n\nBy default interior partition surfaces are included and converted to internal mass objects for EnergyPlus simulation. Adding a large number of interior partitions surfaces will increase your simulation runtime. If this is a concern, you can model similar internal mass objects within a space as a single larger object.\n\n\nGuidelines for Shading Surfaces\n\n\n\n\nShading surfaces need to be drawn in their own group. This group can be outside or inside a zone. This is a change in behavior from previous versions where shading surfaces could be created as loose geometry in an EnergyPlus zone.\n\n\nBy default EnergyPlus mirrors shading surfaces, so typically face orientation does not matter. In some cases, however, such as when you add PV to a shading surface, it must be oriented correctly. As with building surfaces, the darker side is the outward normal.", 
            "title": "Modeling Best Practices"
        }, 
        {
            "location": "/help/best_practices/#general", 
            "text": "Save your model often and with different versions.  Save multiple versions of your OpenStudio Model as you progress; this makes it easier to recover from an error and provides takeoff points for model variations.  EnergyPlus is a detailed simulation engine, but you have to tell it how you want your building modeled. A common misunderstanding is that EnergyPlus will interpret \"voids\" between zones \"correctly.\" EnergyPlus does not compute heat transfer between zones if they do not share a surface, so you must input the shared surfaces and set appropriate boundary conditions. To correctly model air transfer between zones, you have to add input objects that describe the airflow between zones. To model daylight transmission between zones, you need to add interior windows. Just because a building looks right, does not mean it is modeled correctly; digging in to the IDF and looking at detailed results is the only way to determine that you have modeled your building correctly.  When you import an IDF into OpenStudio, it may be altered as part of the import process. For example, if your windows are not in the same plane as their base surface, OpenStudio moves them into the base surface plane. There may be other changes as well. If you want to keep your raw IDF untouched, you should \"SaveAs\", either as soon as you import it, or before you import it.\nTo rename objects, go to the OpenStudio Inspector. Do not alter the names in SketchUp's Entity Information dialog.  The OpenStudio Inspector works on one object at a time. If you select multiple objects or surfaces and make a change, it will affect only one object.", 
            "title": "General"
        }, 
        {
            "location": "/help/best_practices/#guidelines-for-spaces", 
            "text": "Spaces should be top-level objects. Do not combine multiple spaces into a group or component, or put a space under another group.  Name your spaces to make large models easier to manage and search. You may want to name your surfaces and subsurfaces.  Geometry within a space should be convex.  Ideally, spaces, not just space surfaces, are also convex.  After creating a new space or shading group, double-click the group to edit it. The Outliner or a keyboard shortcut can also be used to edit a zone, shading group, or interior partition group.", 
            "title": "Guidelines for Spaces"
        }, 
        {
            "location": "/help/best_practices/#guidelines-for-building-surfaces", 
            "text": "Do not group a selection of EnergyPlus surfaces or subsurfaces together. All surfaces under a zone should be ungrouped.  Model exterior walls to the outside face of the wall.  Draw interior walls to their centerlines if possible. You may, however, choose any edge, as long as you are consistent with adjacent zones. Surfaces for adjacent zones must not overlap each other.  Divide a surface into two by drawing a line across the face.  Try to avoid deleting a surface by erasing a shared edge with another surface. This does not update the subsurfaces of the deleted surface to point to the new base surface. If this becomes necessary, you can delete one edge of the subsurface to remove it and then redraw the edge to create a new subsurface assigned to the correct surface.  As much as possible, you should avoid using curves (arcs or circles) to create your geometry. Curves and arcs will create faceted surfaces and increase simulation time. If you do use curves, set the segment count as low as possible. Before you extrude a curve in SketchUp, you can select it and right click to view the \"Entity Information\" window. There you can change the number of segments. If you want to make changes to curves via the Object Information window, you have to \"View Hidden Geometry\" to select individual facets. You cannot globally change the whole curve at once.", 
            "title": "Guidelines for Building Surfaces"
        }, 
        {
            "location": "/help/best_practices/#guidelines-for-subsurfaces", 
            "text": "Do not place a subsurface (window or door) inside another subsurface.  Do not place two subsurfaces against each other. Place a small space between them.  Do not make a window the size of an entire base surface. Use SketchUp's Offset Tool to inset the sub-surface some nominal amount.  Do not draw a subsurface that shares two edges with a base surface. This will create a new base surface. You can draw a window at the edge of wall, but not at the edge as well as the roof or floor.  Delete a subsurface by either removing all the edges (one at a time) or by double-clicking to select the face and edges and then deleting. Do not delete the face only, as this leaves a visual hole in the base surface.", 
            "title": "Guidelines for Subsurfaces"
        }, 
        {
            "location": "/help/best_practices/#guidelines-for-interior-partition-surfaces", 
            "text": "By default interior partition surfaces are included and converted to internal mass objects for EnergyPlus simulation. Adding a large number of interior partitions surfaces will increase your simulation runtime. If this is a concern, you can model similar internal mass objects within a space as a single larger object.", 
            "title": "Guidelines for Interior Partition Surfaces"
        }, 
        {
            "location": "/help/best_practices/#guidelines-for-shading-surfaces", 
            "text": "Shading surfaces need to be drawn in their own group. This group can be outside or inside a zone. This is a change in behavior from previous versions where shading surfaces could be created as loose geometry in an EnergyPlus zone.  By default EnergyPlus mirrors shading surfaces, so typically face orientation does not matter. In some cases, however, such as when you add PV to a shading surface, it must be oriented correctly. As with building surfaces, the darker side is the outward normal.", 
            "title": "Guidelines for Shading Surfaces"
        }, 
        {
            "location": "/help/troubleshooting/", 
            "text": "Troubleshooting\n\n\n\nThis page is a collection of troubleshooting advice that helps users deal with common issues.\n\n\n\n\nOpenStudio Plug-in does not load when SketchUp starts\n\n\nEnsure that the architecture of your installation of SketchUp (32 or 64 bit) matches the architecture of OpenStudio.  Try opening the Window-\nPreferences-\nExtensions window in SketchUp, enable the OpenStudio plug-in if it is listed.  If OpenStudio is not listed you may have to manually install it (this is the case if you are using a different version of SketchUp than the OpenStudio installer targets).  To install OpenStudio manually please copy the files in:\n\n\nC:\\Program Files (x86)\\OpenStudio %VERSION%\\Ruby\\Plugins\n\n\n\nor \n\n\nC:\\Program Files\\OpenStudio %VERSION%\\Ruby\\Plugins\n\n\n\nto:\n\n\nC:\\Users\\%YOURUSERNAME%\\AppData\\Roaming\\SketchUp\\SketchUp %VERSION%\\SketchUp\\Plugins\n\n\n\nwhere %YOURUSERNAME% is replaced by your user name and %VERSION% is the version of the software you are using.\n\n\n\n\nModel Will Not Open in SketchUp Plug-in\n\n\nIf you have an OSM file that will not open, or opens incorrectly in the SketchUp Plug-in then running the user script linked in this thread can help identify the problem objects and create a new diagnostic copy of your file. This script creates a report identifying problem objects, and saves a new copy of your file leaving the original untouched. This script is installed with 0.6.2 or later, but you can manually download this file and use it with 0.6.0 or later. Some reasons you may need to run this script include:\n\n\n\n\nTrying to open an OSM file created from an outdated beta version of OpenStudio\n\n\nThrough some form of editing, conflicting objects exist in the model that prevent it from opening correctly\n\n\nHand-editing of the file results in invalid objects or objects missing necessary data\n\n\nOther forms of file corruption\n\n\n\n\nWhatever the cause, this should help identify and fix the problems. You may have to do some repair or cleanup work on the resulting file, as some objects may be deleted.\n\n\nTo install user scripts, drop them in the following subdirectory of your OpenStudio installation and re-start SketchUp. Currently you can't nest them deeper than the user_scripts folder. They must be loose files in that directory for the OpenStudio SketchUp Plug-in to add them to the me\n\n\nTo install user scripts, drop them in the following subdirectory of your OpenStudio installation and re-start SketchUp. You cannot currently nest them deeper than the user_scripts folder. They must be loose files in that directory for the OpenStudio SketchUp Plug-in to add them to the menu.\n\n\nOpenStudio 1.5.0\\Ruby\\openstudio\\sketchup_plugin\\user_scripts\n\n\nTo run the script, go to the \"User Scripts\" menu under the SketchUp Plugins menu, \"Plugins / OpenStudio\" menu and choose \"OSM Diagnostic Script\".\n\n\nRight click on the link below and save to your computer vs. opening in web browser:\n\nOSM_Diagonstic_Script.rb\n\n\n\n\nModel Will Not Run\n\n\nSome of the reasons simulation errors occur are:\n\n\n\n\nEnergyPlus is not installed. You must have EnergyPlus installed to run a simulation.\n\n\nThe version of EnergyPlus you are using is not compatible with the version of OpenStudio you are using. Check under the menu Preferences/Scan for tools to see what version of EnergyPlus you are using.\n\n\nIf the weather file has not been set, the simulation will fail.\n\n\nDesign days or sizing are required if you are simulating a full HVAC system instead of using idea air loads.\n\n\n\n\nIf you are in the OpenStudio application, the image below shows you how to get access to the \"eplusout.err\" file that lists the EnergyPlus errors. You can view it with a text editor.\n\n\n\n\nIf you are in PAT, you should be able to expand the view in the run tab to see errors and warnings at any stage. If errors do not show up in the run tab, there may be an issue with the weather or DDY files. See the image below.\n\n\n\n\n\n\nOrphan Objects and Unused Resources\n\n\nAt times some objects in OpenStudio that should have a parent, such as surfaces and internal load instances, may become detached from their parent. Possibly the parent is deleted but for some reason the child is not. These often are not visible in the GUI, and while it is possible to fix remove these orphans with a text editor it isn't ideal. To provide a better workflow for this we created a measure \nRemove Orphan Objects and Unused Resources\n that can be run either using Apply Measure Now or at run time. If you see an EnergyPlus error about an object you don't think you have in your model, you may try running this to clean up the model. Additionally this measure also provides checkboxes that allow you to remove unused resources. While unused resources can be cleaned up in the GUI, the measure provides a robust and quick way to do this. Over time we will increase the functionality of the orphan cleanup as well as purging of unused resources. \n\n\nBelow is a screenshot of what the measure looks like in the apply measure now window. By default the remove unused objects boxes are un-checked. You will always get the remove orphan functionality. \n\n\n\n\nBelow is a screenshot of the log after running the measure. The log will list each section being checked, so as the functionality is expanded you will know what object types are being checked for for orphan.\n\n\n\n\n\n\nSketchUp crashes on launch\n\n\nThe first thing to do is to remove SketchUp and install it again. To do this, run the SketchUp uninstaller. Also check that all OpenStudio plugins are removed from the SketchUp plugin directories. On Windows these directories are:\n\n\n\n\nC:\\Users\\\nyour username\n\\AppData\\Roaming\\SketchUp\\SketchUp 2015\\SketchUp\\Plugins\n\n\nC:\\ProgramData\\SketchUp\\SketchUp 2015\\SketchUp\\Plugins\n\n\nC:\\Program Files (x86)\\SketchUp\\SketchUp 2015\\SketchUp\\Plugins\n\n\n\n\nOn Mac these are:\n\n\n\n\n/Users/\nyour username\n/Library/Application Support/SketchUp 2015/SketchUp/Plugins\n\n\n/Library/Application Support/SketchUp 2015/SketchUp/Plugins\n\n\n\n\nIf SketchUp crashes without the OpenStudio plugins installed then something else is wrong, contact the SketchUp support team for help. If SketchUp launches, try installing OpenStudio again. If SketchUp crashes on launch again, remove the OpenStudio files from the SketchUp plugin directories again. Open SketchUp, go to Window-\nPreferences-\nExtensions and disable the OpenStudio plugin. Re-install OpenStudio and relaunch SketchUp. Open the Ruby console by going to Window-\nRuby Console and then go back to Window-\nPreferences-\nExtensions and enable the OpenStudio plugin, you may see useful output in the Ruby console. If you have other extensions installed, try disabling them and enabling the OpenStudio plugin.\n\n\nIf none of the steps above work and you are on Windows, it is likely that there is a dynamic library being loaded from another application that is interfering with OpenStudio. If you just want to fix your problem, try copying the files libeay32.dll and ssleay32.dll from C:\\Program Files (x86)\\OpenStudio X.X.X\\bin to C:\\Program Files (x86)\\SketchUp\\SketchUp 2015, this will fix the problem 80% of the time.\n\n\nIf you want to investigate in more depth, download \nDependency Walker\n. Extract the files and launch depends.exe. Navigate to File-\nOpen and then browse to choose the SketchUp.exe under C:\\Program Files (x86)\\SketchUp\\SketchUp 2015. This will examine all of the libraries loaded by SketchUp but not the libraries loaded by OpenStudio. Navigate to Profile-\nStart Profiling then press Ok in the dialog that pops up. This will launch SketchUp and attempt to load OpenStudio. Scroll down in the list of loaded libraries and look for the OpenStudio dlls. Expand the paths under the OpenStudio dlls and look for libraries that are being loaded from other locations. Often, some other program will install a different version of one of the libraries (usually libeay32.dll or ssleay32.dll) that OpenStudio uses. This other library will be in the path ahead of OpenStudio and will be loaded instead, this results in a hard crash of SketchUp. Correcting your path or copying the dlls from the OpenStudio bin directory into the SketchUp install directory will cause the correct dlls to be loaded when SketchUp starts.\n\n\n\n\nUnable to Communicate with Amazon Cloud from Command Prompt Using the \"bundle\" Command\n\n\nThis issue is typically a communication error between you and RubyGems.org. A few things to check:\n\n\n\n\nAre you behind a proxy? If so, then check if the proxy is applied system wide or just for your web browsers. It is typically easiest to open up your favorite browser and check the settings.\n\n\nAre there any website restrictions at your location? If so, then it is possible that your IT department is blocking access. Note that RubyGems is only the first hurdle, you will also need access to AWS (meaning Amazon).\n\n\n\n\nIf you think that the above is happening, then it is best to talk to your IT department and explain the situation. The general explanation for the \"situation\" is that you are trying to run a large number of simulations using Amazon Web Services. Some good questions may be:\n\n\n\n\nHow can I access the internet through a command line (or terminal) using our company's proxy?\n\n\nWhen I ping aws.amazon.com, it times out; is there something that may be restricting access to the site?\n\n\nCan we set the proxy to be machine wide, instead of just on the web browsers?\n\n\n\n\n\n\n\n\n\n\n\n\nEnergy Modeling Forum\n\n\nPost your questions to the forum below for energy modeling information.\n\n\nUnmet Hours\n\n\n\n\nSubmit a Bug\n\n\nPlease let us know if you find a bug in the OpenStudio software.\n\n\nSubmit a Bug\n\n\n\n\nUseful SketchUp Links\n\n\n\n\nSketchUp's On-Line Help\n\n\nForum for SketchUp\n\n\nGoogle's user forum for SketchUp\n\n\nSketchUcation's SketchUp forum", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/help/troubleshooting/#openstudio-plug-in-does-not-load-when-sketchup-starts", 
            "text": "Ensure that the architecture of your installation of SketchUp (32 or 64 bit) matches the architecture of OpenStudio.  Try opening the Window- Preferences- Extensions window in SketchUp, enable the OpenStudio plug-in if it is listed.  If OpenStudio is not listed you may have to manually install it (this is the case if you are using a different version of SketchUp than the OpenStudio installer targets).  To install OpenStudio manually please copy the files in:  C:\\Program Files (x86)\\OpenStudio %VERSION%\\Ruby\\Plugins  or   C:\\Program Files\\OpenStudio %VERSION%\\Ruby\\Plugins  to:  C:\\Users\\%YOURUSERNAME%\\AppData\\Roaming\\SketchUp\\SketchUp %VERSION%\\SketchUp\\Plugins  where %YOURUSERNAME% is replaced by your user name and %VERSION% is the version of the software you are using.", 
            "title": "OpenStudio Plug-in does not load when SketchUp starts"
        }, 
        {
            "location": "/help/troubleshooting/#model-will-not-open-in-sketchup-plug-in", 
            "text": "If you have an OSM file that will not open, or opens incorrectly in the SketchUp Plug-in then running the user script linked in this thread can help identify the problem objects and create a new diagnostic copy of your file. This script creates a report identifying problem objects, and saves a new copy of your file leaving the original untouched. This script is installed with 0.6.2 or later, but you can manually download this file and use it with 0.6.0 or later. Some reasons you may need to run this script include:   Trying to open an OSM file created from an outdated beta version of OpenStudio  Through some form of editing, conflicting objects exist in the model that prevent it from opening correctly  Hand-editing of the file results in invalid objects or objects missing necessary data  Other forms of file corruption   Whatever the cause, this should help identify and fix the problems. You may have to do some repair or cleanup work on the resulting file, as some objects may be deleted.  To install user scripts, drop them in the following subdirectory of your OpenStudio installation and re-start SketchUp. Currently you can't nest them deeper than the user_scripts folder. They must be loose files in that directory for the OpenStudio SketchUp Plug-in to add them to the me  To install user scripts, drop them in the following subdirectory of your OpenStudio installation and re-start SketchUp. You cannot currently nest them deeper than the user_scripts folder. They must be loose files in that directory for the OpenStudio SketchUp Plug-in to add them to the menu.  OpenStudio 1.5.0\\Ruby\\openstudio\\sketchup_plugin\\user_scripts  To run the script, go to the \"User Scripts\" menu under the SketchUp Plugins menu, \"Plugins / OpenStudio\" menu and choose \"OSM Diagnostic Script\".  Right click on the link below and save to your computer vs. opening in web browser: OSM_Diagonstic_Script.rb", 
            "title": "Model Will Not Open in SketchUp Plug-in"
        }, 
        {
            "location": "/help/troubleshooting/#model-will-not-run", 
            "text": "Some of the reasons simulation errors occur are:   EnergyPlus is not installed. You must have EnergyPlus installed to run a simulation.  The version of EnergyPlus you are using is not compatible with the version of OpenStudio you are using. Check under the menu Preferences/Scan for tools to see what version of EnergyPlus you are using.  If the weather file has not been set, the simulation will fail.  Design days or sizing are required if you are simulating a full HVAC system instead of using idea air loads.   If you are in the OpenStudio application, the image below shows you how to get access to the \"eplusout.err\" file that lists the EnergyPlus errors. You can view it with a text editor.   If you are in PAT, you should be able to expand the view in the run tab to see errors and warnings at any stage. If errors do not show up in the run tab, there may be an issue with the weather or DDY files. See the image below.", 
            "title": "Model Will Not Run"
        }, 
        {
            "location": "/help/troubleshooting/#orphan-objects-and-unused-resources", 
            "text": "At times some objects in OpenStudio that should have a parent, such as surfaces and internal load instances, may become detached from their parent. Possibly the parent is deleted but for some reason the child is not. These often are not visible in the GUI, and while it is possible to fix remove these orphans with a text editor it isn't ideal. To provide a better workflow for this we created a measure  Remove Orphan Objects and Unused Resources  that can be run either using Apply Measure Now or at run time. If you see an EnergyPlus error about an object you don't think you have in your model, you may try running this to clean up the model. Additionally this measure also provides checkboxes that allow you to remove unused resources. While unused resources can be cleaned up in the GUI, the measure provides a robust and quick way to do this. Over time we will increase the functionality of the orphan cleanup as well as purging of unused resources.   Below is a screenshot of what the measure looks like in the apply measure now window. By default the remove unused objects boxes are un-checked. You will always get the remove orphan functionality.    Below is a screenshot of the log after running the measure. The log will list each section being checked, so as the functionality is expanded you will know what object types are being checked for for orphan.", 
            "title": "Orphan Objects and Unused Resources"
        }, 
        {
            "location": "/help/troubleshooting/#sketchup-crashes-on-launch", 
            "text": "The first thing to do is to remove SketchUp and install it again. To do this, run the SketchUp uninstaller. Also check that all OpenStudio plugins are removed from the SketchUp plugin directories. On Windows these directories are:   C:\\Users\\ your username \\AppData\\Roaming\\SketchUp\\SketchUp 2015\\SketchUp\\Plugins  C:\\ProgramData\\SketchUp\\SketchUp 2015\\SketchUp\\Plugins  C:\\Program Files (x86)\\SketchUp\\SketchUp 2015\\SketchUp\\Plugins   On Mac these are:   /Users/ your username /Library/Application Support/SketchUp 2015/SketchUp/Plugins  /Library/Application Support/SketchUp 2015/SketchUp/Plugins   If SketchUp crashes without the OpenStudio plugins installed then something else is wrong, contact the SketchUp support team for help. If SketchUp launches, try installing OpenStudio again. If SketchUp crashes on launch again, remove the OpenStudio files from the SketchUp plugin directories again. Open SketchUp, go to Window- Preferences- Extensions and disable the OpenStudio plugin. Re-install OpenStudio and relaunch SketchUp. Open the Ruby console by going to Window- Ruby Console and then go back to Window- Preferences- Extensions and enable the OpenStudio plugin, you may see useful output in the Ruby console. If you have other extensions installed, try disabling them and enabling the OpenStudio plugin.  If none of the steps above work and you are on Windows, it is likely that there is a dynamic library being loaded from another application that is interfering with OpenStudio. If you just want to fix your problem, try copying the files libeay32.dll and ssleay32.dll from C:\\Program Files (x86)\\OpenStudio X.X.X\\bin to C:\\Program Files (x86)\\SketchUp\\SketchUp 2015, this will fix the problem 80% of the time.  If you want to investigate in more depth, download  Dependency Walker . Extract the files and launch depends.exe. Navigate to File- Open and then browse to choose the SketchUp.exe under C:\\Program Files (x86)\\SketchUp\\SketchUp 2015. This will examine all of the libraries loaded by SketchUp but not the libraries loaded by OpenStudio. Navigate to Profile- Start Profiling then press Ok in the dialog that pops up. This will launch SketchUp and attempt to load OpenStudio. Scroll down in the list of loaded libraries and look for the OpenStudio dlls. Expand the paths under the OpenStudio dlls and look for libraries that are being loaded from other locations. Often, some other program will install a different version of one of the libraries (usually libeay32.dll or ssleay32.dll) that OpenStudio uses. This other library will be in the path ahead of OpenStudio and will be loaded instead, this results in a hard crash of SketchUp. Correcting your path or copying the dlls from the OpenStudio bin directory into the SketchUp install directory will cause the correct dlls to be loaded when SketchUp starts.", 
            "title": "SketchUp crashes on launch"
        }, 
        {
            "location": "/help/troubleshooting/#unable-to-communicate-with-amazon-cloud-from-command-prompt-using-the-bundle-command", 
            "text": "This issue is typically a communication error between you and RubyGems.org. A few things to check:   Are you behind a proxy? If so, then check if the proxy is applied system wide or just for your web browsers. It is typically easiest to open up your favorite browser and check the settings.  Are there any website restrictions at your location? If so, then it is possible that your IT department is blocking access. Note that RubyGems is only the first hurdle, you will also need access to AWS (meaning Amazon).   If you think that the above is happening, then it is best to talk to your IT department and explain the situation. The general explanation for the \"situation\" is that you are trying to run a large number of simulations using Amazon Web Services. Some good questions may be:   How can I access the internet through a command line (or terminal) using our company's proxy?  When I ping aws.amazon.com, it times out; is there something that may be restricting access to the site?  Can we set the proxy to be machine wide, instead of just on the web browsers?", 
            "title": "Unable to Communicate with Amazon Cloud from Command Prompt Using the \"bundle\" Command"
        }, 
        {
            "location": "/help/troubleshooting/#energy-modeling-forum", 
            "text": "Post your questions to the forum below for energy modeling information.  Unmet Hours", 
            "title": "Energy Modeling Forum"
        }, 
        {
            "location": "/help/troubleshooting/#submit-a-bug", 
            "text": "Please let us know if you find a bug in the OpenStudio software.  Submit a Bug", 
            "title": "Submit a Bug"
        }, 
        {
            "location": "/help/troubleshooting/#useful-sketchup-links", 
            "text": "SketchUp's On-Line Help  Forum for SketchUp  Google's user forum for SketchUp  SketchUcation's SketchUp forum", 
            "title": "Useful SketchUp Links"
        }, 
        {
            "location": "/help/faq/", 
            "text": "Frequently Asked Questions\n\n\n\nThis page is a collection of questions that new users commonly ask. If you don't see the answer to your question here, you can also search \nUnmetHours\n to see if someone has already answered your question there.\n\n\nWhat is the difference between a Space and a Zone?\n\n\nThis video provides information on using space types in OpenStudio:\n\n\n\n\n\nAbove: This video introduces some new concepts in OpenStudio 0.5. Geometry is now contained by a space rather than a thermal zone. One or more spaces combine to create a thermal zone. Spaces can also be associated with a space type and a building story.\n\n\nWhat is the difference between the current version of OpenStudio and the Legacy Version of OpenStudio?\n\n\nCheck out our \nFeatures\n page to learn about the functionality of the latest release.", 
            "title": "FAQ"
        }, 
        {
            "location": "/help/faq/#what-is-the-difference-between-a-space-and-a-zone", 
            "text": "This video provides information on using space types in OpenStudio:   Above: This video introduces some new concepts in OpenStudio 0.5. Geometry is now contained by a space rather than a thermal zone. One or more spaces combine to create a thermal zone. Spaces can also be associated with a space type and a building story.", 
            "title": "What is the difference between a Space and a Zone?"
        }, 
        {
            "location": "/help/faq/#what-is-the-difference-between-the-current-version-of-openstudio-and-the-legacy-version-of-openstudio", 
            "text": "Check out our  Features  page to learn about the functionality of the latest release.", 
            "title": "What is the difference between the current version of OpenStudio and the Legacy Version of OpenStudio?"
        }, 
        {
            "location": "/help/software_license/", 
            "text": "Software License Description and Terms\n\n\n\nOpenStudio is licensed under the Lesser General Public License (LGPL), and is free for use and development. Visit the \nLGPL license web page\n for details on the software development kit terms of use.", 
            "title": "Software License"
        }
    ]
}